define( [
    'jquery',
    '../../../../bower_components/underscore/underscore',
    'backbone',
		'i18next',
		'platform',
		'hbs!templates/activityPopup'
], function( $, _, Backbone, i18next, Platform, activityPopupTemplate ) {
	var ActivityPopupView = Backbone.View.extend( {
		el: '#activityModal',
		//className: 'grid-item activity',
		//<div class="grid-item activity done" data-activity="activity-{{id}}">



		events: {
			'click #startActivity': 'startActivity',
			'click .fa-times': 'closeModal'
		},

		render: function() {
			var self = this;
			self.$el.addClass( 'grid-item activity' );

			//this.selectedId = data.id;
			var act = this.model.toJSON();
			act.startActivity = i18next.t( 'feed.buttons.startActivity' );

			if ( navigator.mixpanel ) {
				navigator.mixpanel.track(
					'Activity open',
					{
						'Type': act.type,
						'ID': act.id
					},
					function() { },
					function( message ) {
						console.log( 'mixpanel error' + message );
					}
				);
			}

			switch( act.type ) {
				case 'instructor':
					if( act.activityStatus != 'complete' ) {
						act.title = i18next.t( "feed.instructor.title" );
						act.description = i18next.t( "feed.instructor.description" );
					} else {

						var instructorString = window.localStorage.getItem( 'myInstructor' );
						if ( !_.isNull( instructorString ) && instructorString != '' ) {
							try{
								act.startActivity = i18next.t( 'feed.buttons.myInstructor' );
								var instructor = JSON.parse( instructorString );
								act.title = instructor.givenName + ' ' + instructor.familyName;
								act.description = instructor.bioIntroduction;
								if ( instructor.image && ( instructor.image.length > 0 ) ) {
									_.each( instructor.image, function( v ) {
										if ( v.size == 600 ) {
											act.image = v.url;
										}
									} );
								}
							} catch( err ) {
								var instructor = null;
								act.title = i18next.t( "feed.instructor.title" );
								act.description = i18next.t( "feed.instructor.description" );
							}
						} else {
							act.title = i18next.t( "feed.instructor.title" );
							act.description = i18next.t( "feed.instructor.description" );
						}
					}
					break;

				case 'review':
					act.title = i18next.t( "feed.review.title" );
					act.description = i18next.t( "feed.review.description" );
					break;

				case 'track':
					if( act.activityStatus != 'complete' ) {
						act.title = i18next.t( "feed.track.title" );
						act.description = i18next.t( "feed.track.description" );
					}
					else{
						act.startActivity = i18next.t( 'feed.buttons.viewMyDrive' );
					}
					break;

				case 'read':
				case 'watch':
					break;

				default:
					act.title = 'unknown';
					act.description = 'Sorry do not know about this activity';
					break;
			}

			var compiledPopup = activityPopupTemplate( act );
			//$( '#popup-activity-'+ data.id ).append( compiledPopup );
			self.$el.html( compiledPopup );

			return self;
		},

		startActivity: function( event ) {
			event.preventDefault();
			//console.log( 'start activity', this.model.toJSON() );

			var act = this.model.toJSON();

			if ( navigator.mixpanel ) {
				navigator.mixpanel.track(
					'Activity start',
					{
						'Type': act.type,
						'ID': act.id
					},
					function() { },
					function( message ) {
						console.log( 'mixpanel error' + message );
					}
				);
			}

			// If it's completed we won't need to inform the api that this is completed
			if( act.activityStatus != 'complete' ) {
				window.app.lastActivity = {
					'id': act.id,
					'type': act.type
				}
			} else{
				window.app.lastActivityId = null;
			}


			switch( act.type ) {
				case 'read':
				case 'watch':
//					if( navigator.mixpanel ) {
//						navigator.mixpanel.track(
//							'Learn View',
//							{
//								'learn_id': act.typeId,
//								'learn_type': act.type,
//								'learn_title': act.title
//							},
//							function(){
//
//							},
//							function( message ){
//								console.log( message );
//							}
//						);
//						navigator.mixpanel.increment( 'has_opened_resource', 1,function(){
//						},function( message ){ 'mixpanel error' + message});
//					}

					if( typeof analytics != 'undefined' ) {
						analytics.trackView( 'Learn View' );
					}

					var learnerString = window.localStorage.getItem( 'learner' );
					if ( learnerString ) {
						var learnerJson = JSON.parse( learnerString );
						act.url = act.url.replace( '[learner_id]', learnerJson.id );
					}

					var url = '/webContent/' + act.type + '/' + encodeURIComponent( act.url );
					window.app.router.navigate( url, true );
					break;

				case 'instructor':
					var instructorString = window.localStorage.getItem( 'myInstructor' );
					if ( instructorString != '' ) {
						try{
							var instructor = JSON.parse( instructorString );
							window.app.router.navigate( '/instructorDetail/' + instructor.id, true );
						} catch( err ) {
							var instructor = null;
							if ( Platform.platform == 'iOS' ) {
								window.app.router.navigate( '/instructorSearch', true );
							} else {
								window.app.router.navigate( '/instructors', true );
							}
						}

					} else {
						if ( Platform.platform == 'iOS' ) {
							window.app.router.navigate( '/instructorSearch', true );
						} else {
							window.app.router.navigate( '/instructors', true );
						}
					}
					break;

				case 'review':
					window.app.router.navigate( '/saveReview', true );
					break;

				case 'track':
					if ( act.activityStatus == 'complete' ) {
						window.app.router.navigate( '/drives/' + act.activityTypeId, true );
					} else {
						window.app.router.navigate( '/startTracking', true );
					}
					break;
			}

			return false;
		},

		closeModal: function( event ) {
			event.preventDefault();

			var act = this.model.toJSON();

			if ( navigator.mixpanel ) {
				navigator.mixpanel.track(
					'Activity cancel',
					{
						'Type': act.type,
						'ID': act.id
					},
					function() { },
					function( message ) {
						console.log( 'mixpanel error' + message );
					}
				);
			}
		}

	} );

	return ActivityPopupView;
} );
