define( [
	'jquery',
	'../../../../bower_components/underscore/underscore',
	'backbone',
	'i18next',
	'platform',
	'models/tutorial',
	'hbs!templates/tutorial'
], function( $, _, Backbone, i18next, Platform, TutorialModel, tutorialTemplate ) {

	var TutorialView = Backbone.View.extend( {
		step: 1,
		returnPath: 'feed',
		events: {
			'click .tutorialNext': 'next',
			'click #tutorialDone': 'done'
		},

		render: function( router, step, returnPath ) {
			var self = this;
			this.step = step - 0;

			// add classes to the body
			$( 'body' ).removeClass().addClass( 'full-page tutorial' );

			if ( typeof analytics !== 'undefined' ) {
				analytics.trackView( 'Onboarding Screen ' + step );
			}

			if ( returnPath ) {
				this.returnPath = returnPath;
			}

			var currentStep = step || 1;
			var headerMenu = {
				title: 'Tutorial',
				menu: [
					{
						'name': 'Quit tutorial',
						'class': 'quitTutorial',
						'action': function( event ) {
							window.app.router.navigate( self.returnPath, true );
						}
					}
				]
			};

			this.model = new TutorialModel;
			var screens = this.model.toJSON().screens;
			var maxScreens = screens.length;

			if ( currentStep > maxScreens ) {
				currentStep = maxScreens;
			}

			var data = screens[ currentStep - 1 ];

			if ( currentStep == maxScreens ) {
				// last one, let's start using the app
				data.last = true;
				delete headerMenu.menu;
			}

			data.default = true;

			if ( Platform.platform == 'iOS' ) {
				data.ios = true;
				data.default = false;
			}

			var progressCircles = [];
			for( var i = 0; i < maxScreens; i++ ) {
				if ( currentStep > i ) {
					progressCircles[i] = { "class": "done" };
				} else {
					progressCircles[i] = { "class": "" };
				}
			}

			data.progressCircles = progressCircles;

			/*if ( ( typeof window.app != 'undefined' ) && ( typeof window.app.headerView != 'undefined' ) ) {
				window.app.headerView.render( headerMenu );
			}*/

			var compiledTemplate = tutorialTemplate( data );
			this.$el.html( compiledTemplate );
      //console.log(this.$el);
			router.postRender( self );
			if ( Platform.platform == 'iOS' ) {
      	this.$el.addClass( 'blue-back' );
			}

			var learnerString = window.localStorage.getItem( 'learner' );
			var learner = JSON.parse( learnerString );

			if( learner ) {
				if( navigator && navigator.mixpanel ) {
					navigator.mixpanel.identify(
						learner.id.toString(),
						function() {
							navigator.mixpanel.track(
								'Tutorial viewed',
								{
									'Screen': currentStep
								},
								function () { },
								function ( message ) {
									console.log( message );
								}
							);
						},
						function ( message ) {
							console.log( 'mixpanel identify NOT OK' + message );
						}
					);
				}
			}
		},

		next: function( event ) {
			// next page
			event.preventDefault();
			window.app.router.navigate( 'tutorial/' + ( this.step - 0 + 1 ), true );
		},

		done: function( event ) {
			// next page
			event.preventDefault();
			if( window.Adjust ){
				window.Adjust.trackEvent('fb_mobile_tutorial_completion');
																 }

			var learnerString = window.localStorage.getItem( 'learner' );
			var learner = JSON.parse( learnerString );

			if( learner ){
				if( navigator && navigator.mixpanel ) {
					navigator.mixpanel.identify(
						learner.id.toString(),
						function() {

							navigator.mixpanel.track(
								'Tutorial completed',
								{ },
								function () { },
								function ( message ) {
									console.log( message );
								}
							);
							navigator.mixpanel.peopleSet(
								{
									'User ID': learner.id,
									'Tutorial completed': true
								},
								function () { },
								function ( message ) {
									console.log( 'mixpanel error' + message );
								}
							);
						},
						function ( message ) {
							console.log('mixpanel identify NOT OK' + message);
						}
					);
				}
			}

			window.app.router.navigate( this.returnPath, true );
		}
	} );

	return TutorialView;
} );
