define( [
	'jquery',
	'../../../../bower_components/underscore/underscore',
	'backbone',
	'moment',
	'i18next',
	'platform',
	'models/drive',
	'hbs!templates/saveDrive'
], function( $, _, Backbone, moment, i18next, Platform, DriveModel, saveDriveTemplate ) {

	var DriveView = Backbone.View.extend( {
		//el: '#app',
		events: {
			'submit #saveDrive': 'noAction',
			'click #saveAwayDrive': 'sendForm',
			'click #deleteDrive': 'cancelDrive',
			'click .back': 'back',
			'click .starRatingLabel': 'starRating',
			'click label' : 'labelClick'
		},

		back: function() {
			window.app.router.goBack();
		},

		initialize: function() {

		},

		render: function( data ) {

			if( typeof analytics !== 'undefined' ) {
				analytics.trackView( 'New Drive' );
			}

			$( 'body' ).removeClass();

			var self = this;
			var params = data || {};

			var learnerString = window.localStorage.getItem( 'learner' );
			var learner = JSON.parse( learnerString );
			params.learnerId = learner.id;
			params.instructorId = null;
			params.manoeuvres = this.getManoeuvres();

			//window.app.headerView.render( { title: i18next.t( "saveDrive.headerTitle" ) } );

			var compiledTemplate = saveDriveTemplate( params );
			this.$el.html( compiledTemplate );

			// activate the star rating
			$( '.star' ).rating();
			window.app.router.postRender( self );

			// default to 3 stars
			this.$el.find( '#star3' ).click();

		},

		starRating: function( event ) {
			event.preventDefault();

			//if ( navigator.userAgent.match(/Chrome/gi) == null ) {
				// only webkit browsers
				var starOn = '#34aadc';
				var starOff = '#ddd';
				$( '.starRatingLabel' ).css( 'color', starOff );
				//$( 'input[name=starRating]' ).attr( 'checked', '' );
				var starIndex = $( event.target ).data( 'value' ) - 0;
				$( '#star' + starIndex ).prop( "checked", true );
				$( '.starRatingLabel' ).each( function( i, v ) {
					if ( ( $( v ).data( 'value' ) - 0 ) <= starIndex ) {
						$( '.starRatingLabel' ).css( 'color', starOn );
					}
				} );
			//}
		},

		getManoeuvres: function() {
			var manoeuvres = this.defaultManoeuvres();
			if ( window.localStorage.getItem( 'manoeuvres' ) ) {
				var manoeuvresString = window.localStorage.getItem( 'manoeuvres' );
				try{
					manoeuvres = JSON.parse( manoeuvresString );
				} catch( err ) {
					manoeuvres = this.defaultManoeuvres();
					window.localStorage.removeItem( 'manoeuvres' );
				}
			}

			return manoeuvres;
		},

		noAction: function( event ) {
			console.log( 'no actions' );
			// prevent any action like sending the form by mistake
			event.preventDefault();
		},

		sendForm: function( event ) {
			event.preventDefault();
			$( '#loading' ).show();
			var self = this;

			var formData =  $( '#saveDrive' ).serializeObject(); // just the JSON

			if( ( typeof formData.driveType == 'undefined' ) || ( formData.driveType == '' ) ) {

				if ( navigator && navigator.notification ) {
					navigator.notification.alert(
						i18next.t( "saveDrive.noDriveType.message" ),
						function() {
							$( '#loading' ).hide();
						},         // callback
						i18next.t( "saveDrive.noDriveType.title" ),
						i18next.t( "saveDrive.noDriveType.button" )
					);
				} else {
					alert( i18next.t( "saveDrive.noDriveType.message" ) );
				}
			} else {

				var manoeuvres = [];
				$( 'input[name="manoeuvres"]' ).each( function( i, v ) {
					if ( $( v ).is( ':checked' ) ) {
						manoeuvres.push( $( v ).val() );
					}
				} );

				if( manoeuvres.length > 0 ) {
					formData.manoeuvres = manoeuvres;
				} else {
					delete( formData.manoeuvres );
				}

				var manoeuvres = this.getManoeuvres();
				var mixpanelManoeuvres = [];
				_.each( formData.manoeuvres, function( man ) {
					_.each( manoeuvres, function( m ) {
						if( man == m.id ) {
							mixpanelManoeuvres.push( m.name );
						}
					} );
				} );

//				if( mixpanelManoeuvres.length > 0 ){
//					if( navigator.mixpanel ) {
//						navigator.mixpanel.track(
//							'Track Manoeuvres',
//							{ 'manoeuvre_type': mixpanelManoeuvres.join( ',' ) },
//							function() {
//
//							},
//							function( message ) {
//								console.log( message );
//							}
//						);
//					}
//				}

						//value = null;

				var saveDriveModel = Backbone.Model.extend( {
					url: window.app.config.apiURL + '/drives'
				} );

				this.model = new saveDriveModel;


				this.getAllPoints(
					function( json ) {
						console.log( '-- getAllPoints success: ' + json );

						var route = JSON.parse( json );

						if ( route.locations && route.locations.length > 0 ) {

							formData.startDate = route.locations[0].timestamp;
							formData.stopDate = route.locations[ route.locations.length - 1 ].timestamp;
							formData.locations = route.locations;

							if ( formData.driveType != 'practice' ) {
								// add the instructor to the drive
								var instructorString = window.localStorage.getItem( 'myInstructor' );
								if ( instructorString ) {
									try{
									var instructor = JSON.parse( instructorString );
									formData.instructorId = instructor.id;
									} catch( err ) {
										// probably issue with json parse
										$( '#loading' ).hide();
									}
								}
							}

							console.log( 'formData: ' + JSON.stringify( formData ) );

							if( !_.isUndefined( window.app.lastActivity ) && ( window.app.lastActivity.type === 'track' ) ) {
								formData.activityId = window.app.lastActivity.id;
							}

							self.model.save( formData, {
								success: function( model, response, options ) {

									if ( window.activitiesDb ) {
										window.activitiesDb.updateStatus( window.app.lastActivity.id, 'complete', response.id );
									}

									console.log( model.driveType );
									if( navigator.mixpanel ) {

										var duration = null;

										if ( response.startDate && response.stopDate ) {
//											var now  = "04/09/2013 15:00:00";
//											var then = "02/09/2013 14:20:30";

											var ms = moment( response.stopDate, "DD/MM/YYYY HH:mm:ss" ).diff( moment( response.startDate, "DD/MM/YYYY HH:mm:ss" ) );
											var d = moment.duration( ms );
											var duration = Math.floor( d.asHours() ) + moment.utc( ms ).format( ":mm:ss" );
										}

										navigator.mixpanel.track(
											'Track saved',
											{
												'Drive ID': response.id,
												'Type': response.driveType,
												'Rating': response.starRating,
												'Time': duration,
												'Manoeuvres': JSON.stringify( response.manoeuvres )
											},
											function() {

											},
											function( message ) {
												console.log( message );
											}
										);
										navigator.mixpanel.peopleSet(
											{
												'Has tracked drive': true
											},
											function() {

											},
											function( message ) {
												console.log( 'mixpanel error' + message );
											}
										);
										navigator.mixpanel.increment(
											'Total drives tracked',
											1,
											function() {

											},
											function( message ) {
												console.log( 'mixpanel error' + message );
											}
										);
										navigator.mixpanel.increment(
											'Total activities',
											1,
											function() {

											},
											function( message ) {
												console.log( 'mixpanel error' + message );
											}
										);
									}

									console.log( '-- SaveDrive success', model, response, options );

									//alert( 'drive successively posted' );

									console.log( 'model: ' + JSON.stringify( model ) );
									console.log( 'response: ' + JSON.stringify( response ) );

									var drive = response;

									if ( ( Platform.platform == 'Android' ) && window.app.bgGeo ) {
										window.app.bgGeo.deleteAllPoints(
											function() {
												// success
												//alert( 'cleared the route' );

												//window.app.router.navigate( '/drives/' + drive.id, true );
											},
											function( error ) {
												$( '#loading' ).hide();
												// error
												//alert( 'could not clear the route!!!' );
												//window.app.router.navigate( '/drives/' + drive.id, true );
											}
										);
									} else {
										var db = openDatabase( 'geolocation', '1.0', 'locations', 1 * 1024 * 1024 );
										db.transaction( function (tx) {
											tx.executeSql( 'drop table if exists locations;' );
										} );
									}

									window.app.router.navigate( '/drives/' + drive.id, true );
								},
								error: function( model, response, options ) {
									console.log( '-- SaveDrive error', model, response, options );
									console.log( 'response: ' + response.responseText );

									if ( ( _.isUndefined( response.responseText ) && ( response.statusText == 'error' ) && ( response.status == 0 ) ) || ( navigator.connection && navigator.connection.type && ( navigator.connection.type == Connection.NONE ) ) ) {

										// only want to send if you get a time out or no connection
										// store the drive and try again later
										window.offlineRequests.storeRequest(
											null,
											model.url(),
											'POST',
											JSON.stringify( model.toJSON() )
										);
									}

									var rp = JSON.parse( response.responseText );

									if ( rp.response && rp.response.error ) {
										console.log( 'response error: ' + JSON.stringify( rp.response.error ) );
									}

									if ( rp.response && rp.response.missing ) {
										console.log( 'response missing: ' + JSON.stringify( rp.response.missing ) );
									}

									//console.log( 'response: ' + JSON.stringify( response ) );
								}
							} );
						} else {
							$( '#loading' ).hide();
							self.noLocationPoints();
						}
					},
					function( err ) {
						$( '#loading' ).hide();
						console.log( 'error get all points: ' + err );
						self.noLocationPoints();
					}
				);


			}



		},

		noLocationPoints: function() {
			// no points at all
			if ( navigator && navigator.notification ) {
				navigator.notification.alert(
					i18next.t( "saveDrive.noTrackAlert.message" ),
					function() {
						window.app.router.navigate( '/feed', true );
					},         // callback
					i18next.t( "saveDrive.noTrackAlert.title" ),
					i18next.t( "saveDrive.noTrackAlert.button" )
				);
			} else {
				alert( i18next.t( "saveDrive.noTrackAlert.message" ) );
				window.app.router.navigate( '/feed', true );
			}
		},

		cancelDrive: function( event ) {
			event.preventDefault();

			var self = this;
			if ( navigator && navigator.notification ) {
				navigator.notification.confirm(
					i18next.t( "drive.confirmation.message" ),
					function( buttonIndex ) {
						if ( buttonIndex == 1 ) {
							// call the model and do delete
							self.cancellingDrive();
						}
					},
					i18next.t( "drive.confirmation.title" ),
					[
						i18next.t( "drive.confirmation.buttons.delete" ),
						i18next.t( "drive.confirmation.buttons.cancel" )
					]
				);
			} else {
				// call the model and do delete
				self.cancellingDrive();
			}
		},

		cancellingDrive: function() {

			if( navigator.mixpanel ) {
				navigator.mixpanel.track(
					'Track deleted',
					{
						'Screen': 'Tracking flow'
					},
					function() {

					},
					function( message ) {
						console.log( message );
					}
				);
			}

			if ( Platform.platform == 'iOS' ) {
				var db = openDatabase( 'geolocation', '1.0', 'locations', 1 * 1024 * 1024 );
				db.transaction( function ( tx ) {
					tx.executeSql( 'drop table locations;' );

					window.app.router.navigate( '/feed', true );
				} );
			} else {
				if ( window.app.bgGeo ) {
					window.app.bgGeo.deleteAllPoints(
						function() {
							// success
							alert( 'cancelled and cleared the route' );
							window.app.router.navigate( '/feed', true );
						},
						function( error ) {
							// error
							alert( 'cancelled but could not clear the route!!!' );
							window.app.router.navigate( '/feed', true );
						}
					);
				} else {
					window.app.router.navigate( '/feed', true );
				}
			}
		},

		defaultManoeuvres: function() {
			// TODO need to download the lastest list of manoeuvres
			return [
				{
					"id": 1,
					"name": "Bay parking",
					"description": null
				},
				{
					"id": 2,
					"name": "Emergency stop",
					"description": null
				},
				{
					"id": 3,
					"name": "Parallel parking",
					"description": null
				},
				{
					"id": 4,
					"name": "Turn in the road",
					"description": null
				},
				{
					"id": 5,
					"name": "Left corner reverse",
					"description": null
				}
			];
		},

		getAllPoints: function( success, error ) {

			// Get All Points callbacks
			var callbackGetAllFn = function( json ) {
				console.log( 'all points callback:  ' + json );

				window.app.locations = json;
			};

			var failureGetAllFn = function( error ) {
				console.log( 'BackgroundGeoLocation error gettting all points' );
				window.app.locations = 'failed';
			}

			if ( Platform.platform == 'Android' && window.app.bgGeo ) {
				window.app.bgGeo.getAllPoints( success, error );
			} else {
				var db = openDatabase( 'geolocation', '1.0', 'locations', 1 * 1024 * 1024 );
				db.transaction( function (tx ) {

					tx.executeSql( 'SELECT * FROM locations', [], function ( tx, results ) {
						var out = "";
						var len = results.rows.length, i;

						for ( i = 0; i < len; i++ ) {
							out+= "{ \"latitude\":\"" + results.rows.item(i).latitude + "\", \"longitude\":\"" + results.rows.item(i).longitude + "\",\"speed\":\"" + results.rows.item(i).speed + "\",\"altitude\":\"" + results.rows.item(i).altitude + "\",\"accuracy\":{\"horizontal\":\"-1\",\"vertical\":\"-1\",\"accuracy\":\"" + results.rows.item(i).accuracy + "\"},\"recordedAt\":\"" + results.rows.item(i).timestamp + "\",\"timestamp\":\"" + results.rows.item(i).timestamp + "\" },";
						}

						if( out.length > 0 ) {
							out = out.replace( /,\s*$/, "" );
						}

						window.app.locations = '{ \"locations\": [ ' + out + ' ] } ';

						if( out.length > 0 ) {
							success( window.app.locations );
						} else {
							window.app.locations = 'failed';
							error( 'No points were recorded' );
						}
						//console.log( window.app.locations );

					});
				});
			}
		},

		labelClick: function( event ) {
			var labelID = $( event.target ).attr( 'for' );
			$( '#' + labelID ).trigger( 'click' );
		},

		deleteAllPoints: function() {

			// Delete All Points callbacks
			var callbackDeleteAllFn = function() {
				console.log( 'all points deleted' );
			};

			var failureDeleteAllFn = function( error ) {
				console.log( 'BackgroundGeoLocation error deleting all points' );
			}

			window.app.bgGeo.deleteAllPoints( callbackDeleteAllFn, failureDeleteAllFn );

		},


	} );

	return DriveView;
} );
