define( [
	'jquery',
	'../../../../bower_components/underscore/underscore',
	'backbone',
	'models/instructor',
	'hbs!templates/instructorPrices',
	'i18next',
	'views/header'
], function( $, _, Backbone, InstructorModel, instructorPricesTemplate, i18next, HeaderView) {
	var InstructorPricesView = Backbone.View.extend( {

		render: function( data ) {

			var self = this;
			var params = data || {};

			if( typeof analytics !== 'undefined' ) {
				analytics.trackView( 'Instructor Prices' );
			}

			// mangle the data into the correct format
			params.prices = [];
			var manuals = {};
			var automatics = {};
			var hours = [];

			//first collect manuals and autos in Dictionaries
			_.each( params.guidePrices, function ( guidePrice ) {

				_.each ( guidePrice.prices, function ( hourRate ) {
					//console.log( hourRate.hour );
					hours.push( hourRate.hour );
					} );
				if( guidePrice.type == 'manual' ) {
					_.each ( guidePrice.prices, function ( hourRate ) {
						manuals[hourRate.hour] = hourRate.rate;
					} );
				} else {
					_.each ( guidePrice.prices, function ( hourRate ) {
						automatics[hourRate.hour] = hourRate.rate;
					} );
				}
			} );

			// then assign them into js objects
			_.each ( hours, function ( hourRate ) {
				params.prices.push(
					{
						hour: hourRate,
						manual: ( manuals[hourRate] ) ? '&pound;' + manuals[hourRate] : i18next.t( "instructorPrices.labels.notApplicable" ),
						automatic: ( automatics[hourRate] ) ? '&pound;' + automatics[hourRate] : i18next.t( "instructorPrices.labels.notApplicable" )
					}
				);

			} );


			var compiledTemplate = instructorPricesTemplate( params );
			this.$el.html( compiledTemplate );

			var header = new HeaderView();

			header.render( {
				back: true,
				title: ( data.givenName || '' ) + ' ' + ( data.familyName || '' )
			} );

			this.$el.find( '#header' ).append( header.el );

			if( navigator.mixpanel ) {
				navigator.mixpanel.track(
					'Instructor viewed detail',
					{
						'Instructor': params.id,
						'content': 'Prices'
					},
					function(){ },
					function( message ) {
						console.log( message );
					}
				);
			}

			window.app.router.postRender( self );
		}

	} );

	return InstructorPricesView;
} );
