define( [
	'jquery',
	'../../../../bower_components/underscore/underscore',
	'backbone',
	'i18next',
	'models/saveReview',
	'models/learner',
	'hbs!templates/saveReview'
], function( $, _, Backbone, i18next, SaveReviewModel, LearnerModel, saveReviewTemplate ) {
	var SaveReviewView = Backbone.View.extend( {

		events: {
			'submit #sendForm': 'sendReview',
			'click #saveReview': 'sendReview',
			'click #cancelReview': 'back',
			'click .starRatingLabel': 'starRating'
		},

		learner: {},
		myInstructor: {},
		learnerInfo: {},

		back: function() {
			window.app.router.goBack();
		},

		initialize: function() {
			this.model = new SaveReviewModel();
			var learnerString = window.localStorage.getItem( 'learner' );
			this.learner = JSON.parse( learnerString );

			// stored from "choose instructor"
			var myInstructorString = window.localStorage.getItem( 'myInstructor' );
			this.myInstructor = JSON.parse( myInstructorString );
		},

		starRating: function( event ) {
			event.preventDefault();

			//if ( navigator.userAgent.match(/Chrome/gi) == null ) {
				// only webkit browsers
				var starOn = '#34aadc';
				var starOff = '#ddd';
				$( '.starRatingLabel' ).css( 'color', starOff );
				//$( 'input[name=starRating]' ).attr( 'checked', '' );
				var starIndex = $( event.target ).data( 'value' ) - 0;
				$( '#star' + starIndex ).prop( "checked", true );
				$( '.starRatingLabel' ).each( function( i, v ) {
					if ( ( $( v ).data( 'value' ) - 0 ) <= starIndex ) {
						$( '.starRatingLabel' ).css( 'color', starOn );
					}
				} );
			//}
		},

		render: function() {

			if( typeof analytics !== 'undefined' ){
				analytics.trackView('Save Review');
			}

			var self = this;

			if ( !this.learner.instructor ) {
				this.learnerModel = new LearnerModel();
				this.learnerModel.id = this.learner.id;

				this.learnerModel.fetch( {
					success: function( model, response, options ) {
						console.log( 'learnerInfo - success', response );


						self.learnerInfo = model.toJSON();
						var data = response || {};
						var compiledTemplate = saveReviewTemplate( data );
						self.$el.html( compiledTemplate );
						// activate the star rating
						$( '.star' ).rating();
						// hide the success message
						$( '#sendFormSuccess' ).hide();

					},
					error: function( model, response, options ) {
						console.log( 'learnerInfo - error', response );
					},
				} );
			} else {
				this.learnerInfo = this.learner;
				var data = this.learner || {};
				var compiledTemplate = saveReviewTemplate( data );
				self.$el.html( compiledTemplate );
				// activate the star rating
				$( '.star' ).rating();
				// hide the success message
				$( '#sendFormSuccess' ).hide();
			}

			if ( window.app && window.app.router ) {

				window.app.router.postRender( self );

			} else {
				setTimeout( function() {
					window.app.router.postRender( self );
				}, 1000 );
			}

			// default to 3 stars
			this.$el.find( '#star3' ).click();

		},

		sendReview: function( event ) {
			event.preventDefault;

			var self = this;
			var formData =  $( '#sendForm' ).serializeObject();

			if( typeof formData.body == 'undefined' || formData.body.trim() == '' ){
				if ( navigator && navigator.notification ) {
					navigator.notification.alert(
						i18next.t( "saveReview.noReview.message" ),
						function() {

						},         // callback
						i18next.t( "saveReview.noReview.title" ),
						i18next.t( "saveReview.noReview.button" )
					);
				}
				else{
					alert("Please enter a review");
				}
			}
			else{
				formData.instructorId = self.learnerInfo.instructor.id;

				if ( window.app && window.app.lastActivity && ( window.app.lastActivity.type == 'review' ) ) {
					formData.activityId = window.app.lastActivity.id;
				}

				//console.log( 'formData', formData );

				this.model.instructorId = formData.instructorId;
				this.model.set( formData );
				// send the form

				this.model.save( formData, {
					success: function( model, response, options ) {
						console.log( 'sendReview - success', response );

						if ( navigator.mixpanel ) {
							navigator.mixpanel.track(
								'Instructor reviewed',
								{
									'Instructor': model.instructorId,
									'Rating': model.starRating
								},
								function() { },
								function( message ) {
									console.log( 'mixpanel error' + message );
								}
							);
							navigator.mixpanel.peopleSet(
								{
									'Has reviewed instructor': true
								},
								function() { },
								function( message ) {
									console.log( 'mixpanel error' + message );
								}
							);
						}

						$( '#sendForm' ).hide();
						$( '#sendFormSuccess' ).show();

						self.back();
					},
					error: function( model, response, options ) {
						if ( ( _.isUndefined( response.responseText ) && ( response.statusText == 'error' ) && ( response.status == 0 ) ) || ( navigator.connection && navigator.connection.type && ( navigator.connection.type == Connection.NONE ) ) ) {

							// only want to send if you get a time out or no connection
							// store the review and try again later
							window.offlineRequests.storeRequest(
								null,
								model.url(),
								'POST',
								JSON.stringify( model.toJSON() )
							);

							self.back();
						}

					}
				} );
			}



			return false;
		}

	} );

	return SaveReviewView;
} );
