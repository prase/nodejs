"use strict";
define( function ( require ) {

	var $ = require( 'jquery' );

	return function PageTransitions( router, container ) {

		var readStateHistory = function() {
			return JSON.parse( window.localStorage.getItem( 'stateHistory' ) );
		};
		
		var currentPage;
		var stateHistory = readStateHistory() || [];

		this.back = function () {
			location.hash = stateHistory[stateHistory.length - 2];
		};
		
		var saveStateHistory = function( stateHistory ) {
			window.localStorage.setItem( 'stateHistory', JSON.stringify( stateHistory ) );
		};
		
		this.clearStateHistory = function( fromPage ) {
			stateHistory = [];
			stateHistory.push( fromPage );
			saveStateHistory( stateHistory );
		};
		
		this.clearAllStateHistory = function( ) {
			stateHistory = [];
		};

		// Use this function if you want PageSlider to automatically determine the sliding direction based on the state history
		this.slidePage = function ( page ) {
			var l = stateHistory.length;
			var state = window.location.hash;

			if ( l === 0 ) {
				stateHistory.push( state );				
				saveStateHistory( stateHistory );
				
				this.slidePageFrom( page );
				router.animating = false;						
				return;
			}
			if ( state === stateHistory[ l - 2 ] ) {
				stateHistory.pop();
				saveStateHistory( stateHistory );
				
				this.slidePageFrom( page, 'page-left' );
				router.animating = false;
			} else {
				stateHistory.push( state );
				saveStateHistory( stateHistory );
				
				this.slidePageFrom( page, 'page-right' );
				router.animating = false;
			}

		};

		// Use this function directly if you want to control the sliding direction outside PageSlider
		this.slidePageFrom = function ( page, from ) {
			container.append( page );

			if ( !currentPage || !from ) {
				page.attr( "class", "page page-center" );
				currentPage = page;
				return;
			}

			// Position the page at the starting position of the animation
			page.attr( "class", "page " + from );

			currentPage.one( 'webkitTransitionEnd', function ( e ) {
				$( e.target ).remove();
			} );

			// Force reflow. More information here: http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/
			if( container && container[0] && container[0].offsetWidth ){
				container[0].offsetWidth;
			}

			// Position the new page and the current page at the ending position of their animation with a transition class indicating the duration of the animation
			page.attr( "class", "page transition page-center" );
			currentPage.attr( "class", "page transition " + ( from === "page-left" ? "page-right" : "page-left" ) );
			currentPage = page;
		};
	};
} );