/* Handlebars i18next Helper
 *
 * Version 0.1.0 (10-13-2013)
 * Copyright 2013 Jacob van Mourik
 * Released under the MIT license
 */
( function( root, factory ) {

	// Expose Handlebars with i18next helper
	if ( typeof module == "object" && module.exports ) {
		module.exports = factory( require( "hbs/handlebars" ), require( "i18next" ) );
	} else if ( typeof define == "function" && define.amd ) {
		define( [ "hbs/handlebars", "../../../bower_components/i18next/i18next" ], function( Handlebars, i18next ) {
			return factory( Handlebars || root.Handlebars, i18next || root.i18next );
		} );
	} else {
		factory( Handlebars || root.Handlebars, i18next || root.i18next );
	}

} )( this, function( Handlebars, i18next ) {
"use strict";

	i18next.init( {
		lng: "en",
		resGetPath: 'js/app/templates/i18n/__lng__.json',
		getAsync: false,
		fallbackLng: false,
		customLoad: function( lngs, ns, options, loadComplete ) {
			$.ajaxSetup({
				async: false
			});

			var url = 'js/app/templates/i18n/en.json';
			$.getJSON( url, function( data ) {
				if ( data ) {
					loadComplete( null, data );
				} else {
					loadComplete('failed loading resource.json error' );
				}
			});


			$.ajaxSetup({
				async: true
			});


		}
	} );


	// Register i18next helper
	Handlebars.registerHelper( 'i18next', function( key, options ) {
		var result = i18next.t( key, options.hash );
		return new Handlebars.SafeString( result );
	});

	Handlebars.registerHelper( 'i18nextr', function( context, options ) {
		var opts = i18next.functions.extend( options.hash, context );
		if ( options.fn ) {
			opts.defaultValue = options.fn( context );
		}
		//console.log( opts, options.hash );
		var result = i18next.t( opts.key, opts );
		return new Handlebars.SafeString( result );
	} );


	return Handlebars;
});
