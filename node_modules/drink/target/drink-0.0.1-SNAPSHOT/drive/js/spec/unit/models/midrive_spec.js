( function() {
  define( function( require, exports, module ) {
    var MiDrive;
    MiDrive = require( 'models/miDrive' );
    return describe( "MiDrive", function() {
      var spies;
      spies = {
        widget: {
          bar: null
        }
      };
      before( function() {
        return this.widget = new MiDrive;
      } );
      describe( "A simple test", function() {
        return describe( "fooBar()", function() {
          return it( "returns the concatenated result of foo() and bar()", function() {
            return this.miDrive.fooBar().should.equal( "foobar" );
          });
        });
      });
      return describe( "Using stubs", function() {
        before( function() {
          return spies.miDrive.bar = sinon.stub( MiDrive.prototype, 'bar' ).returns( "foo" );
        });
        after( function() {
          return spies.miDrive.bar.restore();
        } );
        return describe( "fooBar()", function() {
          return it( "returns the concatenated result of foo() and bar()", function() {
            return this.miDrive.fooBar().should.equal( "foofoo" );
          } );
        } );
      } );
    } );
  } );

} ).call( this );
