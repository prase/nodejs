'use strict';
angular.module('parkedex.controllers')

.controller('AppCtrl', ['$scope',
						'$ionicModal',
						'$timeout',
						'$location',
						'MapService',
						'$ionicSideMenuDelegate',
						'ParkingService',
						'$ionicPlatform',
						function($scope, $ionicModal, $timeout, $location, MapService, $ionicSideMenuDelegate, ParkingService, $ionicPlatform) {
	
	$scope.viewData = {};
	$scope.viewData.menuVisible = false;
	
	$scope.data = ParkingService.data;
	
	$scope.isMenuOpen = $ionicSideMenuDelegate.isOpenLeft;
	
	$scope.accordionModal = null;
	
	/*$scope.navigateTo = function (path) {
		console.log (path);
		if (path != 'app/search') {
			MapService.isMapActiveView = false;
		}
		$location.path(path);
	};*/
	
	// (from coderwall) function to make sure that $scope.$apply doesn't create errors
	$scope.safeApply = function(fn) {
		//console.log (document.getElementById('menu_img').className);
		var phase = this.$root.$$phase;
		if(phase == '$apply' || phase == '$digest') {
			if(fn && (typeof(fn) === 'function')) {
				fn();
			}
		} else {
			this.$apply(fn);
		}
	};
	
	// var to save the clickable status of the map it had before opening a menu modal:
	var beforeOpen = false;
	
	// function to save the backButtonAction to close the menu modal again:
	var backb = function () {};
	
	$scope.showModal = function (choose) {
		console.log (choose);
		
		$scope.accContent = choose;
		$ionicModal.fromTemplateUrl('templates/accordion_modal.html', {
			scope: $scope, 
			animation: 'slide-in-side'
		}).then(function(modal) {
			$scope.accordionModal = modal;
			beforeOpen = MapService.isMapActiveView;
			console.log ('map active view: ' + beforeOpen);
			backb = $ionicPlatform.registerBackButtonAction($scope.closeAccordion, 300);
			MapService.isMapActiveView = false;
			modal.show();
		});
	}
	
	$scope.closeAccordion = function () {
		/*$scope.agbModal.hide();
		$scope.faqModal.hide();
		$scope.impressumModal.hide();*/
		$scope.accordionModal.hide();
		MapService.isMapActiveView = beforeOpen;
		MapService.getMap().setClickable (beforeOpen);
		backb ();
	}
	
	$scope.$on('$ionicView.loaded', function(){
		// create the accordion modal:
		//createModals ();
	});
	
}])

.controller('SearchCtrl', [
	'$scope',
	'$ionicLoading',
	'ParkingService',
	'Geolocation',
	'$ionicSlideBoxDelegate',
	'$ionicScrollDelegate',
	'$window',
	'$ionicModal',
	'$ionicActionSheet',
	'$timeout', 
	'MapService',
	'$rootScope',
	'FeedbackService',
	'$ionicPlatform', 
	function ($scope, $ionicLoading, ParkingService, Geolocation, $ionicSlideBoxDelegate, $ionicScrollDelegate, $window, $ionicModal, $ionicActionSheet, $timeout, MapService, $rootScope, FeedbackService, $ionicPlatform) {
	
	// connecting the data from the ParkingService Service to the data in the scope
	$scope.data = ParkingService.data;
	$rootScope.data = ParkingService.data;
	
	// a handle for the backButtonAction for the modals: 
	// will deregister the currently loaded action when called.
	var backButtonAction = null;
	
	var listBackAction = null;
	
	/** --------------------------------------------------------
	 *							MAP STUFF:							
	*** ------------------------------------------------------*/
	
	// vars
	$scope.gMapReady = false; 			// boolean, flag if map is loaded
	$scope.infoVisible = false;			// boolean, flag if info in footer is visible

	var gMapHandle = null;
	var gMapCameraPosition = {};
	MapService.isMapActiveView = true;

	$scope.location = {lat: 48.7758459, lng: 9.1829321};
	ParkingService.data.selectedParking = null;
	
	// container for the reloading function of the pins
	var timeoutfunction = null;
	
	function hideParkInfo (e) {
		
		if (ParkingService.data.selectedParking != null) { 
			// unselect the currently selected Marker
			unselectMarker ();
		}
	};
	
	// deselects the current marker pin:
	function unselectMarker () {
		if (ParkingService.data.selectedParking == null) return;
		if (ParkingService.data.selectedParking.id == null) return;
		console.log ('it was at least defined.');
		MapService.unselectMarker (ParkingService.data.selectedParking.id);
		console.log ('unselected marker ' + ParkingService.data.selectedParking.id);
		$scope.safeApply( function () { ParkingService.data.selectedParking = null; });
	}
	
	// changes the pin of a marker to selected:
	function selectMarker (id) {
		$scope.safeApply( function () { ParkingService.data.selectedParking = ParkingService.getById (id); });
		MapService.selectMarker (id);
	}
	
	MapService.markerClickCallback = function (id) {

		if ((ParkingService.data.selectedParking != null) && (id == ParkingService.data.selectedParking.id)) {
			console.log ('not activating:' + id);
			return;
		}
		unselectMarker ();
		selectMarker (id);
	}
	
	MapService.onReady().then(function (map) {
		gMapHandle = map;
		gMapHandle.setOptions({
			'controls' : {
				'compass' : true,
				'myLocationButton': true,
				'zoom': false
			}, 
			'gestures' : {
				'tilt': true,
				'rotate': true
			}
		});
		MapService.setEvent ('MY_LOCATION_BUTTON_CLICK', locateUser);
		MapService.setEvent ('MAP_CLICK', hideParkInfo);
	}, function (error) {
		console.log (error);
	});
	
	// function for locating the current user on the map:
	function locateUser () {
		
		MapService.getLocation().then (function(position) {
			ParkingService.data.currentLocation = {
				latitude: position.latLng.lat, 
				longitude: position.latLng.lng
			};
			getCurrentPositionAddress();
			$scope.reloadParkings();
			MapService.moveToPoint (position.latLng.lat, position.latLng.lng);
		}, function (error) {
			console.log (JSON.stringify (error));
		});
	};
	
	/*$scope.map.events.drag = function () {
		$timeout.cancel (timeoutfunction);
	}
	
	$scope.map.events.dragend = function () {
		timeoutfunction = $timeout(function() {
			var distancemoved = ParkingService.calcDistance (ParkingService.data.currentLocation.latitude, ParkingService.data.currentLocation.longitude, ParkingService.data.lastLocation.latitude, ParkingService.data.lastLocation.longitude);
			console.log ('moved ' + distancemoved + 'km');
			if (distancemoved > 1) {
				$scope.loadParkingsHere();
			}
		}, 2000);
	}*/
	

	/** ---------------------------------------------
	 * 					PARKING STUFF
	*** -------------------------------------------*/

	function getCurrentPositionAddress() {
		// write the address of the point where we searched in the address bar:
		return Geolocation.getAddressFromLocation(ParkingService.data.currentLocation).then(function (response) {
			ParkingService.data.address = response;
		});
	}
	
	$scope.loadParkingsHere = function () {
		ParkingService.data.currentLocation = MapService.getPosition();
		
		return getCurrentPositionAddress().then (function () {
			// load the parkings at the current spot.
			$scope.reloadParkings ();
		});
	}
	
	// function for reloading the pins at the current position
	$scope.reloadParkings = function () {

		// hide the feedback box:
		FeedbackService.hideMissingAddressBox ();
		
		$ionicLoading.show({
			template: 'Lädt...'
		});
		
		console.log ('initiating search at:');
		console.log (JSON.stringify(ParkingService.data.currentLocation));
		
		if ($rootScope.analyticsReady ) window.analytics.trackEvent('Search', 'Coordinates', JSON.stringify(ParkingService.data.currentLocation));
		
		// delete the previously loaded parkings:
		$scope.data.parkings = [];
		
		return ParkingService.search ().then (function (parkings) {
			
			// restore the information in the parkinginfowindow if parking is still loaded, hide it if not
			if (ParkingService.data.selectedParking != null) {
				ParkingService.data.selectedParking = ParkingService.getById (ParkingService.data.selectedParking.id);
			}
			
			if (parkings == null) {
				FeedbackService.showMissingAddressBox (ParkingService.data.address);
			}
			else {
				
				console.log ('finished search successfully.');
			}
		}, function (error) {
			FeedbackService.showErrorMessage ('Die Verbindung zum Server war leider nicht erfolgreich. Tut uns Leid.');
		})
		.finally(function() {
			$ionicLoading.hide();
			// Stop the ion-refresher from spinning
			$scope.$broadcast('scroll.refreshComplete');
		});
	} 
	/*$scope.refreshParkings = function () {
		
		// delete the previously loaded parkings:
		$scope.data.parkings = [];
		
		ParkingService.search ().finally(function() {
			
			// Stop the ion-refresher from spinning
			$scope.$broadcast('scroll.refreshComplete');
		});
	}*/
	
	$scope.searchByAddress = function () {
		$ionicLoading.show({
			template: 'Lädt...'
		});
		
		console.log ($scope.data.address);
		if ($rootScope.analyticsReady ) window.analytics.trackEvent('Search', 'Address', $scope.data.address);
		
		Geolocation.getLocationFromAddress ($scope.data.address).then (function (coordinates) {
		
			// Moving the map to the new coordinates:
			MapService.goToPoint(coordinates.latitude, coordinates.longitude); 
			
			// saving the coordinates to the ParkingService service so the search finds the coorresponding data
			ParkingService.data.currentLocation = coordinates;
			
			$scope.reloadParkings (true);
		}, function (error) {
			$ionicLoading.hide();
			FeedbackService.showErrorMessage ('Leider war die Standortbestimmung nicht erfolgreich.');
		});
	}
	
	/** --------------------------------------------------
	 *					LIST STUFF
	*** ------------------------------------------------- */
	
	// filter the results according to the set filter:
	$scope.orderResults = function () {
		var ls = $ionicScrollDelegate.$getByHandle('listscroller');
		ls.scrollTop(true);
		ParkingService.orderResults ();
	}
	
	/** -------------------------------------------- **
	 *					DETAIL VIEW
	*** -------------------------------------------- **/
	
	$scope.parkinfoModal = null;
	$scope.extrainfoModal = null;
	
	function createModal () {
		console.log ('order to create modal');
		// Create the modal that shows the parking info:
		$ionicModal.fromTemplateUrl('templates/parkinfo.html', {
			scope: $scope, 
		}).then(function(modal) {
			$scope.parkinfoModal = modal;
		});
		
		$ionicModal.fromTemplateUrl('templates/extrainfo.html', {
			scope: $scope
		}).then(function (modal) {
			$scope.extrainfoModal = modal;
		});
	}

	// Triggered in the login modal to close it
	$scope.closeParkinfo = function() {
		$scope.parkinfoModal.hide();
		$timeout(function () {
			$scope.viewVars.detailAvailable = false;
		}, 100);
		
		gMapHandle.setClickable (MapService.isMapActiveView);
		
		console.log ('closing parkinfo'); 
		
		//Remove the back button handler:
        backButtonAction ();
	};
	
	// Open the parkinfo modal
	$rootScope.openParkinfo = function(selectedParkingId) {
		
		// save the data in the model
		MapService.markerClickCallback (selectedParkingId);
		
		if ($rootScope.analyticsReady ) window.analytics.trackEvent('Parking', 'View', 'ParkingId', selectedParkingId);

		$timeout(function () {
			$scope.viewVars.detailAvailable = true;
			MapService.moveToPoint (ParkingService.data.selectedParking.lat, ParkingService.data.selectedParking.lng);
		}, 10);

		// get the opening times if they are not already loaded
		if (typeof ParkingService.data.selectedParking.openingtimes == 'undefined') fetchOpeningTimes ();
		// get the prices for the next hours if they are not already loaded
		if (typeof ParkingService.data.selectedParking.pricelist == 'undefined') fetchPrices();
		
		// show the parking information in an overlay
		$scope.parkinfoModal.show();
		
		// disable clicks on the map to enable clicks on the window:
		gMapHandle.setClickable (false);
		
		// add the action to the back button to close the detail view:
		backButtonAction = $ionicPlatform.registerBackButtonAction($scope.closeParkinfo, 300);
		//$ionicPlatform.onHardwareBackButton($scope.closeParkinfo);
	};
	
	// function to open the extrainfoModal:
	$scope.openExtraInfo = function () {
		$scope.extrainfoModal.show ();
		
		// add the action to the back button to close the extra view:
		backButtonAction ();
		backButtonAction = $ionicPlatform.registerBackButtonAction($scope.closeExtraInfo, 300);
		/*$ionicPlatform.offHardwareBackButton($scope.closeParkinfo);
		$ionicPlatform.onHardwareBackButton($scope.closeExtraInfo);*/
	}
	$scope.closeExtraInfo = function () {
		$scope.extrainfoModal.hide();
		
		// add the action to the back button to close the parking view again:
		backButtonAction ();
		backButtonAction = $ionicPlatform.registerBackButtonAction($scope.closeParkinfo, 300);
		/*$ionicPlatform.offHardwareBackbutton($scope.closeExtraInfo);
		$ionicPlatform.onHardwareBackButton($scope.closeParkinfo);*/
	};
	
	// get the opening times of the active carpark.
	function fetchOpeningTimes () {
		ParkingService.getTimesForOne (ParkingService.data.selectedParking.id).then(function(response) {
			
			// save result to model
			ParkingService.data.selectedParking.openingtimes = response;
			
			// hide table if no opening time data:
			if (response == false){ 
				console.log ('no times available');
				ParkingService.data.selectedParking.noTimesFlag = true;
				return;
			}
		});
	}
	
	// get the prices of the active carpark
	function fetchPrices () {
		ParkingService.getPricesForOne (ParkingService.data.selectedParking.id).then(function(response) {
			
			// save result to model
			ParkingService.data.selectedParking.pricelist = response;
			
			// hide table if no opening time data:
			if (response == false){ 
				console.log ('no prices available');
				ParkingService.data.selectedParking.noPricesFlag = true;
				return;
			}
		});
	}
	
	/** ----------------------------------------------------
	 *					TIME CALCULATION
	*** -------------------------------------------------- */
	
	$scope.timeFrames = ParkingService.timeFrames;
	
	// Show the action sheet
	$scope.showTimeOptions = function () {
		gMapHandle.setClickable (false);
		var hideSheet = $ionicActionSheet.show({
			buttons: ParkingService.timeFrames,
			titleText: 'Wähle deinen Parkzeitraum',
			cancelText: 'Abbrechen',
			cancel: function() {
				// add cancel code..
				hideSheet();
				gMapHandle.setClickable (MapService.isMapActiveView);
			},
			buttonClicked: function(index) {
				hideSheet();
				if (index === ParkingService.data.timeFrameIndex) return true;
				ParkingService.data.timeFrameIndex = index;
				gMapHandle.setClickable (MapService.isMapActiveView);
				MapService.removeMarkers();
				ParkingService.changeSelectedPrices ().then (function (parkings) {
					//MapService.updateMarkerImages (parkings);
					MapService.addMarkers (parkings);
				});
				return true;
			}
		});
	}
	
	/** --------------------------------------------------
	 *					PAGE STUFF
	*** ------------------------------------------------ */
	
	// function to set the variables for the list or map view
	// slide 0 => map, slide 1 => list
	function changeSlideTo (slide) {
		
		$scope.data.showList = Boolean (slide);
		// set the map clickable on the map, but not on the list:
		gMapHandle.setClickable (!Boolean(slide));
		MapService.isMapActiveView = !Boolean(slide);
		
		if (slide == 1) {
			// callback / priority.
			console.log ('should register back action');
			listBackAction = $ionicPlatform.registerBackButtonAction(function () {
				$scope.changePanel (0);
				listBackAction ();
			}, 100);
		}
		else if (listBackAction != null) listBackAction();
	}
	
	// update the variable if the slide was changed manually
	$scope.slideHasChanged = function ($index) {
		changeSlideTo ($index);
	}
	
	// change the view if switch was activated
	$scope.changePanel = function (slide) {
		if (slide == null) slide = $scope.data.showList;
		$ionicSlideBoxDelegate.slide (slide);
		//changeSlideTo (slide);
	}
	
	// trying to stop the drag event. isn't working. -.-
	$scope.stopDrag = function (e) {
		e.stopImmediatePropagation();
		e.preventDefault();
		e.stopPropagation();
	}
	
	$scope.viewVars = {
		detailAvailable : false
	};
	
	/**
	 *	Function to open the built in navigator at the required coordinates.
	 * 	Still needs to be tested on phones.
	 *
	**/ 
	
	$rootScope.sendToExternalRouter = function (e, lat, lng) {
		
		/*var dest = new MapService.getObject().LatLng(lat,lng);
		var start = new MapService.getObject().LatLng(Geolocation.getLastPoint().latitude,Geolocation.getLastPoint().longitude);
		
		MapService.getObject().external.launchNavigation({
		  "from": start,
		  "to": dest
		});*/
		
		var geoloc = null;
		if (MapService.myLocation.lat != null) geoloc = MapService.myLocation;
		
		function sendToLoc (gloc) {
			var saddr = '';
			if (gloc != null) saddr = '&saddr=' + gloc.lat + ',' + gloc.lng;
			console.log (lat);
			if (ionic.Platform.isIOS() || ionic.Platform.isIPad()) {
				var url = 'maps:daddr='+lat+','+lng+saddr;
				console.log (url);
				$window.open(url, '_system');
			}
			else if (ionic.Platform.isAndroid()){
				$window.open('google.navigation:q='+lat+','+lng, '_system');
			}
			else {
				$window.open('http://maps.google.com/maps?daddr='+lat+','+lng+saddr, '_system');
				//$window.open('geo:'+parking.lat+','+parking.lng, '_system');
			}
		}

	
		sendToLoc (geoloc);
		
		e.preventDefault();
		e.stopPropagation();
	}
	
	// ---------- Popup ------ //

	$rootScope.sendCityFeedback = function() {
		FeedbackService.sendMissingAddressFeedback ();
	};
	$rootScope.closeCityFeedback = function() {
		FeedbackService.hideMissingAddressBox ();
	};
	
	/**-----------------------------------------
	 *	Doing stuff after the view has loaded:
	***----------------------------------------*/
	
	$scope.$on('$ionicView.loaded', function(){
		
		// preventing dragging events on the slides (map/list)
		$ionicSlideBoxDelegate.enableSlide(false);
		
		// create the parkinfoModal
		createModal ();
		
		if ($rootScope.analyticsReady ) window.analytics.trackView('Map View');
		//MapService.init('map_canvas');
		//MapService.connectToDiv('map_canvas');
	});
	
	var parkingSave = null;
	
	$scope.$on ('$ionicView.afterEnter', function () {
		if (MapService.isReady ()) {
			if ($scope.data.showList == false) {
				MapService.isMapActiveView = true;
				gMapHandle.setClickable (MapService.isMapActiveView);
			}
			if (parkingSave != null) ParkingService.data.selectedParking = parkingSave;
			parkingSave = null;
		}
		$rootScope.onSearch = true;
		
	});
	
	
	$scope.$on ('$ionicView.beforeLeave', function () {
		if (MapService.isReady ()) {
			if (ParkingService.data.selectedParking != null) parkingSave = ParkingService.data.selectedParking;
			ParkingService.data.selectedParking = null;
		}
		$rootScope.onSearch = false;
	});
	
}])  // ---------- END OF SEARCH CONTROLLER ------ //


.controller ('AccordionCtrl', ['$scope', '$stateParams', 'AccordionService', '$ionicScrollDelegate', function($scope, $stateParams, AccordionService, $ionicScrollDelegate) {
	var accContent = '';
	if ($scope.accContent == false) accContent = $stateParams.accContent;
	else accContent = $scope.accContent;
	
	console.log ('creating accordion content for ' + accContent);
	
	var content = AccordionService.getDataByIndex (accContent);
	
	$scope.title = content.title;
	$scope.content = content.accordion;
	
	// --- ACCORDION functionality: ---
	/*
	*  if given group is the selected group, deselect it
	*  else, select the given group
	*/
	$scope.toggleGroup = function(group) {
		if ($scope.isGroupShown(group)) {
			$scope.shownGroup = null;
		} 
		else {
			$scope.shownGroup = group;
		}
		$ionicScrollDelegate.$getByHandle('accordion-scroller').resize();
	};
	$scope.isGroupShown = function(group) {
		return $scope.shownGroup === group;
	};
}])

.controller ('AuthCtrl', ['$scope', '$stateParams', 'UserService', function($scope, $stateParams, UserService) {
	$scope.viewVars = {
		title : '',
		signup : false,
		submitButtonText : '',
		switchPanelText : '',
		switchButtonText : ''
	};
	
	$scope.formData = {};
	$scope.formSubmitted = false;
	
	$scope.setMode = function (mode) {
		$scope.formSubmitted = false;
		if (mode === 'login') {
			console.log ('setting auth to login');
			$scope.viewVars.title = 'Anmeldung';
			$scope.viewVars.signup = false;
			$scope.viewVars.submitButtonText = 'Login';
			$scope.viewVars.switchPanelText = 'Noch keinen Account?';
			$scope.viewVars.switchButtonText = 'Registrieren';
			$scope.viewVars.otherMode = 'signup';
		}
		else { // if (mode === 'signup') 
			console.log ('setting auth to signup');
			$scope.viewVars.title = 'Registriere dich jetzt!';
			$scope.viewVars.signup = true;
			$scope.viewVars.submitButtonText = 'Registrieren';
			$scope.viewVars.switchPanelText = 'Bereits registriert?';
			$scope.viewVars.switchButtonText = 'Login';
			$scope.viewVars.otherMode = 'login';
		}
	}
	
	$scope.loginWithGoogle = function () {
		UserService.loginWithGoogle ();
	}
	$scope.loginWithFacebook = function () {
		UserService.loginWithFacebook ();
	}
	
	
/**
 * This function is called by clicking the submit button 
 * on either the signup or the login view.
 * It checks if the data from the AuthForm is valid and then 
 * passes it to the UserService, which then uses it to sign
 * the user up or log him in.
 *
 * param	form: [formHandle]    The form object, has the same name as the form to submit
 * 
**/
	$scope.submitForm = function (form) {
		
		// set the form status to submitted to allow error messages to be shown
		$scope.formSubmitted = true;
		
		// always check if email and password are valid:
		if (form.email.$invalid == true) return;
		if (form.password.$invalid == true) return;
		
		if ($scope.viewVars.signup === true) {
		
			// signup also requires valid name data:
			if (form.firstname.$invalid == true) return;
			if (form.lastname.$invalid == true) return;
			
			// try to signup a new user with the inserted data:
			UserService.signup($scope.formData.firstname, $scope.formData.lastname, $scope.formData.email, $scope.formData.password).then(function(response){
				// redirect the user if the signup process was successful:
				//if (UserService.isLoggedIn()) 
			});
		}
		else {
			UserService.login($scope.formData.email, $scope.formData.password).then(function(response) {
				// redirect the user if the login process was successful:
				//if (UserService.isLoggedIn()) 
			});
		}
	}
	
/**
 * To show the right set of data on the page, load the right mode data into the view:
**/	
	$scope.setMode ($stateParams.mode);
}]);
