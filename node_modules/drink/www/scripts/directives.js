'use strict';

angular.module('parkedex.directives', ['parkedex.services'])

.directive('watchMenu', ['$timeout', '$ionicSideMenuDelegate', 'MapService','$ionicPlatform',function($timeout, $ionicSideMenuDelegate, MapService, $ionicPlatform) {
  return {
    restrict: 'A',
    link: function($scope, $element, $attr) {
		
		var mapClickable = true;
		// Run in the next scope digest
		$timeout(function() {
			// Watch for changes to the openRatio which is a value between 0 and 1 that says how "open" the side menu is
		   
			$scope.$watch(function() {
			  return $ionicSideMenuDelegate.getOpenRatio();
			}, 
			function(ratio) {
				var openWidth = (ratio * 275) - 275;
				$scope.viewData.sideMenuTransform = 'translate3d('+openWidth+'px,0,0)';
				console.log (JSON.stringify($scope.viewData.sideMenuTransform));
				if( ratio == 0){
					$scope.viewData.menuVisible = false;
					if (!mapClickable) {
						MapService.getMap().setClickable (MapService.isMapActiveView);
						mapClickable = true;
					}
				}else{
					if (mapClickable) {
						MapService.getMap().setClickable (false);
						mapClickable = false;
					}
					$scope.viewData.menuVisible = true;
				}
			});
		});
    }
  };
}])

.directive('ionGooglePlace',
[
    '$ionicTemplateLoader',
    '$ionicBackdrop',
    '$q',
    '$timeout',
    '$rootScope',
    '$document',
    '$cordovaKeyboard',
	'MapService',
    function($ionicTemplateLoader, $ionicBackdrop, $q, $timeout, $rootScope, $document, $cordovaKeyboard, MapService) 
	{
        return {
            require: '?ngModel',
            restrict: 'E',
            template: '<span class="ion-google-place" ng-click="onSearchBarClick($event)"><i class="icon ion-android-search"></i><span>Suche</span></span>',
            replace: true,
			scope: {
				callback : '&ionplacecallback',
			},
            link: function(scope, element, attrs, ngModel, ngSubmit) {
                scope.locations = [];
					
                var searchEventTimeout = undefined;

                var POPUP_TPL = [
                    '<div class="ion-google-place-container">',
                        '<div class="bar bar-header bar-balanced item-input-inset">',
							'<form ng-submit="selectLocation(searchQuery)">',
								'<label class="item-input-wrapper" id="search-container-label">',
									'<i class="icon ion-android-search placeholder-icon"></i>',
									'<input class="google-place-search" type="search" ng-model="searchQuery" placeholder="Wo willst du parken?">',
								'</label>',
								'<input type="submit" class="hiddensubmit"></input>', 
								'<button class="button button-clear icon ion-android-close google-place-clear-button" ng-click="clearQuery()"></button>',
							'</form>',
								
                            '<button class="button pull-right button_cancel" ng-click="onCancel()">',
								'Abbrechen',
                            '</button>',
								
						'</div>',
                        '<ion-content class="has-header has-header">',
                            '<ion-list>',
                                '<ion-item ng-repeat="location in locations" type="item-text-wrap" ng-click="selectLocation(location.description)">',
                                    '{{location.description}}',
                                '</ion-item>',
                            '</ion-list>',
                        '</ion-content>',
                    '</div>'
                ].join('');

				var popupPromise = $ionicTemplateLoader.compile({
					template: POPUP_TPL,
					scope: scope,
					appendTo: $document[0].body
                });

				popupPromise.then(function(el){
					var searchInputElement = angular.element(el.element.find('input'));
						
					var autocomplete = new google.maps.places.AutocompleteService();

					scope.selectLocation = function(location){
						if (location == null || location.length === 0) return;
						ngModel.$setViewValue(location);
						ngModel.$render();
						el.element.css('display', 'none');
						$ionicBackdrop.release();
						MapService.getMap().setClickable (true);
						scope.callback();
						searchInputElement[0].blur();
						setTimeout(function(){
						searchInputElement[0].blur();
					},0);
				};

                scope.clearQuery = function () {
					scope.searchQuery = '';
					searchInputElement[0].focus();
					setTimeout(function(){
						searchInputElement[0].focus();
					},0);
				}

				scope.$watch('searchQuery', function(query){
					if (searchEventTimeout) $timeout.cancel(searchEventTimeout);
					searchEventTimeout = $timeout(function() {
						if(!query) return;
						//if(query.length < 3) return;
								
						autocomplete.getPlacePredictions({input: query/*, types: ['address']*/}, function(results, status){
							if (status == google.maps.places.PlacesServiceStatus.OK) {
								scope.$apply(function(){
									scope.locations = results;
								});
							} else {
								console.log ({input: query, types: '(cities)'});
								console.log (status);
								// @TODO: Figure out what to do when the geocoding fails
							}
						});
						
					}, 350); // we're throttling the input by 350ms to be nice to google's API
				});

				var onClick = function(e){
					e.preventDefault();
					e.stopPropagation();
					$ionicBackdrop.retain();
					MapService.getMap().setClickable (false);
					el.element.css('display', 'block');
					searchInputElement[0].focus();
					setTimeout(function(){
						searchInputElement[0].focus();
					},0);
				};
				
				var onCancel = function(e){
					scope.searchQuery = '';
					$ionicBackdrop.release();
					MapService.getMap().setClickable (true);
					el.element.css('display', 'none');
				};
					
				scope.onSearchBarClick = onClick;
				scope.onCancel = onCancel;

                        //element.bind('click', onClick);
                        //element.bind('touchend', onClick);
						
						//console.log (el.element.find ('span').find('button'));
                        //el.element.find('button').bind('click', onCancel);
						
						//console.log (el.element.find ('label').find('button'));
				});

                if(attrs.placeholder){
					element.attr('placeholder', attrs.placeholder);
                }

				var content = angular.element(element.find ('span'));

				ngModel.$formatters.unshift(function (modelValue) {
					if (!modelValue) return '';
					return modelValue;
				});

                ngModel.$parsers.unshift(function (viewValue) {
					return viewValue;
				});

                ngModel.$render = function(){
					if(!ngModel.$viewValue){
						content.html('Suchen!');
					} else {
						content.html(ngModel.$viewValue || '');
					}
				};
			}
        };
	}
]);