// Ionic Starter App

// angular.module is a global place for creating, registering and retrieving Angular modules
// 'parkedex' is the name of this angular module example (also set in a <body> attribute in index.html)
// the 2nd parameter is an array of 'requires'
// 'parkedex.controllers' is found in controllers.js

var app = angular.module('parkedex', [
	'ionic',
	'parkedex.services', 
	'parkedex.controllers',
	'parkedex.directives',
	'ui.router',
	'ngCordova',
	'once'
]);

app.run(function($ionicPlatform, $state, ParkingService, $cordovaSplashscreen, MapService, QueryService, $rootScope, AccordionService) {
	$ionicPlatform.ready(function() {
		// Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
		// for form inputs)
		if (window.cordova && window.cordova.plugins.Keyboard) {
			cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
		}
		if (window.StatusBar) {
			// org.apache.cordova.statusbar required
			StatusBar.styleDefault();
		}
		
		$rootScope.parking = null;
		
		window.analytics.startTrackerWithId('UA-27448357-2');
		$rootScope.analyticsReady = true;
		
		MapService.init ('map_canvas').then (function () {
			
			AccordionService.getGoogleData ();
			
			// make an initial geolocation to get the position of the user and search the nearest parkings:
			ParkingService.searchHere().then(function(parkings) {
				MapService.goToPoint (ParkingService.data.lastLocation.latitude, ParkingService.data.lastLocation.longitude);
			}, function (error) {
				
				// go to the standard starting point defined in the MapService:
				MapService.goToPoint (MapService.myLocation.lat, MapService.myLocation.lng);

				// perform a search at that location;

				ParkingService.data.currentLocation.latitude = MapService.myLocation.lat;
				ParkingService.data.currentLocation.longitude = MapService.myLocation.lng;

				ParkingService.search ();
			}).finally(function(){
				$cordovaSplashscreen.hide();
			});
		});
	});
});

app.config(function($stateProvider, $urlRouterProvider) {
	$stateProvider

	.state('app', {
		url: '/app',
		abstract: true,
		templateUrl: 'templates/menu.html',
		controller: 'AppCtrl'
	})
	
	.state('app.search', {
		url: '/search',
		views: {
			'menuContent': {
				templateUrl: 'templates/search.html',
				controller: 'SearchCtrl'
			}
		}
	})
	
	.state('app.acc', {
		url: '/acc/:accContent',
		views: {
			'menuContent': {
				templateUrl: 'templates/accordion.html',
				controller: 'AccordionCtrl'
			}
		}
	});
	
	// Page for login and Signup
	/*.state ('auth', {
		url: '/auth/:mode',
		templateUrl: 'templates/auth.html',
		controller: 'AuthCtrl'
	});*/
	
	// if none of the above states are matched, use this as the fallback
	$urlRouterProvider.otherwise('/app/search');
	
});
