'use strict';

var services = angular.module('parkedex.services');

services.factory('SecurityService', ['$window',  function ($window) {
	
	var codekey = '7988A4529FE481D6C8C6EE87DF992';
	
	function bin2hex (s) {
		var i, f = 0, a = [];
		
		s += '';
		f = s.length;

		for (i = 0; i < f; i++) {
			a[i] = s.charCodeAt(i).toString(16).replace(/^([\da-f])$/, '0$1');
		}

		return a.join('');
	}
	
	function hex2bin (hex) {
		var str = '';
		for (var i = 0; i < hex.length; i += 2) {
			str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
		}
		return str;
	}
	
	return {
		decrypt : function (input, key){
			
			// set the key to codekey if not set
			key = typeof key !== 'undefined' ? key : codekey;
			
			// Split the input into its compontents
			var inputSplit = input.split(' ');
			var originalSize = parseInt(inputSplit[0]);

			var iv = $window.cryptoHelpers.toNumbers (inputSplit[1]);
			var cipherIn = $window.cryptoHelpers.toNumbers (inputSplit[2]);
			
			// Set up encryption parameters
			var keyAsNumbers = $window.cryptoHelpers.toNumbers( bin2hex( key ) );

			var decrypted = $window.slowAES.decrypt(
				cipherIn,
				$window.slowAES.modeOfOperation.CBC,
				keyAsNumbers,
				iv
			);
			
			var hexed = $window.cryptoHelpers.toHex(decrypted);
			
			// Byte-array to text
			var retVal = hex2bin(hexed);
			retVal = $window.cryptoHelpers.decode_utf8(retVal);
			
			retVal = JSON.parse (retVal);
			
			return retVal;
		},

		encrypt : function ( obj, key ){
			
			// convert obj to JSON String
			var plaintext = JSON.stringify (obj);
			
			// set the key to codekey if not set
			key = typeof key !== 'undefined' ? key : codekey;

			// Set up encryption parameters
			plaintext = $window.cryptoHelpers.encode_utf8(plaintext);
			var inputData = $window.cryptoHelpers.convertStringToByteArray(plaintext);
			var keyAsNumbers = $window.cryptoHelpers.toNumbers(bin2hex(key));
			var iv = $window.cryptoHelpers.generateSharedKey(16);
			
			var encrypted = $window.slowAES.encrypt(
				inputData,
				$window.slowAES.modeOfOperation.CBC,
				keyAsNumbers,
				iv
			);

			// Set up output format (space delimeted 'plaintextsize iv cipher')
			var retVal = plaintext.length + ' ' + $window.cryptoHelpers.toHex(iv) + ' ' + $window.cryptoHelpers.toHex(encrypted);
			
			return retVal;
		}

	};
}]);