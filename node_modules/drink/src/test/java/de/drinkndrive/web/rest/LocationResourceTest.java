package de.drinkndrive.web.rest;

import de.drinkndrive.Application;
import de.drinkndrive.domain.Location;
import de.drinkndrive.repository.LocationRepository;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.IntegrationTest;
import org.springframework.boot.test.SpringApplicationConfiguration;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import java.math.BigDecimal;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Test class for the LocationResource REST controller.
 *
 * @see LocationResource
 */
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = Application.class)
@WebAppConfiguration
@IntegrationTest
public class LocationResourceTest {

    private static final DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");


    private static final BigDecimal DEFAULT_LAT = BigDecimal.ZERO;
    private static final BigDecimal UPDATED_LAT = BigDecimal.ONE;

    private static final BigDecimal DEFAULT_LNG = BigDecimal.ZERO;
    private static final BigDecimal UPDATED_LNG = BigDecimal.ONE;

    private static final BigDecimal DEFAULT_ALT = BigDecimal.ZERO;
    private static final BigDecimal UPDATED_ALT = BigDecimal.ONE;

    private static final DateTime DEFAULT_TIMESTAMP = new DateTime(0L, DateTimeZone.UTC);
    private static final DateTime UPDATED_TIMESTAMP = new DateTime(DateTimeZone.UTC).withMillisOfSecond(0);
    private static final String DEFAULT_TIMESTAMP_STR = dateTimeFormatter.print(DEFAULT_TIMESTAMP);

    private static final BigDecimal DEFAULT_SPEED = BigDecimal.ZERO;
    private static final BigDecimal UPDATED_SPEED = BigDecimal.ONE;

    private static final BigDecimal DEFAULT_HEADING = BigDecimal.ZERO;
    private static final BigDecimal UPDATED_HEADING = BigDecimal.ONE;

    @Inject
    private LocationRepository locationRepository;

    private MockMvc restLocationMockMvc;

    private Location location;

    @PostConstruct
    public void setup() {
        MockitoAnnotations.initMocks(this);
        LocationResource locationResource = new LocationResource();
        ReflectionTestUtils.setField(locationResource, "locationRepository", locationRepository);
        this.restLocationMockMvc = MockMvcBuilders.standaloneSetup(locationResource).build();
    }

    @Before
    public void initTest() {
        location = new Location();
        location.setLat(DEFAULT_LAT);
        location.setLng(DEFAULT_LNG);
        location.setAlt(DEFAULT_ALT);
        location.setTimestamp(DEFAULT_TIMESTAMP);
        location.setSpeed(DEFAULT_SPEED);
        location.setHeading(DEFAULT_HEADING);
    }

    @Test
    @Transactional
    public void createLocation() throws Exception {
        // Validate the database is empty
        assertThat(locationRepository.findAll()).hasSize(0);

        // Create the Location
        restLocationMockMvc.perform(post("/api/locations")
                .contentType(TestUtil.APPLICATION_JSON_UTF8)
                .content(TestUtil.convertObjectToJsonBytes(location)))
                .andExpect(status().isCreated());

        // Validate the Location in the database
        List<Location> locations = locationRepository.findAll();
        assertThat(locations).hasSize(1);
        Location testLocation = locations.iterator().next();
        assertThat(testLocation.getLat()).isEqualTo(DEFAULT_LAT);
        assertThat(testLocation.getLng()).isEqualTo(DEFAULT_LNG);
        assertThat(testLocation.getAlt()).isEqualTo(DEFAULT_ALT);
        assertThat(testLocation.getTimestamp().toDateTime(DateTimeZone.UTC)).isEqualTo(DEFAULT_TIMESTAMP);
        assertThat(testLocation.getSpeed()).isEqualTo(DEFAULT_SPEED);
        assertThat(testLocation.getHeading()).isEqualTo(DEFAULT_HEADING);
    }

    @Test
    @Transactional
    public void getAllLocations() throws Exception {
        // Initialize the database
        locationRepository.saveAndFlush(location);

        // Get all the locations
        restLocationMockMvc.perform(get("/api/locations"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.[0].id").value(location.getId().intValue()))
                .andExpect(jsonPath("$.[0].lat").value(DEFAULT_LAT.intValue()))
                .andExpect(jsonPath("$.[0].lng").value(DEFAULT_LNG.intValue()))
                .andExpect(jsonPath("$.[0].alt").value(DEFAULT_ALT.intValue()))
                .andExpect(jsonPath("$.[0].timestamp").value(DEFAULT_TIMESTAMP_STR))
                .andExpect(jsonPath("$.[0].speed").value(DEFAULT_SPEED.intValue()))
                .andExpect(jsonPath("$.[0].heading").value(DEFAULT_HEADING.intValue()));
    }

    @Test
    @Transactional
    public void getLocation() throws Exception {
        // Initialize the database
        locationRepository.saveAndFlush(location);

        // Get the location
        restLocationMockMvc.perform(get("/api/locations/{id}", location.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON))
            .andExpect(jsonPath("$.id").value(location.getId().intValue()))
            .andExpect(jsonPath("$.lat").value(DEFAULT_LAT.intValue()))
            .andExpect(jsonPath("$.lng").value(DEFAULT_LNG.intValue()))
            .andExpect(jsonPath("$.alt").value(DEFAULT_ALT.intValue()))
            .andExpect(jsonPath("$.timestamp").value(DEFAULT_TIMESTAMP_STR))
            .andExpect(jsonPath("$.speed").value(DEFAULT_SPEED.intValue()))
            .andExpect(jsonPath("$.heading").value(DEFAULT_HEADING.intValue()));
    }

    @Test
    @Transactional
    public void getNonExistingLocation() throws Exception {
        // Get the location
        restLocationMockMvc.perform(get("/api/locations/{id}", 1L))
                .andExpect(status().isNotFound());
    }

    @Test
    @Transactional
    public void updateLocation() throws Exception {
        // Initialize the database
        locationRepository.saveAndFlush(location);

        // Update the location
        location.setLat(UPDATED_LAT);
        location.setLng(UPDATED_LNG);
        location.setAlt(UPDATED_ALT);
        location.setTimestamp(UPDATED_TIMESTAMP);
        location.setSpeed(UPDATED_SPEED);
        location.setHeading(UPDATED_HEADING);
        restLocationMockMvc.perform(put("/api/locations")
                .contentType(TestUtil.APPLICATION_JSON_UTF8)
                .content(TestUtil.convertObjectToJsonBytes(location)))
                .andExpect(status().isOk());

        // Validate the Location in the database
        List<Location> locations = locationRepository.findAll();
        assertThat(locations).hasSize(1);
        Location testLocation = locations.iterator().next();
        assertThat(testLocation.getLat()).isEqualTo(UPDATED_LAT);
        assertThat(testLocation.getLng()).isEqualTo(UPDATED_LNG);
        assertThat(testLocation.getAlt()).isEqualTo(UPDATED_ALT);
        assertThat(testLocation.getTimestamp().toDateTime(DateTimeZone.UTC)).isEqualTo(UPDATED_TIMESTAMP);
        assertThat(testLocation.getSpeed()).isEqualTo(UPDATED_SPEED);
        assertThat(testLocation.getHeading()).isEqualTo(UPDATED_HEADING);
    }

    @Test
    @Transactional
    public void deleteLocation() throws Exception {
        // Initialize the database
        locationRepository.saveAndFlush(location);

        // Get the location
        restLocationMockMvc.perform(delete("/api/locations/{id}", location.getId())
                .accept(TestUtil.APPLICATION_JSON_UTF8))
                .andExpect(status().isOk());

        // Validate the database is empty
        List<Location> locations = locationRepository.findAll();
        assertThat(locations).hasSize(0);
    }
}
