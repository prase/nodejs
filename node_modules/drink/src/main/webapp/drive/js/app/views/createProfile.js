define( [
    'jquery',
    '../../../../bower_components/underscore/underscore',
    'backbone',
		'i18next',
		'platform',
		'models/createLearner',
		'hbs!templates/createProfile',
		'moment',
		'validator',
		'views/header',
		'views/createProfileModal'
], function( $, _, Backbone, i18next, Platform, CreateLearnerModel, createProfileTemplate, moment, Validator, HeaderView, CreateProfileModal ) {

	var CreateProfileView = Backbone.View.extend( {

    customGoal: false,
		diffDuration: 0,
		hasPhoto: false,

		hasPhoto: false,
		customGoal: false,

		events: {
			'click .createProfile': 'createProfile',
			'submit #createProfile': 'createProfile',
			'click .pickDate': 'pickDate',
			//'change .goal': 'selectGoal',
			'click input.goal': 'selectGoal',
			'click .dismiss': 'dismiss',
			'focus #createDateOfBirthString': 'hideLabel',
			'blur #createDateOfBirthString' : 'pickDateBlur',
			'blur .goal': 'selectGoalBlur',
			'click label' : 'labelClick',
      'change #createDateOfBirthString' : 'doMagic'
		},

    doMagic : function( event ){
      $( event.target ).val( $( event.target ).val() );
      console.log( "please work" );
    },

		initialize: function() {

			if( Platform.platform == 'iOS' ) {
				$( '.pseudoFormPlaceholder' ).each( function() {
					this.show();
				} );
			}

			Backbone.Notifications.off( 'CallCamera' );
			Backbone.Notifications.on( 'CallCamera' , function ( msg ) {

				this.photo( msg );

			}, this );
			$( '#modal-content' ).unbind();
			var createProfileModal = new CreateProfileModal();
			createProfileModal.render();
		},

		dismiss: function() {
			$( '.notice' ).fadeOut();
		},

		hideLabel: function( event ) {
			$( event.target ).parent().find( '.pseudoFormPlaceholder' ).css( 'color', 'rgba(0,0,0,0)' );
		},

		labelClick: function( event ) {
			var labelID = $( event.target ).attr( 'for' );
			$( '#' + labelID ).trigger( 'click' );
		},

		pickDate: function() {
			var date = null;

			var twentyYearsAgo = new Date();
			twentyYearsAgo.setHours( 0, 0, 0, 0 );
			twentyYearsAgo = new Date( twentyYearsAgo.setFullYear( twentyYearsAgo.getFullYear() - 20 ) );

			var options = {
				date: twentyYearsAgo,
				mode: 'date'
			};

			if ( window.plugins && typeof window.plugins.datePicker != 'undefined' ) {
				window.plugins.datePicker.show( options, function( date ) {

					//if pressed cancel
					if( date == '' || date == 'Invalid Date' ) {
						date = twentyYearsAgo;
					}

					$( '#dateOfBirth' ).val( moment( date ).format( 'YYYY-MM-DD' ) );
					$( '#createDateOfBirthString' ).val( moment( date ).format( 'LL' ) );
					//console.log($( '#dateOfBirth' ).val());
					//console.log($( '#createDateOfBirthString' ).val());
				} );
			} else {
				alert('no plugin');
				var date = new Date();
				$( '#dateOfBirth' ).val( moment( date ).format( 'YYYY-MM-DD' ) );
				$( '#createDateOfBirthString' ).val( moment( date ).format( 'LL' ) );
			}
		},

		pickDateBlur: function(){
			if( Platform.platform == 'Android' ) {
					return;
			}
				$( '#dateOfBirth' ).val( moment( $('#createDateOfBirthString').val() ).format( 'YYYY-MM-DD' ) );
		},

		pickGoalDate: function() {
			var now = new Date();

			now.setHours( 0, 0, 0, 0 );
			var momentNow = moment( now ); // TODO need to get the signup date in case they come back later

			var monthsPlus9 = new Date();
			monthsPlus9.setHours( 0, 0, 0, 0 );
			monthsPlus9 = new Date( monthsPlus9.setMonth( monthsPlus9.getMonth() + 9 ) );

			var min = new Date();
			min.setHours( 0, 0, 0, 0 );
			min = new Date( min.setMonth( min.getMonth() + 1 ) );

			var max = new Date();
			max.setHours( 0, 0, 0, 0 );
			max = new Date( max.setFullYear( max.getFullYear() + 5 ) );

			var options = {
				date: monthsPlus9,
				mode: 'date',
				minDate: min.getTime(),
				maxDate: max.getTime()
			};

			if ( window.plugins && typeof window.plugins.datePicker != 'undefined' ) {

				window.plugins.datePicker.show( options, function( date ) {

					//if pressed cancel
					if( date == '' || date == 'Invalid Date' ){
						date = monthsPlus9;
					}

					var moment9 = moment( date );
					var diff = moment9.diff( now );
					var diffDuration = moment.duration( diff );
					var isoDiffDuration = diffDuration.isoduration();

					//$( '#console' ).html( isoDiffDuration );

					$( '#chooseGoal' ).val( isoDiffDuration );

					$( '#passDate' ).html( moment( date ).format( 'LL' ) );
				} );
			} else {

				var moment9 = moment( monthsPlus9 );
				var diff = moment9.diff( now );
				var diffDuration = moment.duration( diff );
				var isoDiffDuration = diffDuration.isoduration();

				$( '#console' ).html( isoDiffDuration );

				$( '#chooseGoal' ).val( isoDiffDuration );
				$( '#passDate' ).html( moment( monthsPlus9 ).format( 'LL' ) );
			}
		},

		selectGoal: function ( selection ) {
			var choice = $( selection.target ).val();
			var now = moment( new Date() );

			if( Platform.platform == 'iOS' && this.customGoal ) {
				var diff = moment( choice ).diff( now );
				this.diffDuration = moment.duration( diff );
				var isoDiffDuration = this.diffDuration.isoduration();
				$( '#console' ).html( isoDiffDuration );

				//alert( 'diffDuration: ' + this.diffDuration + ' isoDiffDuration: ' + isoDiffDuration );

				$( '#chooseGoal' ).val( isoDiffDuration.split( '-' ).join( '' ) );
			} else {
				if ( choice == "0" ) {
					// show the date chooser
					if ( Platform.platform == 'Android' ) {
							this.pickGoalDate();
					}
				} else {
					// set the duration
					$( '#chooseGoal' ).val( 'P' + choice + 'M' );
				}
			}
		},

		selectGoalBlur: function ( selection ) {
			var choice = $( selection.target ).val();
			if ( choice == "0" ) {
				// show the date chooser
				if( Platform.platform == 'iOS' ) {
					if( !this.customGoal ) {
						$( '<input/>' ).attr( 'type', 'date' ).attr( 'id', 'goal' ).addClass( 'goal' ).attr( 'value', '0000-00-00' ).insertAfter( '.goal' );
						$( 'select.goal' ).remove();

						this.delegateEvents();

						var monthsPlus9 = new Date();
						monthsPlus9.setHours( 0, 0, 0, 0 );
						monthsPlus9 = new Date( monthsPlus9.setMonth( monthsPlus9.getMonth() + 9 ) );
						$( '.goal' ).val( moment( monthsPlus9 ).format( 'YYYY-MM-DD' ) );

						this.customGoal = true;
					}
				} else {
					//this.pickGoalDate();
					this.customGoal = true;
				}
			} else {
				if ( Platform.platform == 'Android' ) {
					// set the duration
					$( '#chooseGoal' ).val( 'P' + choice + 'M' );
				}
			}
		},

		render: function( router ) {

			if( typeof analytics !== 'undefined' ){
				analytics.trackView('Add Details Screen');
			}

			var learnerJSON = window.localStorage.getItem( 'learner' );
			var learner = JSON.parse( learnerJSON );

			this.model = new CreateLearnerModel( learner );

			var dob = this.model.get( 'dateOfBirth' );
			//if date is not yet set then set to twenty years ago
			if( _.isUndefined( dob ) || dob == '' || _.isNull( dob )){
				var twentyYearsAgo = new Date();
				twentyYearsAgo.setHours( 0, 0, 0, 0 );
				twentyYearsAgo = new Date( twentyYearsAgo.setFullYear( twentyYearsAgo.getFullYear() - 20 ) );
				dob = twentyYearsAgo;
			}

			var fName = '';
			if( this.model.get( 'familyName' ) != '' ){
				fName = this.model.get( 'givenName' ) + ' ' + this.model.get( 'familyName' );
			}

			this.model.set( {
				dateOfBirthString: moment( dob ).format( 'LL' ),
				dateOfBirth: moment( dob ).format( 'YYYY-MM-DD' ),
				fullName: fName
			}  );

			//this.model.set( { dateOfBirthString: moment(new Date(this.model.get( 'dateOfBirth' ))).format('LL' ) }  );

			this.model.set ( 'chooseGoal', 'P9M' );

			var compiledTemplate = createProfileTemplate( this.model.toJSON() );
			this.$el.html( compiledTemplate );

			var header = new HeaderView();
			header.toSignIn = true;
			header.render( {
				back: true
			} );

			this.$el.find( '#header' ).append( header.el );

			router.postRender( this );

			$( 'body' ).removeClass();

			if ( Platform.platform == 'iOS' ) {
				$( 'body' ).addClass( 'full-page' );

				// add missing event
				this.events['change .goal'] = 'selectGoal';
				//'change .goal': 'selectGoal',
       	this.delegateEvents();
			}

		},

		validationError: function ( error ) {

			var message = i18next.t( error );
			var title = i18next.t( 'createProfile.validation.problem' );

			if ( navigator && navigator.notification ) {
				navigator.notification.confirm(
					message,
					function ( buttonIndex ) {

					},
					title,
					[ i18next.t( "createProfile.buttons.ok" ) ]
				);
			} else {
				alert( title + ' ' + message );
			}
		},

		createProfile: function ( event ) {
			event.preventDefault();

			$( '#loading' ).show();

			var self = this;
			var formData =  $( '#createProfile' ).serializeObject();

			var Assert = Validator.Assert,
    	validator = new Validator.Validator();

			var allValid = true;
			var fullNameValid = validator.validate( formData.fullName || '', new Validator.Assert().NotBlank() );
			var dateOfBirthValid = validator.validate( formData.dateOfBirth || '', new Validator.Assert().NotBlank() );
			var chooseGoalValid = validator.validate( $( '.goal' ).val() || '', new Validator.Assert().NotBlank() );

			if( fullNameValid != true ) {
				allValid = false;
				this.validationError( 'createProfile.validation.fullName' );
				$( '#loading' ).hide();
			}

			if( dateOfBirthValid != true ) {
				allValid = false;
				this.validationError( 'createProfile.validation.dateOfBirth' );
				$( '#loading' ).hide();
			}

			if( chooseGoalValid != true ) {
				allValid = false;
				this.validationError( 'createProfile.validation.goal' );
				$( '#loading' ).hide();
			}

			if ( formData.dateOfBirth && !moment( formData.dateOfBirth ).isBefore( new Date() ) ) {
				allValid = false;
				this.validationError( 'createProfile.validation.futureDateOfBirth' );
				$( '#loading' ).hide();
			}

			if ( formData.chooseGoal && ( ( this.diffDuration - 0 ) < 0 || ( this.diffDuration - 0 ) > 94670778000 ) ) {
				allValid = false;
				this.validationError( 'createProfile.validation.goalDate' );
				$( '#loading' ).hide();
			}

			if( allValid ) {

				//split in the first space
				formData.fullName = formData.fullName.trim();
				var givenName = formData.fullName.substr( 0, formData.fullName.indexOf( ' ' ) );
				var familyName = formData.fullName.substr( formData.fullName.indexOf( ' ' ) + 1 );

				if( givenName.length == 0 || familyName.length == 0 ) {
					this.validationError( 'createProfile.validation.both' );
					$( '#loading' ).hide();
				} else {
					this.model.set(
						{
							givenName: givenName ,
							familyName: familyName ,
							dateOfBirth: formData.dateOfBirth ,
							chooseGoal: formData.chooseGoal,
							description: null
						} );


					this.model.save( null, {

						success: function( model, response ) {
							if( navigator.mixpanel ) {

								var learnerJson = model.toJSON();

								var signedUp = learnerJson.signedUp;
								var isoDiffDuration = moment.duration.fromIsoduration( learnerJson.chooseGoal );
								var goal = moment( signedUp ).add( isoDiffDuration ).format( 'YYYY-MM-DDTHH:mm:ss' );

								navigator.mixpanel.track(
									'Onboarding completed',
									{},
									function () {},
									function ( message ) {
										console.log( message );
									}
								);

								navigator.mixpanel.peopleSet(
									{
										'$first_name': learnerJson.givenName,
										'$last_name': learnerJson.familyName,
										'Date of birth': learnerJson.dateOfBirth,
										'Goal': ( self.customGoal ) ? 'Custom ' : ( ( $( '.goal:checked' ).val() || 9 ) + ' months' ),
										'Goal date': goal,
										'Onboarding completed':	true,
										'Has photo': self.hasPhoto,
										'Tutorial completed': false
									},
									function() {},
									function( message ) {
										console.log( 'mixpanel error' + message );
									}
								);
							}

							var learnerJSON = window.localStorage.getItem( 'learner' );
							var learner = JSON.parse( learnerJSON );
							var accessToken = learner.accessToken;

							//ensure we resave the accessToken back as it doesn't get returned from this endpoint
							model.set( 'accessToken', accessToken );

							window.localStorage.setItem( 'learner', JSON.stringify( model.toJSON() ) );

							if( window.Adjust ){
									window.Adjust.trackEvent('fb_mobile_complete_registration');

								}


							window.app.router.navigate( '/tutorial/1', true );

						},

						error: function( model, response ) {
							console.log( 'Create Profile error',JSON.stringify( response ) );

							self.validationError( 'createProfile.validation.error' );
							$( '#loading' ).hide();
						}
					} );
				}
			} else{
				$( '#loading' ).hide();
			}
			return false;
		},

		photo: function( typePhoto ) {

			//event.preventDefault();

			var self = this;
			//var $img = this.$el.find( 'img#cameraImage' );
			if ( navigator && navigator.camera ) {
				var source = navigator.camera.PictureSourceType.SAVEDPHOTOALBUM;
				if( typePhoto == 'new' ){
					source = navigator.camera.PictureSourceType.CAMERA;
					//console.log(source);
				}

        /*
         | BASED ON: http://stackoverflow.com/a/11928792/633056
         */

				// hide the bottom menu so they can not be clicked
				$( '#menuModal' ).modal( 'hide' );

        navigator.camera.getPicture(
					function( data ) {
						var access = window.localStorage.getItem( 'accessToken' );
						self.hasPhoto = true;

						$.ajax( {
							url: window.app.config.apiURL + '/learners/' + self.model.id,
							data: "{\"image\": \"" + data.replace( /(\r\n|\n|\r)/gm, "" ) + "\"}",
							contentType:"application/json",
							beforeSend: function( request ) {
								$( '.createProfileAvatarSpinner' ).show();
								$( '#menuModal' ).modal( 'hide' );
								console.log( access );
								request.setRequestHeader( "x-email-auth-token", access );
							},
							type: 'PUT',
								success: function( result ) {
									$( '.createProfileAvatarSpinner' ).hide();
									// hide the modal
									$( '#menuModal' ).modal( 'hide' );
									_.each( result.picture, function( value ){
										if( value.size == 340 ) {
											$( '.createProfileAvatar img' ).attr( 'src', value.url );
											$( '.createProfileAvatar' ).show();
										}
									} );
									//show the image success flash
									$( '.notice' ).fadeIn();
									console.log( "ok" + JSON.stringify( result ) );
									self.hasPhoto = true;
								},
								error: function ( result ) {
									console.log( "not ok" + JSON.stringify( result ) );
								}
							} );
						},
						function(e) {
							console.log("Error getting picture: " + e);
							//$('camera-status').innerHTML = e;

							//dom.byId('camera-image').style.display = "none";
						},
						// must be DATA_URL to return the data for future use
						{
							quality: 50,
							destinationType: navigator.camera.DestinationType.DATA_URL,
							sourceType : source,
							correctOrientation: true,
							encodingType: Camera.EncodingType.JPEG,
							targetWidth: 800,
							targetHeight: 800
						}
        );
			} else {
				//do a test image
				var testImage = "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";

				//console.log(img);
				//if(test.length > 1 ){
				//self.model.set( {image: testImage} );
				var access = window.localStorage.getItem( 'accessToken' );
				$.ajax( {
					url: window.app.config.apiURL + '/learners/' + self.model.id,
					data: "{\"image\": \"" + testImage + "\"}",
						contentType: "application/json",
					beforeSend: function( request ) {
						console.log( access );
						request.setRequestHeader( "x-email-auth-token", access );
					},
					type: 'PUT',
					success: function( result ) {
						console.log( 'ok' );
					},
					error: function ( result ) {
						console.log( "not ok", result );
					}
				} );
							//}
				//$img.attr( 'src', "data:image/jpeg;base64," + testImage );
				/*var mm = new CreateLearnerImageModel();
				mm.learnerId = self.model.id;
				mm.idAttribute  = self.model.id;
				mm.set( {image: test[1]} );
				mm.save( null, {

				success: function( model, response ) {
					//window.localStorage.setItem( 'learner', JSON.stringify( model.toJSON() ) );

					console.log('11');

				},

				error: function( model, response ) {
					console.log( 'ddCreate Profile error' );

					self.validationError( 'createProfile.validation.error' );

				}
				});*/
			}
		}

	} );

	return CreateProfileView;
} );
