"use strict";
define( [
	'jquery',
	'../../../../bower_components/underscore/underscore',
	'backbone',
	'i18next',
	'hbs!templates/feed',
	'collections/activities',
	'collections/drives',
	'models/activity',
	'views/activity',
	'views/profileDrive',
	'hbs!templates/activityPopup',
	'views/activityMonth',
	'views/header',
	'config',
	'moment',
	'models/learner',
	'models/instructor',
	'views/profileInstructor',
	'jknob',
	'jquery-easing-original',
	'models/theory',
	'raygun'
], function( $, _, Backbone, i18next, feedTemplate, ActivitiesCollection, DrivesCollection, ActivityModel, ActivityView, ProfileDriveView, activityPopupTemplate, ActivityMonthView, HeaderView, config, moment, LearnerModel, InstructorModel, ProfileInstructorView, JQueryKnob, jQueryEasing, TheoryModel, Raygun ) {
	var FeedView = Backbone.View.extend( {

		instructorId: null,
		currentMonth: 0,
		activityViews: [],
		isLoading: false,

		initialize: function() {

			this.activitiesCollection = new ActivitiesCollection();
			this.isLoading = false;

			if ( window.activitiesDb ) {
				window.activitiesDb.setLearner();
			}
		},

		firstActivities: function( router, havePostRender ) {
			var thisView = this;
			window.activitiesDb.getAll( function( collectionResult ) {
				//console.log( 'feed rows', collectionResult, thisView );

				if ( collectionResult && collectionResult.activities && collectionResult.activities.length > 0 ) {
					console.log( 'collection results' );

					thisView.renderProgress( collectionResult );

					var collection = new ActivitiesCollection( collectionResult.activities );
					collection.parse( collectionResult )

					//console.log( 'first act collection', collection );

					thisView.activitiesCollection = collection;

					thisView.renderCollection( collection, function() {
						if ( havePostRender ) {
							window.app.router.postRender( thisView, '#feed' );
							// prepare the profile
							thisView.loadProfileInfo( true );
						}

						// clear the classes on the body
						$( 'body' ).removeClass();

						//force 96% width of container due to issues after logging in
						thisView.$el.find( '.grid' ).width( Math.ceil( ( thisView.$el.find( '.page-inner' ).width() / 100 ) * 96 ) );
						$( '#loading' ).hide();
					} );

				} else {
					console.log( ' -- fetching the collection -- ' );
					// no activities in local DB so fetch them
					thisView.loadActivities( router, havePostRender );
				}
			} );
		},

		loadActivities: function( router, havePostRender ) {

			if( _.isUndefined( router ) ) {
				router = window.app.router;
			}
			var self = this;

			var learnerString = window.localStorage.getItem( 'learner' );
			var learner = JSON.parse( learnerString );



			if( learner && _.isUndefined( learner.chooseGoal ) ) {
				//if they don't have a goal set then they need to set it so send them to createProfile
				router.postRender( self );

				router.navigate( 'createProfile', true );
			} else if( learner ) {

				if( navigator.mixpanel ) {

					navigator.mixpanel.init(
						config.mixpanelToken, function() {
							navigator.mixpanel.register( {
								"googleSenderId": config.googleSenderId,
								"badge": "true",
								"sound": "true",
								"alert": "true"
							}, function() {

							if( learner ) {

								navigator.mixpanel.identify( learner.id.toString(), function() {

									if( ( learner.email.indexOf( 'holidayextras.com', learner.email.length - 'holidayextras.com'.length) !== -1 ) || ( learner.email.indexOf( 'midrive.com', learner.email.length - 'midrive.com'.length ) !== -1 ) ) {
										//console.log(learner.email);
										navigator.mixpanel.registerSuperProperties( { '$ignore': true }, function() {

										},function( message ) {
											console.log( 'mixpanel ignore super property NOT OK' + message );
										} );

									} else {
										navigator.mixpanel.unregisterSuperProperty( '$ignore', function() {
											console.log( 'unregister' );
										}, function( message ) {
											console.log( 'mixpanel unregister ignore super property NOT OK' + message );
										} );
console.log('registering user '+learner.id);
										navigator.mixpanel.peopleSet(
											{
												'User ID': learner.id,
												'$first_name': learner.givenName,
												'$last_name': learner.familyName,
												'$email': learner.email,
												'Date of birth': learner.dateOfBirth,
												'$created': learner.signupDate

											}, function() {

											}, function( message ) {
												console.log( 'mixpanel error' + message );
											} );
									}

								}, function( message ){
									console.log( 'mixpanel identify NOT OK' + message );
								} );
							}
						}, function( message ) {
							console.log( 'mixpanel register NOT OK' + message );
						} );
					}, function( message ) {
						console.log( 'mixpanel init NOT OK' + message );
					} );

						/*document.addEventListener('mixpanel.push', function( event ){
							console.log("got event",event);
						})*/

				}
				this.activitiesCollection.learnerId = learner.id;


				//if ( ( typeof navigator.connection != 'undefined' ) && ( navigator.connection.type != Connection.NONE ) ) {
				// only removed for the moment
				if ( true ) {

				this.activitiesCollection.fetch( {

					success: function( collection, response ) {

						if( typeof analytics !== 'undefined' ) {
							analytics.trackView( 'User Journey' );
						}


						self.renderProgress( response );

						var activitiesLength = collection.models.length;

						self.renderCollection( collection );

						if ( havePostRender ) {

							router.postRender( self, '#feed' );
							// prepare the profile
							self.loadProfileInfo( true );

						}

						// clear the classes on the body
						$( 'body' ).removeClass();

						//force 96% width of container due to issues after logging in
						self.$el.find( '.grid' ).width( Math.ceil( ( self.$el.find( '.page-inner' ).width() / 100 ) * 96 ) );
						$( '#loading' ).hide();


						//window.activitiesDb.getAll();

					},

					error: function( collection, response ) {
						self.isLoading = false;
						console.error( "Error fetching collection: " + JSON.stringify( response ) );


						if ( typeof response.responseText == "undefined" ) {
							console.log( 'we are offline' );

							var activitiesString = window.localStorage.getItem( 'activities' );
							if ( activitiesString != '' ) {

 								var activitiesCollection = new ActivitiesCollection( JSON.parse( activitiesString ) );
								//activitiesCollection.collection = JSON.parse( activitiesString );

								self.renderCollection( activitiesCollection );
							}

							if ( havePostRender ) {
								router.postRender( self, '#feed' );
								// prepare the profile
								self.loadProfileInfo( true );
							}

							//show the image success flash
							$( '.notice' ).fadeIn();


							// clear the classes on the body
							$( 'body' ).removeClass();
							$( '#loading' ).hide();
						}
					}

				} );

				} else {
					console.log( 'offline: no activities' );

					var activitiesString = window.localStorage.getItem( 'activities' );
					if ( activitiesString != '' ) {

						var activitiesCollection = new ActivitiesCollection( JSON.parse( activitiesString ) );
						//activitiesCollection.collection = JSON.parse( activitiesString );

						self.renderCollection( activitiesCollection );
					}

					if ( havePostRender ) {
						router.postRender( self, '#feed' );
						// prepare the profile
						self.loadProfileInfo( true );
					}

					//show the image success flash
					$( '.notice' ).fadeIn();


					// clear the classes on the body
					$( 'body' ).removeClass();
					$( '#loading' ).hide();


				}
				// end fetch activities collection
			}

		},

		renderProgress: function( response ) {
			var self = this;
//console.log( ' -- render progress -- ', self, response );

			if( response && response.stats ) {
				var total	= Math.round( ( ( response.stats.totalcompleted / response.stats.totalActivities ) * 100 ) );

				if ( navigator.mixpanel ) {
					navigator.mixpanel.init( config.mixpanelToken, function() {
						navigator.mixpanel.peopleSet(
							{
								'Total progress': total
							},
							function() { },
							function( message ) {
								console.log( 'mixpanel error' + message );
							}
						);
					},
						function( message ) {
							console.log( 'mixpanel error' + message );
						}
					);
				}

				$( { someValue: 0 } ).animate(
					{
						someValue: total
					},
					{
						duration: 1000,
						easing: 'easeOutBounce', // can be anything
						step: function() { // called on every step
							// Update the element's text with rounded-up value:
							var newValue =  this.someValue;
							self.$el.find( '#dial' ).val( this.someValue ).trigger( 'change' );
						}
					}
				);

			}
		},


		renderCollection: function( collection, callback ) {

//console.log( ' -- render collection called -- ' );

			var self = this;

			//console.log( 'collection', collection, self );

			var activitiesLength = collection.models.length;
			_.each( collection.models, function( activityModel, activityIndex ) {

				var activityView =  new ActivityView( {
					model: activityModel
				} );
				var item = activityModel.toJSON();

				//console.log(item);

				//each time the month changes we are going to append the header
				if( self.currentMonth != item.month ) {
					self.currentMonth = item.month;
					if( item.monthlyStats != null ) {
						var completed = item.monthlyStats.completed;
						var numActivities = item.monthlyStats.numActivities;
					}

					var perc = Math.round( completed/numActivities * 100 );

					var monthModel = {
						percentage: perc,
						month: item.month,
						totalMonths: collection.totalMonths
					};

					var activityMonthView =  new ActivityMonthView( {
						model: monthModel
					} );

					self.$el.find( '.activities' ).append( activityMonthView.el );
				}
				self.$el.find( '.activities' ).append( activityView.el );

				if ( ( activityIndex + 1 ) == activitiesLength ) {
					self.isLoading = false;
				}

			} );

			if ( callback ) {
				callback();
			}
		},

		refreshLearnerInfo: function( learnerInfo ) {

			//var learnerString = window.localStorage.getItem( 'learner' );
			//var learner = JSON.parse( learnerString );
			var self = this;
			var learnerModel = new LearnerModel();
			learnerModel.set( { id: learnerInfo.id } );
			learnerModel.fetch( {

				success: function( learner, response ) {
					window.localStorage.setItem( 'learner', JSON.stringify( learner ) );

					var instructorModel = new InstructorModel();
					//console.log(learn.toJSON().instructor);

					self.instructorId = ( learner.toJSON().instructor && learner.toJSON().instructor.id ) ? learner.toJSON().instructor.id : null;

					if ( self.instructorId ) {
						instructorModel.set( { id: learner.toJSON().instructor.id } );
						instructorModel.fetch( {
							success: function( instructor, response ) {

								window.localStorage.setItem( 'myInstructor', JSON.stringify( instructor.toJSON() ) );

								var profileInstructorView = new ProfileInstructorView( { model: instructor } );
								self.$el.find( '.my-instructor' ).html( profileInstructorView.render().el );

							},
							error: function( learner, response ) {
								console.log( 'error refresh learner', learner );
							}
						} );
					} else {
						// no instructors
						window.localStorage.removeItem( 'myInstructor' );

						var profileInstructorView = new ProfileInstructorView();
						self.$el.find( '.my-instructor' ).html( profileInstructorView.render().el );
					}

				},
				error: function( learn, response ) {
					console.log( 'error',learn);
				}
			} );
		},

		loadProfileInfo: function( storeInfo ) {
			var self = this;

			var learnerString = window.localStorage.getItem( 'learner' );
			var learner = JSON.parse( learnerString );


			// now the drives
			var myDrivesString = window.localStorage.getItem( 'myDrives' );
			var myDrives = JSON.parse( myDrivesString );

			if ( myDrives ) {
				// render the old drives then update them
				var drivesCollection = new DrivesCollection( myDrives );
				self.renderDrives( drivesCollection );
			}


			this.drivesCollection = new DrivesCollection();
			this.drivesCollection.learnerId = learner.id;

			this.drivesCollection.fetch( {

				success: function( collection, response ) {
					self.renderDrives( collection, true );

					if ( storeInfo ) {
						console.log( 'Storing myDrives collection' );
						window.localStorage.setItem( 'myDrives', JSON.stringify( collection.models ) );
					}

				},
				error: function( collection, response ) {
					console.log( 'drives collection error', collection, response );
					self.isLoading = false;
				}
			} );

		},

		renderDrives: function( collection, emptyFirst ) {
			var self = this;
			if ( emptyFirst ) {
				//console.log( 'Clean the list' );
				// clear the list first
				self.$el.find( '.myDrives' ).empty();
			}

			if ( _.isObject( collection ) && collection.models ) {
				var collectionLength = collection.models.length;
				_.each( collection.models, function( item, itemIndex ) {

					var eachItem = item.toJSON();

					var info = '(' + eachItem.driveType + ') ' + moment( eachItem.startDate ).format( 'Do MMMM YYYY' );
					var title = eachItem.driveName;
					item.set( {
						info: info,
						title: title
					} );
					var profileDriveView = new ProfileDriveView( {
						model: item
					} );

					self.$el.find( '.myDrives' ).append( profileDriveView.el );

					if ( ( itemIndex + 1 ) == collectionLength ) {
						self.isLoading = false;
					}

				} );
			}
		},

		render: function( router ) {

			if( navigator.screenOrientation ){
				navigator.screenOrientation.set( 'portrait' );
			}

			var params = {};
			var self = this;

			var learnerString = window.localStorage.getItem( 'learner' );
			var learner = JSON.parse( learnerString );

			window.Raygun.init( config.raygun ).attach();

			window.Raygun.setUser( learner.email );

			//use onBeforeSend to inspect for 402 and 404 and don't send them to raygun if we find them
			var myBeforeSend = function ( payload ) {

				if( typeof payload.Details == 'undefined' || typeof payload.Details.UserCustomData == 'undefined' || typeof payload.Details.UserCustomData.status == 'undefined' ) {
					return payload;
				} else {
					if( payload.Details.UserCustomData.status == 402 || payload.Details.UserCustomData.status == 404 ) {
						return false; //abort the error send to Raygun
					}
				}
				return payload;
			}

			window.Raygun.onBeforeSend( myBeforeSend );

			setTimeout( function() {

				if( typeof cordova != 'undefined' ) {
					cordova.getAppVersion(function ( version ) {
						window.Raygun.setVersion( version );
					} );
				}
			}, 2000 );

			var pictures = learner.picture;

			if( !_.isUndefined( pictures ) ) {
				_.each(pictures, function ( pic ) {

					if( pic.size == 340 ) {
						var src = pic.url;
						var cachebuster = Math.round( new Date().getTime() / 1000 );
						params.image = src + '?cachebust=' + cachebuster;
					}
				} );
			}

			var myInstructorString = window.localStorage.getItem( 'myInstructor' );

			if ( myInstructorString ) {
				var myInstructor = JSON.parse( myInstructorString );
				if( !_.isNull( myInstructor ) ) {
					params.myInstructor = myInstructor;
					self.instructorId = myInstructor.id;
				}
			} else { //in case was not in local storage - go and fetch and then put in local storage - will need to flush occasionally
				var learnerModel = new LearnerModel();
				learnerModel.set( { id: learner.id } );
				learnerModel.fetch( {

					success: function( learn, response ) {
						var instructorModel = new InstructorModel();

						//console.log("picture"+learn.toJSON().picture);

						if ( learn.toJSON().instructor && learn.toJSON().instructor.id ) {
							instructorModel.set( { id: learn.toJSON().instructor.id } );
							self.instructorId = learn.toJSON().instructor.id;
							instructorModel.fetch( {

								success: function( instructor, response ) {

									window.localStorage.setItem( 'myInstructor', JSON.stringify( instructor.toJSON() ) );
									params.myInstructor = instructor.toJSON();

								},
								error: function( learn, response ) {
									console.log( 'error',learn);
								}
							} );

						}


					},
					error: function( learn, response ) {
						console.log( 'error',learn);
					}
				} );
			}

			var header = new HeaderView();
			var menu = [
					// if you want to debug tracking - easier to turn on here
					/*{
						'name': 'Start tracking',
						'class': 'startTracking',
						'action': function( event ) {
							window.app.router.navigate( 'startTracking', true );
						}
					},*/
					{
						'icon-class' : 'icon-linea-basic-question',
						'name': 'Theory test',
						'class': 'theoryTest',
						'action': function( event ) {
							try{
								var learnerJSON = window.localStorage.getItem( 'learner' );
								var learner = JSON.parse( learnerJSON );
								var accessToken = window.localStorage.getItem( 'accessToken' );
								plugins.theory.startTheory(accessToken, config.apiURL, learner.id.toString() , function(){


								}, function( err ) {} );
							}
							catch ( err ) {

								trackJs.track( err ); // can either pass an actual Error object or a string
							}
						}
					},
					{
            'icon-class' : 'icon-linea-basic-stationary',
						'name': i18next.t( "feed.menu.editProfile" ),
						'class': 'editProfile',
						'action': function( event ) {

							if ( navigator.mixpanel ) {
								navigator.mixpanel.track(
									'Profile edit view',
									{},
									function() { },
									function( message ) {
										console.log( 'mixpanel error' + message );
									}
								);
							}

							window.app.router.navigate( 'editProfile', true );
						}
					},
					{
            'icon-class' : 'icon-linea-basic-cog',
						'name': i18next.t( "feed.menu.settings" ),
						'class': 'settings',
						'action': function( event ) {

							if ( navigator.mixpanel ) {
								navigator.mixpanel.track(
									'Settings view',
									{},
									function() { },
									function( message ) {
										console.log( 'mixpanel error' + message );
									}
								);
							}

							window.app.router.navigate( '/settings', true );
						}
					},
					{
            'icon-class' : 'icon-linea-basic-book',
						'name': i18next.t( "feed.menu.tandc" ),
						'class': 'tandc',
						'action': function( event ) {

							if ( navigator.mixpanel ) {
								navigator.mixpanel.track(
									'Terms view',
									{},
									function() { },
									function( message ) {
										console.log( 'mixpanel error' + message );
									}
								);
							}

							window.app.router.navigate( '/webContent/tandc/termsAndConditions', true );
						}
					},
					{
            'icon-class' : 'icon-linea-basic-eye',
						'name': i18next.t( "feed.menu.privacyPolicy" ),
						'class': 'privacy',
						'action': function( event ) {

							if ( navigator.mixpanel ) {
								navigator.mixpanel.track(
									'Privacy view',
									{},
									function() { },
									function( message ) {
										console.log( 'mixpanel error' + message );
									}
								);
							}

							window.app.router.navigate( '/webContent/privacyPolicy/privacy', true );
						}
					},
					{
            'icon-class' : 'icon-linea-basic-raft',
						'name': i18next.t( "feed.menu.faq" ),
						'class': 'faq',
						'action': function( event ) {

							if ( navigator.mixpanel ) {
								navigator.mixpanel.track(
									'FAQ view',
									{},
									function() { },
									function( message ) {
										console.log( 'mixpanel error' + message );
									}
								);
							}

							window.app.router.navigate( '/webContent/faq/faqAndSupport', true );
						}
					},
					{
            'icon-class' : 'icon-linea-basic-envelope',
						'name': i18next.t( "feed.menu.sendFeedback" ),
						'class': 'feedback',
						'action': function( event ) {

							if ( navigator.mixpanel ) {
								navigator.mixpanel.track(
									'Feedback view',
									{},
									function() { },
									function( message ) {
										console.log( 'mixpanel error' + message );
									}
								);
							}

							window.app.router.navigate( '/webContent/sendFeedback/feedback', true );
						}
					},

					{
            'icon-class' : 'icon-linea-basic-signs',
						'name': i18next.t( "feed.menu.signOut" ),
						'class': 'signOut',
						'action': function( event ) {
							event.preventDefault;

							if ( navigator.mixpanel ) {
								navigator.mixpanel.track(
									'Signed out',
									{},
									function() { },
									function( message ) {
										console.log( 'mixpanel error' + message );
									}
								);
							}

							if ( window.activitiesDb ) {
								// clear the journey
								window.activitiesDb.clearJourney();
							}

							window.app.router.signOut();
						}
					}
				];

			if ( Platform.platform == 'iOS' ) {
				var theoryModel = new TheoryModel();
				var hasTheoryTest = true;

				theoryModel.set( { id: learner.id } );
				theoryModel.fetch( {
					success: function( instructor, response ) {

						if ( navigator.mixpanel ) {
							navigator.mixpanel.peopleSet(
								{
									'Has V1 theory': true
								},
								function() {},
								function( message ) {
									console.log( 'mixpanel error' + message );
								}
							);
						}

					},
					error: function( learner, response ) {

						if ( navigator.mixpanel ) {
							navigator.mixpanel.peopleSet(
								{
									'Has V1 theory': false
								},
								function() {},
								function( message ) {
									console.log( 'mixpanel error' + message );
								}
							);
						}

						menu.shift();
						hasTheoryTest = false;
						self.$el.find( '.theoryTest' ).remove();
					}
				} );
			} else {
				// Android do not have theory test
				menu.shift();
			}

			header.render( {
				me: true,
				title: learner.givenName + ' ' + learner.familyName,
				menu: menu
			} );

			var compiledTemplate = feedTemplate( params );
			this.$el.html( compiledTemplate );

			setTimeout( function() {
				window.app.router.navigate( '/feed', false );
			}, 1000 );

			// bind the infinite scroll
			_.bindAll( this, 'checkScroll' );
			//this.$el.find( '.page-inner' ).unbind( 'scroll' ).scroll( this.checkScroll );
			this.$el.find( '.page-inner' ).scroll( this.checkScroll );

			this.$el.find( '#header' ).append( header.el );

			if ( !hasTheoryTest ) {
				this.$el.find( '.theoryTest' ).remove();
			}


			$( '.previous-drives-content' ).hide();

			//this.loadActivities( router, true );

			this.firstActivities( router, true );

			// refresh the learners info
			this.refreshLearnerInfo( learner );

      //console.log(this.$el.find( '.activities' ).offset());
      //console.log(this.$el.find( '.page-inner' ));

      this.$el.find( '.page-inner' ).animate( {
        scrollTop: '251px'
      }, 800 );

			if ( navigator.mixpanel ) {
				navigator.mixpanel.track(
					'Activities view',
					{},
					function () {},
					function ( message ) {
						console.log( message );
					}
				);
			}
		},

		checkScroll: _.throttle( function ( ) {
      var self = this;

			// scroll event is bound onto #app so we need to make sure it only fires on the instructor page
			var locationArray = Backbone.history.location.href.split( '#' );

			if( locationArray.length > 1 ) {

				if( locationArray[1] == 'feed' ) {
//					var triggerPoint = 400; // 100px from the bottom
//					var triggerPointDrives = 500; // 100px from the bottom

					var triggerPoint = Math.round( $( window ).height() * .66 ); // 100px from the bottom
					var triggerPointDrives = triggerPoint + 100; // 100px from the bottom

					//console.log( 'triggerPoint: ' + triggerPoint );


					//console.log( $( '.page-inner' ).scrollTop() + ' ' + $('.activities-content').height() + ' ' + ( $('.activities-content').height() - triggerPoint ) );
					//console.log( $( '.page-inner' ).scrollTop(), $('.previous-drives-content').height(), $('.previous-drives-content').height() - triggerPoint, this.isLoading );

					if ( !this.isLoading ) {
						if ( $( '.previous-drives-content' ).css( 'display' ) == 'none' ) {
							if ( $( '.page-inner' ).scrollTop() >= ( $('.activities-content').height() - triggerPoint ) ) {
								self.isLoading = true;
								// the previous drives is hidden
								this.activitiesCollection.URL = this.activitiesCollection.nextPage;
								this.loadActivities();
							}
						} else {
							if ( $( '.page-inner' ).scrollTop() >= ( $('.previous-drives-content').height() - triggerPointDrives ) ) {
								self.isLoading = true;
								//console.log( 'get the next drives' );
								// get the next drives
								this.drivesCollection.URL = this.drivesCollection.nextPage;
								this.drivesCollection.fetch( {
									success: function( collection, response ) {
										self.renderDrives( collection, false );
									},
									error: function( collection, response ) {
										self.isLoading = false;
										console.log( 'drives collection error', collection, response );
									}
								} );
							}
						}
      		}
				}
			}
    }, 500 )
	} );

	return FeedView;
} );
