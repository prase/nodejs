"use strict";
define( [
    'jquery',
    '../../../../bower_components/underscore/underscore',
    'backbone',
		'collections/instructorReviews',
		'hbs!templates/instructorReviews',
		'views/instructorReview',
		'models/instructorReview',
		'models/instructor',
		'views/header'
], function( $, _, Backbone, InstructorReviewsCollection, instructorReviewsTemplate, InstructorReviewView, InstructorReviewModel, InstructorModel, HeaderView ) {
	var InstructorReviewsView = Backbone.View.extend( {

		events: {
			'click .instructor-review-view': 'viewInstructorReviewDetail'
		},

		instructorReviewViews: [],
		initialize: function() {
			this.isLoading = false;

			_.bindAll(this, 'checkScroll' );
    	// bind to window
    	$(window).scroll( this.checkScroll );
		},

		viewInstructorReviewDetail: function ( button ) {

			button.preventDefault();

			var instructorId = $(button.target).data( 'instructor' );
			window.app.router.navigate( '/instructorReviewDetail/' + instructorId, true );

		},

		getInstructorReviews: function( instructorId ) {
			var self = this;
			if ( !window.app ) {
				setTimeout( function() {
					self.prepareInstructor( instructorId );
				}, 1000 );
			} else {
				self.prepareInstructor( instructorId );
			}

		},

		prepareInstructor: function( instructorId ) {
			// clear all the results
			this.instructorReviewViews = [];
			window.app.instructorReviews = [];

			var self = this;
			self.instructorReviewsCollection = new InstructorReviewsCollection( );
			self.instructorReviewsCollection.setInstructor( instructorId );
			this.instructorViews = [];

			this.loadResults();
		},

		loadResults: function () {
			var self = this;
			this.isLoading = true;

			this.instructorReviewsCollection.fetch({

				success: function( collection, response ) {

					_.each( collection.toJSON(), function ( item ) {
						item.instructor = self.instructorReviewsCollection.instructorId;

						self.instructorReviewViews.push( new InstructorReviewView ( {
        			model: item
      			} ) );
					} );
					//console.log( 'ins',self.instructorReviewViews );
					self.render( self.instructorReviewViews );
					self.isLoading = false;
				},

				error: function( collection, response ) {
					console.error( "Error fetching collection: " + response.responseText );
				}

			});
		},

		render: function( data ) {

			var self = this;
			var instructorReviewViews = data || {};

			var compiledTemplate = instructorReviewsTemplate();
			this.$el.html( compiledTemplate );

			var instructorModel = new InstructorModel( { 'id': self.instructorReviewsCollection.instructorId } );
			instructorModel.fetch({

				success: function( model, response ) {

					var header = new HeaderView();
					var instructor = model.toJSON();
					var headerTitle = '';

					// display the name of the instructor
					if ( ( typeof window.app != 'undefined' ) && ( typeof window.app.instructorDetailModel != 'undefined' ) ) {
						var instructorDetails = window.app.instructorDetailModel.toJSON();
						headerTitle = ( instructorDetails.givenName || '' ) + ' ' + ( instructorDetails.familyName || '' )
					}

					header.render( {
						back: true,
						title: headerTitle
					} );

					self.$el.find( '#header' ).append( header.el );

					if( navigator.mixpanel ) {
						navigator.mixpanel.track(
							'Instructor viewed detail',
							{
								'Instructor': instructorReviewsCollection.instructorId,
								'content': 'Review list'
							},
							function(){ },
							function( message ) {
								console.log( message );
							}
						);
					}
				},

				error: function( model, response ) {
					console.log('Could not get instructor details');
				}

			});

			_.each( instructorReviewViews, function( instructorReviewView ) {
				self.$( '#instructorReviews' ).append( instructorReviewView.render().$el ); // equivalent to this.$el.find("ul")
			} );

			window.app.router.postRender( self );

		},

    checkScroll: function ( ) {
			// scroll event is bound onto #app so we need to make sure it only fires on the Instructor Review page
			var locationArray = Backbone.history.fragment.split( '/' );
			if( locationArray.length > 1 ) {
				if( locationArray[0] == 'instructorReviews' ){
					var triggerPoint = 100; // 100px from the bottom
      		if( !this.isLoading && this.el.scrollTop + this.el.clientHeight + triggerPoint > this.el.scrollHeight ) {

      			//this.instructorReviewsCollection.URL = this.instructorReviewsCollection.nextPage;
      			this.loadResults();
      		}
				}
			}
    }


	} );

	return InstructorReviewsView;
} );
