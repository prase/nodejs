define( [
    'jquery',
    '../../../../bower_components/underscore/underscore',
    'backbone',
		'i18next',
		'platform',
		'models/editLearner',
		'hbs!templates/editProfile',
		'moment',
		'views/header',
		'views/editProfileModal'
], function( $, _, Backbone, i18next, Platform, EditLearnerModel, editProfileTemplate, moment, HeaderView, EditProfileModal ) {

	var EditProfileView = Backbone.View.extend( {

		dob: null,
		chooseGoal: null,
		firstPickDOB:true,
		firstPickGoal:true,
		customGoal: false,
		diffDuration: 0,
		oldGoalDate: null,

		events: {
			'click #saveProfile': 'saveProfile',
			'click .pickDate': 'pickDate',
			'click #chooseGoalString': 'pickGoalDate',
			'click .dismiss': 'dismiss',
			'click #cancelProfile': 'cancel',
			'change #createDateOfBirthString' : 'dateOfBirthChange',
			'blur #chooseGoalString' : 'chooseGoalBlur',
			'click label' : 'labelClick'
		},

		initialize: function() {
			//Backbone.Notifications = {};
			//_.extend(Backbone.Notifications, Backbone.Events);

			Backbone.Notifications.off( 'CallCamera' );
			Backbone.Notifications.on( 'CallCamera' , function ( msg ) {

				this.photo( msg );
			}, this);

			$( '#modal-content' ).unbind();
			var editProfileModal = new EditProfileModal();
			editProfileModal.render();

		},


		dismiss: function() {
			$( '.notice' ).fadeOut();
		},

		labelClick: function( event ){
			var labelID = $( event.target ).attr( 'for' );
			$( '#' + labelID ).trigger( 'click' );
		},

		cancel: function(){
			window.app.router.navigate( '/feed', true );
		},

		dateOfBirthChange: function() {
			if( Platform.platform == 'iOS' ) {
				console.log( "DOB Change" );
				$( '#dateOfBirth' ).val( $( '#createDateOfBirthString' ).val() );
			}
		},

		pickDate: function() {

			var self = this;

			//ensure show the right date if picked twice - rather than reloading from model
			if( this.firstPickDOB == true ) {
				this.dob = new Date( this.model.get( 'dateOfBirth' ) );
			}

			var options = {
				date: this.dob,
				mode: 'date'
			};

			if ( window.plugins && typeof window.plugins.datePicker != 'undefined' ) {
				window.plugins.datePicker.show( options, function( date ) {

					//if pressed cancel
					if( date == '' || date == 'Invalid Date' ){
						self.dob = new Date( self.model.get( 'dateOfBirth' ) );
					} else {
						self.firstPickDOB = false;
						self.dob = new Date( date );
					}

					$( '#dateOfBirth' ).val( moment( self.dob ).format( 'YYYY-MM-DD' ) );
					$( '#dateOfBirthString' ).val( moment( self.dob ).format( 'LL' ) );
				} );
			} else {
				var date = new Date();
				$( '#dateOfBirth' ).val( moment( date ).format( 'YYYY-MM-DD' ) );
				$( '#dateOfBirthString' ).val( moment(date).format( 'LL' ) );
			}
		},

		pickGoalDate: function() {
			var self = this;

			var signedUp = this.model.get( 'journeyDate' );
			var goalDate = new Date();
			goalDate = new Date();
			goalDate.setHours( 0, 0, 0, 0 );
			goalDate = new Date( goalDate.setMonth( goalDate.getMonth() + 9 ) );

			if( _.isNull( this.model.get( 'chooseGoal' ) ) ) {

				this.chooseGoal = goalDate;
			} else {

				//ensure show the right date if picked twice - rather than reloading from model
				if( this.firstPickGoal ) {

					var isoDiffDuration = moment.duration.fromIsoduration( this.model.get( 'chooseGoal' ) );

					goalDate = moment( signedUp ).add( isoDiffDuration ).toDate();

					this.chooseGoal = goalDate;
					this.firstPickGoal = false;
				}

			}

			var min = new Date();
			min.setHours( 0, 0, 0, 0 );
			min = new Date( min.setMonth( min.getMonth() + 1 ) );

			var max = new Date();
			max.setHours( 0, 0, 0, 0 );
			max = new Date( max.setFullYear( max.getFullYear() + 5 ) );

			var options = {
				date: this.chooseGoal,
				mode: 'date',
				minDate: min.getTime(),
				maxDate: max.getTime()
			};

			if( Platform.platform == 'iOS' ) {
				var diff = moment( $( '#chooseGoalString' ).val() ).diff( now );
				this.diffDuration = moment.duration( diff );
				var isoDiffDuration = this.diffDuration.isoduration();
				$( '#console' ).html( isoDiffDuration );

				$( '#chooseGoal' ).val( isoDiffDuration.split( '-' ).join( '' ) );
				$( '#chooseGoalString' ).val( moment( self.chooseGoal ).format( 'YYYY-MM-DD' ) );
			} else {
				if ( window.plugins && typeof window.plugins.datePicker != 'undefined' ) {

					window.plugins.datePicker.show( options, function( date ) {

						//if pressed cancel
						if( date == '' || date == 'Invalid Date' ){

							$( '#chooseGoalString' ).val( '' );

							console.log('empty');//self.chooseGoal = self.chooseGoal;
						} else {
							self.firstPickGoal = false;
							self.chooseGoal = new Date( date );
						}
						var moment9 = moment( self.chooseGoal );
						var diff = moment9.diff( signedUp, 'minutes', true );
						//do some more testing here - still a couple of days out
						var diffDuration = moment.duration( Math.round( diff ), 'minutes' );

						var isoDiffDuration = diffDuration.isoduration();

						var test = moment.duration.fromIsoduration( isoDiffDuration );

						$( '#console' ).html( isoDiffDuration );
						$( '#chooseGoal' ).val( isoDiffDuration );

						$( '#chooseGoalString' ).val( moment( self.chooseGoal ).format( 'LL' ) );
					} );
				} else {
					var now = new Date();
					var moment9 = moment( goalDate );
					var diff = moment9.diff( now );
					var diffDuration = moment.duration( diff );
					var isoDiffDuration = diffDuration.isoduration();

					$( '#console' ).html( isoDiffDuration );

					$( '#chooseGoal' ).val( isoDiffDuration );
					$( '#chooseGoalString' ).val( moment( goalDate ).format( 'LL' ) );
				}
			}
		},

		chooseGoalBlur: function( event ) {
			console.log('update goal');
			var journeyDateMoment = moment( this.model.get( 'journeyDate' ) );
			var goalDateMoment = moment( new Date( event.target.value ) );
			console.log( journeyDateMoment );
			var isoduration = moment.duration( journeyDateMoment.diff( goalDateMoment ) ).isoduration();
			$('#chooseGoal').val( isoduration.split( '-' ).join( '' ) );
		},

		render: function( router ) {

			var learnerJSON = window.localStorage.getItem( 'learner' );
			var learner = JSON.parse( learnerJSON );
			var self = this;

			$( 'body' ).removeClass();

			// edit should never come from local storage - need a connection to the api or cannot update - needs to be not stale (from local)
			this.model = new EditLearnerModel( { id: learner.id} );


			this.model.fetch( {

				success: function( model, response, options ) {

					if( typeof analytics !== 'undefined' ) {
						analytics.trackView('Edit Profile');
					}

					var chooseGoalString = '';
					//console.log('model', model.toJSON(),learner.accessToken);
					if( self.model.get( 'chooseGoal' ) ){
						var chooseGoalString = '';
						var isoDiffDuration = moment.duration.fromIsoduration( self.model.get( 'chooseGoal' ) );
						var signedUp = self.model.get( 'journeyDate' );
						//console.log('2 is '+signedUp.toString());
						chooseGoalString = moment( signedUp ).add( isoDiffDuration ).format( Platform.platform == 'iOS' ? 'YYYY-MM-DD' : 'LL' );
					}

					self.model.set( {
						dateOfBirthString: moment( new Date(self.model.get( 'dateOfBirth' )) )
							.format( Platform.platform == 'iOS' ? 'YYYY-MM-DD' : 'LL' ),
						chooseGoalString: chooseGoalString,
						fullName: self.model.get( 'givenName' ) + ' ' + self.model.get( 'familyName' )
					}  );

					//window.app.headerView.render( { title: i18next.t( 'editProfile.headerTitle' ) } );
					//console.log(self.model.toJSON());
					var compiledTemplate = editProfileTemplate( self.model.toJSON() );
					self.$el.html( compiledTemplate );

					self.oldGoalDate = self.model.get( 'chooseGoal' );

					var header = new HeaderView();
					header.render( {
            title: Platform.platform == 'iOS' ? 'Edit Profile' : '',
						back: Platform.platform == 'iOS' ? false : true
					} );

					console.log( Platform.platform );

					self.$el.find( '#header' ).append( header.el );

					/*if( !_.isNull( self.editProfileModal ) ){
						self.editProfileModal.remove();
						console.log('remove');
					}

					*/


					//Encoder.init();

					router.postRender( self );

					$( 'body' ).removeClass();

					if ( Platform.platform == 'iOS' ) {
						$( 'body' ).addClass( 'full-page' );
						if( learner.picture.length > 0 ){
							$( '.createProfileAvatar' ).show();
						}
					}

				},
				error: function( model, response, options ) {
					console.error( 'Could not load profile from api' );
					router.postRender( self );
				}
			} );
			return this;

		},

		validationError: function ( error ) {

			var message = i18next.t( error );
			var title = i18next.t( 'editProfile.validation.problem' );

			if ( navigator && navigator.notification ) {
				navigator.notification.confirm(
					message
					,
					function ( buttonIndex ) {

					},
					title,
					[ i18next.t( "editProfile.buttons.ok" ) ]
				);
			} else {
				alert( title + ' ' + message );
			}
		},

		saveProfile: function ( event ) {
			$( '#loading' ).show();
			event.preventDefault();
			var self = this;
			var formData =  $( '#editProfile' ).serializeObject();

			var Assert = Validator.Assert,
    	validator = new Validator.Validator();

			var allValid = true;
			var fullNameValid = validator.validate( formData.fullName || '', new Validator.Assert().NotBlank() );

			var emailValid = validator.validate( formData.email || '', new Validator.Assert().Email() );
			var dateOfBirthValid = validator.validate( formData.dateOfBirth || '', new Validator.Assert().NotBlank() );
			var goalValid = validator.validate( formData.chooseGoal || '', new Validator.Assert().NotBlank() );

			if( fullNameValid != true ) {
				allValid = false;
				this.validationError( 'editProfile.validation.fullName' );
			} else if( emailValid != true ) {
				allValid = false;
				this.validationError( 'editProfile.validation.email' );
			} else if( ( goalValid != true ) || ( formData.chooseGoal == 'P' ) ) {
				allValid = false;
				this.validationError( 'editProfile.validation.goal' );
			} else if( dateOfBirthValid != true ) {
				allValid = false;
				this.validationError( 'editProfile.validation.dateOfBirth' );
			}

			if ( formData.dateOfBirth && !moment( formData.dateOfBirth ).isBefore( new Date() ) ) {
				allValid = false;
				this.validationError( 'editProfile.validation.futureDateOfBirth' );
			}

			if( Platform.platform == 'iOS' ) {
				var now = new Date();
				var diff = moment( $( '#chooseGoalString' ).val() ).diff( now );
				var diffDuration = moment.duration( diff );

				if ( ( diffDuration - 0 ) < 0 || ( diffDuration - 0 ) > 94670778000 ) {
					allValid = false;
					this.validationError( 'editProfile.validation.goalDate' );
				}
			}

			if( allValid ) {

				//split in the first space
				formData.fullName = formData.fullName.trim();
				var givenName = formData.fullName.substr( 0,formData.fullName.indexOf( ' ' ) );
				var familyName = formData.fullName.substr( formData.fullName.indexOf( ' ' ) + 1 );

				if( givenName.length == 0 || familyName.length == 0) {
					this.validationError( 'editProfile.validation.both' );
					$( '#loading' ).hide();
				} else {

					this.model.set( { givenName: givenName } );
					this.model.set( { familyName: familyName } );
					this.model.set( { email: formData.email } );
					this.model.set( { dateOfBirth: formData.dateOfBirth } );
					this.model.set( { chooseGoal: formData.chooseGoal } );
					//this.model.set( {image: null} );
					this.model.set( { description: null } );

					var learnerJSON = window.localStorage.getItem( 'learner' );
					var learner = JSON.parse( learnerJSON );
					var accessToken = learner.accessToken;
					//console.log('model is ',this.model.toJSON());
					this.model.save( null, {
						success: function( model, response ) {

							//ensure we resave the accessToken back as it doesn't get returned from this endpoint
							model.set( 'accessToken', accessToken );
							window.localStorage.setItem( 'learner', JSON.stringify( model.toJSON() ) );

							if ( self.oldGoalDate != model.get( 'chooseGoal' ) && window.activitiesDb ) {
								// need to change the journey as we have changed the goal date
								window.activitiesDb.setLearner();
								window.activitiesDb.clearJourney();
							}

							self.oldGoalDate = model.get( 'chooseGoal' );

//							if( navigator.mixpanel ) {
//
//								var learnerJson = model.toJSON();
//
//								var signedUp = learnerJson.signedUp;
//								var isoDiffDuration = moment.duration.fromIsoduration( learnerJson.chooseGoal );
//								var goal = moment( signedUp ).add( isoDiffDuration ).format( 'YYYY-MM-DDTHH:mm:ss' );
//
//								navigator.mixpanel.peopleSet(
//									{
//										'user_id': learnerJson.id,
//										'$first_name': learnerJson.givenName,
//										'$last_name': learnerJson.familyName,
//										'user_type': learnerJson.type,
//										'$email': learnerJson.email,
//										'dob': learnerJson.dateOfBirth,
//										'$created': learnerJson.signupDate,
//										'goal': goal
//									}, function() {
//
//									}, function( message ) {
//										console.log( 'mixpanel error' + message );
//									} );
//
//							}

							//console.log(model);
							this.model = null;

							window.app.router.navigate( '/feed', true );

						},

						error: function( model, response ) {
							console.log( 'Edit Profile error--' );
							var message = JSON.parse( response.responseText ).response.error;
							message.image.submitted = "";
							console.log( JSON.stringify( message ) );
							self.validationError( 'editProfile.validation.error' );
							$( '#loading' ).hide();
							//var test = response.response;
							//test.responseText.response = "";
							//console.log( JSON.stringify(test) );

						}
					});
				}

			} else {
				$( '#loading' ).hide();
			}

		},

		photo: function( typePhoto ) {

			event.preventDefault();

			var self = this;
			//var $img = this.$el.find( 'img#cameraImage' );
			if ( navigator && navigator.camera ) {
				var source = navigator.camera.PictureSourceType.SAVEDPHOTOALBUM;
				if( typePhoto == 'new' ) {
					source = navigator.camera.PictureSourceType.CAMERA;
					//console.log(source);
				}

        /*
         | BASED ON: http://stackoverflow.com/a/11928792/633056
         */

        navigator.camera.getPicture(
            function(data) {
							var access = window.localStorage.getItem( 'accessToken' );
							//$('body').append(data.replace(/(\r\n|\n|\r)/gm,""));
							$.ajax( {
								url: window.app.config.apiURL + '/learners/' + self.model.id,
								data: "{\"image\": \"" + data.replace(/(\r\n|\n|\r)/gm,"") + "\"}",
								contentType:"application/json",
								beforeSend: function( request ) {
									$( '.createProfileAvatarSpinner' ).show();
                  $( '#menuModal' ).modal( 'hide' );
                  console.log(access);
									request.setRequestHeader("x-email-auth-token", access);
								},
								type: 'PUT',
								success: function( result ) {
									$( '.createProfileAvatarSpinner' ).hide();
									_.each( result.picture, function( value ){
										if( value.size == 340 ){
											$( '.createProfileAvatar').find('img').attr( 'src', value.url + '?' + new Date().getTime() ).show();
										}
									} );
									console.log( "ok"+ JSON.stringify( result ) );
								},
								error: function ( result ) {
									console.log( "not ok"+ JSON.stringify( result ) );
								}
							} );
						},
            function(e) {
							console.log( "Error getting picture: " + e );
							$( 'camera-status' ).innerHTML = e;
							//dom.byId('camera-image').style.display = "none";
            },
            // must be DATA_URL to return the data for future use
            {
							quality: 50,
							destinationType: navigator.camera.DestinationType.DATA_URL,
							sourceType: source,
							correctOrientation: true,
							encodingType: Camera.EncodingType.JPEG,
							targetWidth: 800,
  						targetHeight: 800
						}
        );
			} else {
				//do a test image
				var testImage = "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";

				self.model.set( { image: testImage } );

			}
		}


	} );

	return EditProfileView;
} );
