define( [
  'jquery',
  '../../../../bower_components/underscore/underscore',
  'backbone',
  'i18next',
  'hbs!templates/iosInstructorModal'
], function( $, _, Backbone, i18next, iosInstructorModalTemplate ) {

  var IosInstructorModalView = Backbone.View.extend( {

    el: '#modal-content',
    model: null,
    events: {
      'click #instructorCall': 'call',
      'click #instructorEmail': 'email'
    },

    initialize: function( instructor ){
      this.model = instructor;
    },

    call: function ( ) {
      //console.log( "Call", this.model );
      var self = this;
      var currentInstructor = self.model.toJSON();

      //console.log( currentInstructor );

      // if not verified then show the dialog first - otherwise do the action immediately
      if( !this.myInstructor && !currentInstructor.isApproved ) {

        if ( navigator && navigator.notification ) {

          navigator.notification.confirm(
            i18next.t( "instructorDetail.alert.call", {
              currentInstructorGivenName: currentInstructor.givenName,
              currentInstructorFamilyName: currentInstructor.familyName,
              currentInstructorTelephone: currentInstructor.telephone
            } ),
            function ( buttonIndex ) {
              if( buttonIndex == 2 ) { //if want to proceed
                self.makeACall( currentInstructor.id, currentInstructor.telephone );
              }
            },
            i18next.t( "instructorDetail.contact", {
              currentInstructorGivenName: currentInstructor.givenName,
              currentInstructorFamilyName: currentInstructor.familyName
            } ),
            [ i18next.t( "instructorDetail.buttons.cancel" ), i18next.t( "instructorDetail.buttons.call" ) ]
          );
        }
      } else {
        self.makeACall( currentInstructor.id, currentInstructor.telephone );
      }
    },

    makeACall: function ( id, number ) {

      var tel = 'tel:' + number;
      if( navigator.mixpanel ){
        var learnerString = window.localStorage.getItem( 'learner' );
        var learner = JSON.parse( learnerString );

        var mixParams = {
          'Instructor': id,
          'Method': 'Call'
        };
        if ( learner && learner.instructor && ( learner.instructor.id == id ) ) {
          mixParams['Screen'] = 'My instructor';
        }

        navigator.mixpanel.track(
          'Instructor contacted',
          mixParams,
          function(){ },
          function( message ) {
            console.log( message );
          }
        );
        navigator.mixpanel.peopleSet(
          {
            'Has contacted instructor': true
          },
          function() { },
          function( message ) {
            console.log( 'mixpanel error' + message );
          }
        );
      }
      window.location.href = tel;
    },

    email: function ( ) {
      var self = this;
      var currentInstructor = this.model.toJSON();

      // if not verified then show the dialog first - otherwise do the action immediately
      if(  !this.myInstructor && !currentInstructor.isApproved ) {

        if ( navigator && navigator.notification ) {

          navigator.notification.confirm(
            i18next.t( "instructorDetail.alert.email", {
              currentInstructorGivenName: currentInstructor.givenName,
              currentInstructorFamilyName: currentInstructor.familyName,
              currentInstructorEmail: currentInstructor.email
            } ),
            function ( buttonIndex ) {
              if( buttonIndex == 2 ) { //if want to proceed
                self.sendAnEmail( currentInstructor );
              }
            },
            i18next.t( "instructorDetail.contact", {
              currentInstructorGivenName: currentInstructor.givenName,
              currentInstructorFamilyName: currentInstructor.familyName
            } ),
            [ i18next.t( "instructorDetail.buttons.cancel" ) , i18next.t( "instructorDetail.buttons.email" ) ]
          );
        }
      } else {
        self.sendAnEmail( currentInstructor );
      }
    },
    sendAnEmail: function ( currentInstructor ) {
      var self = this;
      var learnerString = window.localStorage.getItem( 'learner' );
      var learner = JSON.parse( learnerString );

      if( window.plugin && window.plugin.email ) {
        if( navigator.mixpanel ) {
          var mixParams = {
            'Instructor': currentInstructor.id,
            'Method': 'Email'
          };

          if ( learner && learner.instructor && ( learner.instructor.id == currentInstructor.id ) ) {
            mixParams['Screen'] = 'My instructor';
          }
          navigator.mixpanel.track(
            'Instructor contacted',
            mixParams,
            function(){ },
            function( message ) {
              console.log( message );
            }
          );
          navigator.mixpanel.peopleSet(
            {
              'Has contacted instructor': true
            },
            function() { },
            function( message ) {
              console.log( 'mixpanel error' + message );
            }
          );
        }
        window.plugin.email.open( {
          to:      [ currentInstructor.email ],
          subject: i18next.t( "instructorDetail.email.subject" ),
          body:    i18next.t( "instructorDetail.email.body", {
            currentInstructorGivenName: currentInstructor.givenName,
            learnerEmail: learner.email,
            learnerGivenName: learner.givenName,
            learnerFamilyName: learner.familyName
          } )
        } );
      }
    },

    render: function() {

      var compiledTemplate = iosInstructorModalTemplate();

      this.$el.html( compiledTemplate );

      this.delegateEvents();
    }

  });

  return IosInstructorModalView;
} );
