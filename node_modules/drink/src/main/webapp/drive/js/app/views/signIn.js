define( [
	'jquery',
	'../../../../bower_components/underscore/underscore',
	'backbone',
	'i18next',
	'platform',
	'models/signIn',
	'models/learner',
	'models/forgottenPassword',
	'hbs!templates/signIn'
], function( $, _, Backbone, i18next, Platform, SignInModel, LearnerModel, ForgottenPasswordModel, signInTemplate ) {
	var SignInView = Backbone.View.extend( {

		hammerEvents: {

		},
		hammerOptions: {
			tap: true
		},
		events: {
			'click #submitSignIn': 'signSubmit',
			'click #submitSignUp': 'signSubmit',
			'click #forgotPassword': 'forgotPassword',
			'click .clearLocalStorage': 'clearLocalStorage',
			'click .tab': 'tabs',
			'submit #signIn': 'signSubmit',
			'submit #signUp': 'signSubmit',
			'click label' : 'labelClick'
		},

		learner: {},

		initialize: function() {
		},

		responseWait: false,

		render: function( router ) {

			$( 'body' ).removeClass();
			$( 'body' ).addClass( 'full-page' ).addClass( 'signin-page' );

			var data = {
				"signUp": {
					"title": i18next.t( "signIn.signUp.title" ),
					"welcomeMessage": i18next.t( "signIn.signUp.welcomeMessage" ),
					"email": i18next.t( "signIn.labels.yourEmail." + Platform.platform, { defaultValue: i18next.t( "signIn.labels.yourEmail.default" ) } ),
					"password": i18next.t( "signIn.labels.choosePassword." + Platform.platform, { defaultValue: i18next.t( "signIn.labels.choosePassword.default" ) } ),
				},
				"signIn": {
					"title": i18next.t( "signIn.signIn.title." + Platform.platform, { defaultValue: i18next.t( "signIn.signIn.title.default" ) } ),
					"welcomeMessage": i18next.t( "signIn.signIn.welcomeMessage." + Platform.platform, { defaultValue: i18next.t( "signIn.signIn.welcomeMessage.default" ) } ),
					"email": i18next.t( "signIn.labels.yourEmail." + Platform.platform, { defaultValue: i18next.t( "signIn.labels.yourEmail.default" ) } ),
					"password": i18next.t( "signIn.labels.yourPassword." + Platform.platform, { defaultValue: i18next.t( "signIn.labels.yourPassword.default" ) } ),
					"logInButton": i18next.t( "signIn.signIn.buttons.logIn." + Platform.platform, { defaultValue: i18next.t( "signIn.signIn.buttons.logIn.default" ) } )
				}
			};

			if ( window.activitiesDb ) {

				console.log( 'doing the clear' );
				// clear the journey
				window.activitiesDb.clearJourney();
			}

			//ensure is clear
			window.localStorage.clear();

			//if ( ( typeof window.app != 'undefined' ) && ( typeof window.app.headerView != 'undefined' ) ) {
				//window.app.headerView.render();
			//}

			var compiledTemplate = signInTemplate( data );
			this.$el.html( compiledTemplate );

			// hide the Sign Up tab
			$( '#signUpTab' ).hide();

			try{
				//$( '#console' ).html( 'results' + JSON.stringify( this.learner.toJSON() ) );
			} catch( exception ) {
				// nothing
				// only test purpose
			}

			router.postRender( this );

			if ( Platform.platform == 'iOS' ) {
				$( '.loginButtons' ).removeClass( 'double-btn' );
				$( '#forgotPassword' ).hide();
			}


		},

		forgotPassword: function ( event ) {
			if ( typeof event != 'undefined' ) {
				event.preventDefault;
			}
			var self = this;

			var buttons = [
				i18next.t( "signIn.forgottenPassword.buttons.go" ),
				i18next.t( "signIn.forgottenPassword.buttons.cancel" )
			];

			if ( Platform.platform == 'iOS' ) {
				buttons.reverse();
				buttons[1] = i18next.t( "signIn.forgottenPassword.buttons.send" );
			}

			//if running on the device
			if( navigator && navigator.notification ) {
				navigator.notification.prompt(
					i18next.t( "signIn.forgottenPassword.action." + Platform.platform, { defaultValue: i18next.t( "signIn.forgottenPassword.action.default" ) } ),
					self.forgotPasswordResult,
					i18next.t( "signIn.forgottenPassword.title" ),
					buttons,
					i18next.t( "signIn.forgottenPassword.placeholder" )
				);
			} else {
				alert( 'Forgotten password prompt' );
			}

			return false;
		},

		forgotPasswordResult: function ( results ) {
			var self = this;
			var goButtonIndex = 1;

			//alert( ' -- okidoki -- ' + results.buttonIndex + ' ' + results.input1 );

			if ( Platform.platform == 'iOS' ) {
				goButtonIndex = 2;
			}

			if( results && results.buttonIndex && ( results.buttonIndex === goButtonIndex ) ) {
				try{
					//$( '#console' ).html( 'results' + JSON.stringify( results ) );
					//console.log(JSON.stringify( results ));
					//console.log(results.input1);
					var forgottenPassword = new ForgottenPasswordModel();

					if( ( results.input1 == 'Email address' ) || _.isNull( results.input1 ) || _.isUndefined( results.input1 ) ) {
						if ( navigator && navigator.notification ) {
									navigator.notification.alert(
										i18next.t( "signIn.resetPassword.noEmail" ),
										function(){},
										i18next.t( "signIn.resetPassword.titleError" ),
										i18next.t( "signIn.resetPassword.buttons.errorOk" )
									);
						}
					} else {
						forgottenPassword.save( { 'email': results.input1 }, {
							success: function( model, response, options ) {
								//$( '#console' ).html( JSON.stringify( response ) );
								if ( navigator && navigator.notification ) {
									navigator.notification.alert(
										i18next.t( "signIn.resetPassword.action." + Platform.platform, { email: results.input1, defaultValue: i18next.t( "signIn.resetPassword.action.default" ) } ),
										function(){},
										i18next.t( "signIn.resetPassword.title." + Platform.platform, { defaultValue: i18next.t( "signIn.resetPassword.title.default" ) } ),
										i18next.t( "signIn.resetPassword.buttons.ok" )
									);
								}
							},
							error: function( model, response, options ) {
								//$( '#console' ).html( JSON.stringify( response ) );
								if ( navigator && navigator.notification ) {

									if ( Platform.platform == 'iOS' ) {
										navigator.notification.prompt(
											i18next.t( "signIn.forgottenPassword.tryAgain.action" ),
											self.forgotPasswordResult,
											i18next.t( "signIn.forgottenPassword.tryAgain.title" ),
											[
												i18next.t( "signIn.forgottenPassword.buttons.cancel" ),
												i18next.t( "signIn.forgottenPassword.buttons.tryAgain" )
											],
											i18next.t( "signIn.forgottenPassword.placeholder" )
										);
									} else {
										navigator.notification.alert(
											i18next.t( "signIn.resetPassword.actionError" ),
											function(){},
											i18next.t( "signIn.resetPassword.titleError" ),
											i18next.t( "signIn.resetPassword.buttons.errorOk" )
										);
									}
								}
							}
						} );
					}
				}
				catch( exception ) {
					$( '#console' ).html( "exception " + exception.message );
					//alert( "exception " + exception.message );
				}
			}
		},

		labelClick: function(event){
			var labelID = $(event.target).attr('for');
			$('#'+labelID).trigger('click');
		},

		signSubmit: function( event ) {

			// do either the login or register of the learner
			event.preventDefault;
			$( '#loading' ).show();
			var self = this;
			var path = '/login';
			var whichButton = $( event.target ).attr( 'id' );
			var formHash;
			//console.log('dd',whichButton);
			switch( whichButton ) {
				case 'submitSignUp':
				case 'signUp':
					formHash = 'signUp';
					break;

				case 'submitSignIn':
				default:
					formHash = 'signIn';
					break;
			}

			if ( !self.responseWait ) {

				self.responseWait = true;

				// remove all the error messages
				$( 'span.errMsg' ).remove();

				//var formData = "{ \"email\":\"" + $( '#emailLogin' ).val() + "\", \"password\":\"" + $( '#passwordLogin' ).val() + "\"}";
				if ( formHash == 'signUp' ) {
					path = '/learners';
					//formData = { email: $( '#email' ).val(), password: $( '#password' ).val()};
				}

				var model = new SignInModel( path );
				var formData =  $( '#' + formHash ).serializeObject(); // just the JSON

				// need some validation here
				var form = $( '#' + formHash );
				form.validate( {
					errorClass: 'errMsg',
					errorElement: 'span',
					success: "valid",
					rules: {
						email:{
							required: true,
							email: true
						},
						password: {
							required: true,
							minlength: 6
						}
					}
				} );

				if ( form.valid() ) {

					// let's sign in/up
					model.save( formData, {
						success: function( model, response, options ) {
							//$( '#console' ).html( JSON.stringify( response ) );
							//console.log( '-- SignView success', model, response, options );

							self.responseWait = false;

							// Save the learner into a model
							this.learner = new LearnerModel();
							this.learner.set( response );

							//window.app.token = this.learner.toJSON().accessToken;

							window.localStorage.setItem( 'learner', JSON.stringify( this.learner.toJSON() ) );
							window.localStorage.setItem( 'accessToken', this.learner.toJSON().accessToken || '' );

							//console.log('learner',this.learner.toJSON());
							// TODO encrypt the data in localStorage ???
							var learnerJson = this.learner.toJSON();

							if( navigator.mixpanel ) {

								if ( formHash == 'signUp' ) {

									navigator.mixpanel.createAlias(
										'' + learnerJson.id,
										function() { },
										function( message ) {
											console.log( 'mixpanel error' + message );
										}
									);

									navigator.mixpanel.track(
										'Signup success',
										{},
										function() { },
										function( message ) {
											console.log( 'mixpanel error' + message );
										}
									);
									navigator.mixpanel.peopleSet(
										{
											'Platform': Platform.platform,
											'User ID': learnerJson.id,
											'$created': learnerJson.signupDate,
											'$email': learnerJson.email,
											'$first_name': null,
											'$last_name': null,
											'Date of birth': null,
											'Has photo': false,
											'Onboarding completed': false,
											'Tutorial completed': false,
											'Has searched instructors':	false,
											'Has contacted instructor':	false,
											'Has chosen instructor': false,
											'Has reviewed instructor': false,
											'Has read article': false,
											'Has watched video': false,
											'Has tracked drive': false,
											'Total activities':	0,
											'Total drives tracked':	0,
											'Total articles read': 0,
											'Total videos watched':	0,
											'Total progress':	0
										},
										function() { },
										function( message ) {
											console.log( 'mixpanel error' + message );
										}
									);
								} else {
									navigator.mixpanel.identify(
										'' + learnerJson.id,
										function() { },
										function( message ) {
											console.log( 'mixpanel error' + message );
										}
									);

									navigator.mixpanel.track(
										'Login success',
										{},
										function() { },
										function( message ) {
											console.log( 'mixpanel error' + message );
										}
									);

//									navigator.mixpanel.peopleSet(
//										{
//											'Platform': 'Android',
//											'User ID': learnerJson.id,
//											'$created': learnerJson.signupDate,
//											'$email': learnerJson.email,
//											'$first_name': learnerJson.givenName,
//											'$last_name': learnerJson.familyName,
//											'Date of birth': learnerJson.dateOfBirth
//										},
//										function() { },
//										function( message ) {
//											console.log( 'mixpanel error' + message );
//										}
//									);
								}
							}

							if( this.learner.get( 'type' ) == '' || this.learner.get( 'type' ) == 'pending' ) {
								// learner hasn't created a profile yet
								window.app.router.navigate( 'createProfile', true );
							} else {
								window.app.router.navigate( 'feed', true );
							}

						},

						error: function( model, response, options ) {

							self.responseWait = false;
							$( '#loading' ).hide();

							if( navigator.mixpanel ) {
								navigator.mixpanel.track(
									( ( formHash == 'signUp' ) ? 'Signup failed' : 'Login failed' ),
									{
										'Error': response.responseText
									},
									function() { },
									function( message ) {
										console.log( 'mixpanel track NOT OK' + message );
									}
								);
							}

							var title = i18next.t( "signIn.error.title" );
							var buttons = [
								i18next.t( "signIn.signIn.buttons.forgotten" ),
								i18next.t( "signIn.signIn.buttons.signIn" )
							];
							if ( response.responseJSON && response.responseJSON.error ) {
								if ( navigator && navigator.notification ) {
									if ( Platform.platform == 'iOS' ) {
										if ( ( response.status == 403 ) && ( formHash == 'signUp' ) ) {
											// user is already registered
											navigator.notification.confirm(
												i18next.t( "signIn.signIn.alert.alreadyRegistered.message" ), // message
												function( buttonIndex ) {
													switch( buttonIndex ) {
														case 1:
															// forgotten password.
															self.forgotPassword();
															break;

														case 2:
															// log in
															$( '.tab' ).click();

															// use the login form to sign up the user
															var signUpForm = model.toJSON();
															$( 'input[name="email"]', '#signIn' ).val( signUpForm.email );
															$( 'input[name="password"]', '#signIn' ).val( signUpForm.password );

															// submit the form
															$( '#submitSignIn' ).click();

															break;
													}


												},            // callback to invoke with index of button pressed
												i18next.t( "signIn.signIn.alert.alreadyRegistered.title" ), // title
												buttons
											);
										} else {
											navigator.notification.confirm(
												i18next.t( "signIn.signIn.alert.notRecognised.message" ), // message
												function( buttonIndex ){
													if ( buttonIndex == 1 ) {
														self.forgotPassword();
													}
												},
												i18next.t( "signIn.signIn.alert.notRecognised.title" ), // title
												[
													i18next.t( "signIn.signIn.alert.notRecognised.buttons.forgotten" ), // button
													i18next.t( "signIn.signIn.alert.notRecognised.buttons.tryAgain" )
												]
											);
										}
									} else {
										navigator.notification.alert(
											response.responseJSON.error,
											function(){
											},
											title,
											i18next.t( "signIn.buttons.ok" )
										);
									}
								} else {
									alert( title + ' ' + response.responseJSON.error );
								}
							} else {
								console.log( JSON.stringify( response ) );
								console.log( JSON.stringify( model ) );
							}
						}
					} );
				} else {
					self.responseWait = false;
					$( '#loading' ).hide();
				}
			}
			return false;
		},

		/*errorMsg:function( errors, formHash ) {
			_.each( errors, function( error, errorKey ) {
				$( 'input[name="' + errorKey + '"]', '#' + formHash ).after( '<span class="errMsg"> ' + error.message + '</span>' )
			} );
		},*/

		tabs: function( e ) {

			e.preventDefault();
			$( e.currentTarget ).parent().children( '.tab' ).removeClass( 'active' );
			$( e.currentTarget ).addClass( 'active' );

			var active = $( e.currentTarget ).data( 'tab' );

			if( active == 'signup' ) {

				$( '#loginPanel' ).fadeOut( 'fast', function(){
					$( '#signUpPanel' ).fadeIn( 'fast', function() {} );
				} );
				$( '.loginButtons' ).fadeOut( 'fast', function(){
					$( '.signUpButtons' ).fadeIn( 'fast', function() {} );
				} );
			} else {
				$( '#signUpPanel' ).fadeOut( 'fast', function(){
					$( '#loginPanel' ).fadeIn( 'fast', function() {} );
				} );
				$( '.signUpButtons' ).fadeOut( 'fast', function(){
					$( '.loginButtons' ).fadeIn( 'fast', function() {} );
				} );
			}
			/*$( '.tab' ).removeAttr( 'checked' );
			$( '.hideTab' ).hide();

			$( '#' + $( e.target ).parent().attr( 'rel' ) ).show();*/
		},

		getFormData: function( form ) {
			var unindexed_array = form.serializeArray();
			var indexed_array = {};

			$.map( unindexed_array, function( n, i ) {
				indexed_array[ n['name'] ] = n['value'];
			} );

			return indexed_array;
		}

	} );

	return SignInView;
} );
