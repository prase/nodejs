define( [
    'jquery',
    '../../../../bower_components/underscore/underscore',
    'backbone',
		'i18next',
		'models/webContent',
		'hbs!templates/webContent',
		'models/learnerActivity',
		'views/header',
	  'platform'
], function( $, _, Backbone, i18next, WebContentModel, webContentTemplate, LearnerActivityModel, HeaderView, Platform ) {

	var WebContentView = Backbone.View.extend( {

		events: {
			'click #headerBackButton': 'goBack'
		},

		initialize: function() {

		},

		goBack: function(){
			var self = this;
			self.$el.find( '#externalloading' ).hide();
			window.app.router.goBack();
		},

		render: function( action, path ) {

			var self = this;
			if( navigator.screenOrientation ){
				navigator.screenOrientation.set( 'fullSensor' );
			}

			var learnerJSON = window.localStorage.getItem( 'learner' );
			var learner = JSON.parse( learnerJSON );
			var ref = '';
			//window.app.headerView.render( { title: i18next.t( 'webContent.titles.' + action ) } );

			if ( action == 'read' || action == 'watch') {
				ref = decodeURIComponent( path ) + ( ( path.indexOf( '?' ) > -1 ) ? '&' : '?' ) + 'inApp=true';
			} else {
				_.each( learner.paths, function ( pp ) {
					if( pp.name == path ){
						ref = pp.path;
					}
				} );

			}
			//self.model.set( {'html': html} );//.children();
			//console.log(path);
			var compiledTemplate = webContentTemplate( {'url': ref} );
			this.$el.html( compiledTemplate );
			this.$el.find( '#externalloading' ).show();

			var header = new HeaderView();

			header.render( {
				back: Platform.platform == 'iOS' ? false : true,
				background:true
			} );

			this.$el.find( '#header' ).append( header.el );

			this.$el.find('#external').load( function(){
				console.log('has done');
				self.$el.find( '#externalloading' ).hide();
			});
			window.app.router.postRender( this );

			if( ref ) {
				var self = this;
				self.model = new WebContentModel();

				//mark as a complete activity
				if( !_.isUndefined( window.app.lastActivity ) && !_.isNull( window.app.lastActivity ) && ( window.app.lastActivity.type === 'read' || window.app.lastActivity.type === 'watch' ) ){

					if ( navigator.mixpanel ) {

						var params = {};
						switch( window.app.lastActivity.type ) {
							case 'read':
								params = {
									'Has read article': true
								};
								navigator.mixpanel.increment(
									'Total articles read',
									1,
									function() { },
									function( message ) {
										console.log( 'mixpanel error' + message );
									}
								);
								break;

							case 'watch':
								params = {
									'Has watched video': true
								};
								navigator.mixpanel.increment(
									'Total videos watched',
									1,
									function() { },
									function( message ) {
										console.log( 'mixpanel error' + message );
									}
								);
								break;
						}

						navigator.mixpanel.peopleSet(
							params,
							function() { },
							function( message ) {
								console.log( 'mixpanel error' + message );
							}
						);
						navigator.mixpanel.increment(
							'Total activities',
							1,
							function() { },
							function( message ) {
								console.log( 'mixpanel error' + message );
							}
						);
					}

					if ( navigator.mixpanel ) {

						var params = {};
						switch( window.app.lastActivity.type ) {
							case 'read':
								params = {
									'Has read article': true
								};
								navigator.mixpanel.increment(
									'Total articles read',
									1,
									function() { },
									function( message ) {
										console.log( 'mixpanel error' + message );
									}
								);
								break;

							case 'watch':
								params = {
									'Has watched video': true
								};
								navigator.mixpanel.increment(
									'Total videos watched',
									1,
									function() { },
									function( message ) {
										console.log( 'mixpanel error' + message );
									}
								);
								break;
						}

						navigator.mixpanel.peopleSet(
							params,
							function() { },
							function( message ) {
								console.log( 'mixpanel error' + message );
							}
						);
						navigator.mixpanel.increment(
							'Total activities',
							1,
							function() { },
							function( message ) {
								console.log( 'mixpanel error' + message );
							}
						);
					}



					var learnerActivityModel = new LearnerActivityModel();

					learnerActivityModel.set( {
						'id': window.app.lastActivity.id,
						'learnerId': learner.id
					} );

					learnerActivityModel.save( null, {
						success: function( model, response, options ) {
							if ( window.activitiesDb ) {
								window.activitiesDb.updateStatus( window.app.lastActivity.id, 'complete' );
							}

							window.app.lastActivity = null;
						},
						error: function( model, response, options ) {
							console.log( 'problem marking as done ', response );
						}
					});
				}
			}
		}

	} );

	return WebContentView;
} );
