define( [
    'jquery',
    '../../../../bower_components/underscore/underscore',
    'backbone',
		'i18next',
		'models/activity',
		'hbs!templates/activity',
		'views/activityPopup'
], function( $, _, Backbone, i18next, ActivityModel, activityTemplate, ActivityPopupView ) {
	var ActivityView = Backbone.View.extend( {
		tagName: 'div',
		className: 'grid-item activity',
		//<div class="grid-item activity done" data-activity="activity-{{id}}">

		events: {
			'click': 'showPopup'
		},

		initialize: function(){
			this.render();
		},

		render: function() {

			var self = this;
			var params = this.model.toJSON() || {};

			//console.log( 'activity', params );
			//window.activitiesDb.add( params );


			switch( params.activityStatus ) {
				case 'complete':
					params.done = true;
					self.$el.addClass( 'done' );
					self.$el.attr( 'data-toggle', 'modal').attr( 'data-target', "#activityModal" );
					break;

				case 'locked':
					params.locked = true;
					self.$el.addClass( 'locked' );
					break;

				case 'available':
				default:
					params.available = true;
					self.$el.attr( 'data-toggle', 'modal').attr( 'data-target', "#activityModal" );
					break;
			}

			if ( navigator.userAgent.match( /Chrome/gi ) == null ) {
				// only webkit browsers
				self.$el.addClass( params.type );
			}

			if( params.icon ) {
        params.image = params.icon;
      } else {

				switch( params.type ) {
					case 'track':
						params.image = 'img/wheel.png';
						break;

					case 'instructor':
					case 'review':
						params.image = 'img/instructor.png';
						break;

					case 'watch':
						params.image = 'img/watch.png';
						break;

					case 'read':
					default:
						params.image = 'img/book.png';
						break;
				}
			}

			var compiledTemplate = activityTemplate( params );

			self.$el.attr( 'data-activity', 'activity-' + this.model.id ).html( compiledTemplate );
			self.delegateEvents();

			return self;

		},

		showPopup: function( event ) {
			event.preventDefault();

			// unbind all the events on the activity modal if not all the old events will add up
			$( '#activityModal' ).unbind();

			if ( ( typeof window.isOnline == 'undefined' ) || window.isOnline ) {
			//if ( false ) {

				$( '.offlineNotice' ).remove();

				if ( this.model.toJSON().activityStatus != 'locked' ) {
					//console.log(this.model);

					if( this.model.toJSON().type == 'track' ) {
						this.model.set(
							{
								'image': 'img/popover-drive.png',
								'title':i18next.t( "feed.labels.trackADrive" ),
								'description':i18next.t( "feed.labels.trackADriveDescription" )
							}
						);
					} else if( this.model.toJSON().type == 'instructor' ) {
						this.model.set(
							{
								'image': 'img/popover-instructor.png'
							}
						);
					}

					//now resize elements to fit the screen correctly
					var deviceHeight = 0;
					if( typeof( window.innerWidth ) == 'number' ) {
						deviceHeight = Math.round( ( window.innerHeight / 100 ) * 80 );

						this.model.set( { popupHeight: deviceHeight } );
					}

					var activityPopupView = new ActivityPopupView( { model: this.model } );
					activityPopupView.render();

				} else {
					if ( navigator && navigator.notification ) {
						navigator.notification.alert(
							i18next.t( "activity.alert.locked.message" ),
							function() { },
							i18next.t( "activity.alert.locked.title" ),
							i18next.t( "activity.alert.locked.button" )
						);
					} else {
						alert( i18next.t( "activity.alert.locked.message" ) );
					}
				}
			} else {

				if( this.model.toJSON().type == 'track' && this.model.toJSON().activityStatus == "available" ) {
					this.model.set(
						{
							'image': 'img/popover-drive.png',
							'title': i18next.t( "feed.labels.trackADrive" ),
							'description':i18next.t( "feed.labels.trackADriveDescription" )
						}
					);

					//now resize elements to fit the screen correctly
					var deviceHeight = 0;
					if( typeof( window.innerWidth ) == 'number' ) {
						deviceHeight = Math.round( ( window.innerHeight / 100 ) * 80 );

						this.model.set( { popupHeight: deviceHeight } );
					}

					var activityPopupView = new ActivityPopupView( { model: this.model } );
					activityPopupView.render();

				} else {
					$( '#activityModal' ).empty();

					if ( this.model.toJSON().activityStatus == "locked" ) {

						if ( navigator && navigator.notification ) {

							navigator.notification.alert(
								'locked',
								function() { },
								'title',
								'Ok'
							);
						} else {
							alert( 'locked' );
						}

					}

				}



				$( '<div class="page-actions double-btn offlineNotice"><div class="notice">' + i18next.t( "feed.labels.needToBeOnline" ) + '<' + '/div><' + '/div> ' ).appendTo( $( '.page' ) );
			}
		}
	} );

	return ActivityView;
} );
