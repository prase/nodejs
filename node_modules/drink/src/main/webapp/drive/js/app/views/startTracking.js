define( [
	'jquery',
	'../../../../bower_components/underscore/underscore',
	'backbone',
	'i18next',
	'platform',
	'hbs!templates/startTracking',
	'moment'
], function( $, _, Backbone, i18next, Platform, startTrackingTemplate, moment ) {
	var StartTrackingView = Backbone.View.extend( {
		//el: '#app',
		mapCanvas: 'mapCanvas',
		mapEl: '',
		zoomLevel: 15,
		db: null,
		events: {
			'click .showMap': 'showMap',
			'click .hideMap': 'hideMap',
			'click #startTracking': 'startTracking',
			'click #stopTracking': 'stopTracking',
			'click #cancel': 'cancel'
		},


		initialize: function() {
			this.mapEl = '#' + this.mapCanvas;

			this.db = openDatabase('geolocation', '1.0', 'locations', 1 * 1024 * 1024);
			//console.log(this.db);

			/*this.db.transaction(function (tx) {

				tx.executeSql('drop table locations;');

			});*/
			this.db.transaction(function (tx) {

				tx.executeSql('CREATE TABLE IF NOT EXISTS locations (id INTEGER PRIMARY KEY AUTOINCREMENT, latitude, longitude, speed, altitude, accuracy,timestamp);');

			});



			// setup the local indexedDB for ios to use in its callbacks
			/*if( window.app && ( typeof window.app.indexedDB == 'undefined' )){

				console.log( 'Setting up indexedDB database' );
				var version = 4;
				var request = indexedDB.open( 'locations', version );

				// We can only create Object stores in a versionchange transaction.
				request.onupgradeneeded = function(e) {

					var db = e.target.result;

					// A versionchange transaction is started automatically.
					//e.target.transaction.onerror = window.app.indexedDB.onerror;

					if(db.objectStoreNames.contains( 'location' )) {
						db.deleteObjectStore( 'location' );
					}

					var store = db.createObjectStore( 'location',
						{ keyPath: 'timeStamp' });
				};

				request.onsuccess = function(e) {
					console.log(e);
					window.app.indexedDB = e.target.result;

					window.app.indexedDB.addLocation = function( location ) {
						var db = window.app.indexedDB;
						var trans = db.transaction( [ 'location' ], 'readwrite');
						var store = trans.objectStore('location' );
						var request = store.put({
							"location": location,
							"timeStamp" : new Date().getTime()
						});

						trans.oncomplete = function(e) {
							// Re-render all the todo's
							//html5rocks.indexedDB.getAllTodoItems();
						};

						request.onerror = function(e) {
							console.log(e.value);
						};
					};

					window.app.indexedDB.getAllLocations = function() {

						var db = window.app.indexedDB;
						var trans = db.transaction( [ 'location' ], 'readwrite');
						var store = trans.objectStore( 'location' );

						// Get everything in the store;
						var keyRange = IDBKeyRange.lowerBound(0);
						var cursorRequest = store.openCursor(keyRange);

						cursorRequest.onsuccess = function(e) {
							var result = e.target.result;
							if(!!result == false)
								return;

							console.log( 'Location from db: '+ result.value );
							result.continue();
						};

						cursorRequest.onerror = window.app.indexedDB.onerror;
					};

					//now test entering one up
					//window.app.indexedDB.addLocation("testing");
					console.log("------------going to print -------------1");
					window.app.indexedDB.getAllLocations();
				};

				request.onerror = function (e){
					console.log(e);
				}
			}

			if( window.app && typeof window.app.indexedDB != 'undefined' ){
				console.log("------------going to print -------------2");
				window.app.indexedDB.getAllLocations();
			}*/

		},

		render: function( router ) {

			if( typeof analytics !== 'undefined' ){
				analytics.trackView( 'Go Driving' );
			}

			// clear the body
			$( 'body' ).removeClass().addClass( 'full-page tracking-page' );

			var self = this;

			var top = 0;
			if ( Platform.platform == 'iOS' ) {
				top = 48;
			} else {
				top = -21; // 59 for Android
			}

			var data = {
				deviceWidth: $( window ).width(),
				deviceHeight: $( window ).height() - 80 - top,
				top: top
			};

			//window.app.headerView.render( { title: i18next.t( "startTracking.startTracking.headerTitle" ) } );

			var compiledTemplate = startTrackingTemplate( data );
			this.$el.html( compiledTemplate );

			// hide the tracking page
			$( '.stopTracking' ).hide();

			if ( typeof plugin != 'undefined' ) {
				plugin.google.maps.Map.isAvailable( function( isAvailable, message ) {
					if ( isAvailable ) {
						self.renderMap();
					} else {
						alert( 'miDrive: ' + message );
					}
				} );
			}

			router.postRender( self );

			$( 'body' ).removeClass();

			if ( Platform.platform == 'iOS' ) {
				$( 'body' ).addClass( 'full-page' );
        $( '.page-center' ).css( 'background-image', 'none' );
        $( '.page-center' ).css( 'border-top', '20px solid black' );
			}
		},

		renderMap: function() {
			var self = this;

			if ( !window.app.map ) {
				window.app.map = plugin.google.maps.Map.getMap();
			}

			var options = {
				timeout: 5000
			};

			navigator.geolocation.getCurrentPosition(
				function( position ) {
					console.log(position.coords.latitude);

//					alert(
//						'Latitude: '	+ position.coords.latitude + '\n' +
//						'Longitude: '         + position.coords.longitude         + '\n'
//						'Altitude: '          + position.coords.altitude          + '\n' +
//						'Accuracy: '          + position.coords.accuracy          + '\n' +
//						'Altitude Accuracy: ' + position.coords.altitudeAccuracy  + '\n' +
//						'Heading: '           + position.coords.heading           + '\n' +
//						'Speed: '             + position.coords.speed             + '\n' +
//						'Timestamp: '         + position.timestamp                + '\n'
//					);

					var point = new plugin.google.maps.LatLng( position.coords.latitude - 0, position.coords.longitude - 0 );
					var div = document.getElementById( self.mapCanvas );
					window.app.map.setDiv( div );

					window.app.map.setOptions( {
						'camera': {
							'latLng': point,
							'zoom': self.zoomLevel
						}
					} );

					window.app.map.setVisible( true );
					window.app.map.refreshLayout();

					// start marker
					window.app.map.addMarker( {
						'position': point,
						'title': "Current position"
					} );


				},
				function( error ) {


					if ( navigator && navigator.notification ) {
						if( error.code == '1' ){

							navigator.notification.alert(
								i18next.t( "startTracking.startTracking.noTrackAlert.message" ),
								function() {
									window.app.router.navigate( '/feed', true );
								},         // callback
								i18next.t( "startTracking.startTracking.noTrackAlert.title" ),
								i18next.t( "startTracking.startTracking.noTrackAlert.button" )
							);
						}
						else if( error.code == '2' ){
							console.log('error ',error.code);
							console.log('error with',JSON.stringify( error ));
							navigator.notification.alert(
								i18next.t( "startTracking.startTracking.noTrackFind.message" ),
								function() {
									window.app.router.navigate( '/feed', true );
								},         // callback
								i18next.t( "startTracking.startTracking.noTrackFind.title" ),
								i18next.t( "startTracking.startTracking.noTrackFind.button" )
							);
						}
						else if( error.code == '3' ){ //timeout getting location - like on s3 mini
							var div = document.getElementById( self.mapCanvas );
							window.app.map.setDiv( div );

							window.app.map.setOptions( {
								'camera': {
									'latLng': new plugin.google.maps.LatLng( 52.95, -1.158 ),
									'zoom': 5
								}
							} );

							window.app.map.setVisible( true );
							window.app.map.refreshLayout();
						}
						else{

							navigator.notification.alert(
									i18next.t( "startTracking.startTracking.noTrackAlert.message" ),
									function() {
										window.app.router.navigate( '/feed', true );
									},         // callback
									i18next.t( "startTracking.startTracking.noTrackAlert.title" ),
									i18next.t( "startTracking.startTracking.noTrackAlert.button" )
								);


						}

					}
					else {
								alert( i18next.t( "startTracking.startTracking.noTrackAlert.message" ) );
								window.app.router.navigate( '/feed', true );
					}

				}

				,
				options
			)
    },

		showMap: function( event ) {
			event.preventDefault();

			window.app.map.setVisible( true );
			window.app.map.refreshLayout();
		},

		hideMap: function( event ) {
			event.preventDefault();

			window.app.map.setVisible( false );

			window.app.map.toDataURL( function( imageData ) {
				$( '<img/>', {
					src: imageData
				} ).appendTo( '#trackingMapCanvas' );
				//$( '#console' ).html( imageData );
			} );
		},

		/*geoPos: function( position ) {
			var element = document.getElementById( 'console' );
    	element.innerHTML = 'Latitude: '  + position.coords.latitude      + '<br />'
				+ 'Longitude: ' + position.coords.longitude     + '<br />'
				+ '<hr />'      + element.innerHTML;


			// store the geo location into the DB
			//this.addPosition( position );
			var self = this;
			var location = position;
			window.app.db.transaction( function( tx ) {
					if ( ( location.coords.latitude != null ) && ( location.coords.longitude != null ) ) {
						var query = 'INSERT INTO route ( latitude, longitude, altitude, horizontal, vertical, speed, timestamp ) VALUES ( '
							+ location.coords.latitude + ', '
							+ location.coords.longitude + ', '
							+ ( ( 'undefined' == typeof location.coords.altitude ) ? '-1' : location.coords.altitude ) + ', '
							+ ( ( 'undefined' == typeof location.horizontal ) ? '-1' : location.horizontal ) + ', '
							+ ( ( 'undefined' == typeof location.vertical ) ? '-1' : location.vertical ) + ', '
							+ ( ( ( 'undefined' == typeof location.coords.speed ) || !location.coords.speed ) ? '-1' : location.coords.speed ) + ', '
							+ location.timestamp
							+ ')';
						console.log( query );
						tx.executeSql( query );
					}
				},
				function( err ) {
					console.log( 'Error processing SQL: ' + err.code + ' message: ' + err.message );
					//alert( 'Error processing SQL: ' + err.code + ' message: ' + err.message );
				},
				function() {
					console.log( 'add position success ' );
				}
			);

		},
		geoPosError: function( error ) {
			var element = document.getElementById( 'console' );
    	element.innerHTML = 'error: '  + error.code      + '<br />'
				+ 'Message: ' + error.message     + '<br />'
				+ '<hr />'      + element.innerHTML;
		},
		*/

		stopTracking: function() {

			if ( navigator && navigator.notification ) {

				if( navigator.mixpanel ) {
					navigator.mixpanel.track(
						'Track stop',
						{
							//'Duration': 'The amount of time elapsed since the "start tracking" button was tapped'
						},
						function() { },
						function( message ) {
							console.log( message );
						}
					);
				}

				var buttons = [
					i18next.t( "startTracking.stopTracking.confirmation.buttons.stop" ),
					i18next.t( "startTracking.stopTracking.confirmation.buttons.cancel" )
				];
				var buttonStopIndex = 1;

				if ( Platform.platform == "iOS" ) {
					// change the order of the buttons
					buttons.reverse();
					buttonStopIndex = 2;
				}
				navigator.notification.confirm(
					i18next.t( "startTracking.stopTracking.confirmation.message" ),
					function( buttonIndex ) {
						if ( buttonIndex == buttonStopIndex ) {
							// only when you click on STOP
							if( navigator.mixpanel ) {
								navigator.mixpanel.track(
									'Track stop confirm',
									{},
									function() { },
									function( message ) {
										console.log( message );
									}
								);
							}

							$( '.page' ).css( 'background-color', 'rgba(0,0,0,0)' );

							if ( window.app.bgGeo ) {
								window.app.bgGeo.stop();
							}

							window.localStorage.setItem( 'stillTracking', 'not-tracking' );
							// only when you click on STOP
//							if( navigator.mixpanel ) {
//								navigator.mixpanel.track( 'Track Stop',
//									{}, function() {
//
//									}, function( message ) {
//										console.log( message )
//									}
//								);
//							}
							if( window.plugin && window.plugin.notification ) {
								window.plugin.notification.local.getScheduledIds( function (scheduledIds) {
									console.log('Scheduled IDs: ' + scheduledIds.join( ' ,' ) );
								} );
								window.plugin.notification.local.cancel( 1, function() {
									console.log( "notification canceled" );
								} );

							}
							window.app.router.navigate( '/saveDrive', true );
						} else {

							if( navigator.mixpanel ) {
								navigator.mixpanel.track(
									'Track stop cancel',
									{},
									function() { },
									function( message ) {
										console.log( message );
									}
								);
							}
						}
					},            // callback to invoke with index of button pressed
					i18next.t( "startTracking.stopTracking.confirmation.title" ),
					buttons
				);
			} else {
				alert( 'Tracking stopped' );
				window.app.router.navigate( '/saveDrive', true );
			}
		},

		startTracking: function() {

			var self = this;

			//first ensure all drives are stopped and flag is wiped
			window.localStorage.setItem( 'stillTracking', 'not-tracking' );
			if ( window.app.bgGeo ) {
				window.app.bgGeo.stop();
			}
			//clear local notification
			window.plugin.notification.local.cancel( 1, function() {
				console.log( "notification canceled" );
			} );
			//then wipe the database on both platforms
			if ( Platform.platform == 'Android' && window.app.bgGeo ) {
				window.app.bgGeo.deleteAllPoints(
					function() {
						// success
						//alert( 'cleared the route' );

						//window.app.router.navigate( '/drives/' + drive.id, true );
					},
					function( error ) {
						// error
						//alert( 'could not clear the route!!!' );
						//window.app.router.navigate( '/drives/' + drive.id, true );
					}
				);
			} else {
				try{
					var db = openDatabase('geolocation', '1.0', 'locations', 1 * 1024 * 1024);
					db.transaction(function (tx) {
						tx.executeSql('drop table  IF EXISTS  locations;');
					});
					db.transaction(function (tx) {

						tx.executeSql('CREATE TABLE IF NOT EXISTS locations (id INTEGER PRIMARY KEY AUTOINCREMENT, latitude, longitude, speed, altitude, accuracy,timestamp);');

					});
				}
				catch(e){
					console.log( 'No WebSQL capability' );
				}
			}

			// clean up the body
			$( 'body' ).removeClass().addClass( 'full-page-black' );

			if ( Platform.platform == 'iOS' ) {
				$( '#header' ).hide();
				$( '.mini-header').hide();
				$( '.page' ).css( 'background-color', 'rgba(0,0,0,0.8)' );
			}

			if( navigator.mixpanel ) {
				navigator.mixpanel.track(
					'Track start',
					{},
					function() { },
					function( message ) {
						console.log( message );
					}
				);
			}

			window.navigator.geolocation.getCurrentPosition( function( location ) {
        console.log( 'Location from Phonegap' );
    	} );

			if ( !window.app.bgGeo && window.plugins ) {
    		window.app.bgGeo = window.plugins.backgroundGeoLocation;
			}

			var callbackFn = function( location ) {

				//console.log('callback '+JSON.stringify( location ));
				/*
				var locat = {
					latitude: location.latitude,
					longitude: location.longitude,
					speed: location.velocity,
					altitude: location.altitude,
					accuracy: {
						horizontal:-1,
						vertical: -1,
						accuracy: location.accuracy
					},
					timestamp:
				};*/

				//console.log('going to send '+JSON.stringify( locat ));
			//from the iphone	//{"velocity":0,"longitude":1.184297790751964,"altitude":16.39278793334961,"timestamp":1410275425486.577,"altitudeAccuracy":3,"accuracy":5,"heading":-1,"latitude":51.08115465385008}
				var lat = location.latitude;
				var long = location.longitude;
				var speed = location.velocity;
				var alt = location.altitude;
				var acc = location.accuracy;
				var time = moment( location.timestamp ).format( 'YYYY-MM-DDTHH:mm:ss+00:00' );

				self.db.transaction(function (tx) {
					tx.executeSql( 'INSERT INTO locations (latitude, longitude, speed, altitude, accuracy,timestamp) VALUES ( ?, ?, ?, ?, ?, ? )', [ lat, long, speed, alt, acc, time ] );
				});

				////
					// IMPORTANT:  You must execute the #finish method here to inform the native plugin that you're finished,
					//  and the background-task may be completed.  You must do this regardless if your HTTP request is successful or not.
					// IF YOU DON'T, ios will CRASH YOUR APP for spending too much time in the background.
					//
					//
				window.app.bgGeo.finish();

			};

			var failureFn = function( error ) {
					console.log( 'BackgroundGeoLocation error' + error );
			}

			if ( window.app.bgGeo ) {

				// We are not posting directly from the plugin so url and params are disregarded
				window.app.bgGeo.configure( callbackFn, failureFn, {
						url: 'http://only.for.android.com/update_location.json', // <-- only required for Android; ios allows javascript callbacks for your http
						params: {                                               // HTTP POST params sent to your server when persisting locations.
								auth_token: 'user_secret_auth_token',
								foo: 'bar'
						},
            notificationTitle: 'Background tracking',   // <-- android only, customize the title of the notification
            notificationText: 'ENABLED',                // <-- android only, customize the text of the notification
            activityType: 'AutomotiveNavigation', //required by ios
						desiredAccuracy: 10,////THESE SETTINGS DO NOT SEEM TO WORK HERE - USE THE JS IN THE PLUGIN INSTEAD FOR NOW
						stationaryRadius: 2,////THESE SETTINGS DO NOT SEEM TO WORK HERE - USE THE JS IN THE PLUGIN INSTEAD FOR NOW
						distanceFilter: 5,////THESE SETTINGS DO NOT SEEM TO WORK HERE - USE THE JS IN THE PLUGIN INSTEAD FOR NOW
						debug: false // <-- enable this hear sounds for background-geolocation life-cycle.
				});

				// Turn ON the background-geolocation system.  The user will be tracked whenever they suspend the app.
				window.app.bgGeo.start();

				window.localStorage.setItem( 'stillTracking', 'tracking' );
				var now = new Date().getTime(),_twohoursfifteen_from_now = new Date(now + 60 * 1000 * 135);//135
				if( window.plugin.notification ){
					window.plugin.notification.local.add({
							id:      1,
							title:   i18next.t( "startTracking.labels.stillTrackingTitle" ),
							message: i18next.t( "startTracking.labels.stillTracking" ),
							date:    _twohoursfifteen_from_now
					});
				}
			}

			$( '.startTracking' ).hide();
			$( '.stopTracking' ).show();
      $( '.page-center' ).css( 'background', '#333' );

			if ( window.app.map ) {
				window.app.map.setVisible( false );
			}

			//window.app.headerView.render( { title: i18next.t( "startTracking.stopTracking.headerTitle" ) } );
		},

		back: function() {
			window.app.router.goBack();
		},

		cancel: function() {

			if( navigator.mixpanel ) {
				navigator.mixpanel.track(
					'Track cancel',
					{},
					function() { },
					function( message ) {
						console.log( message );
					}
				);
			}

			window.localStorage.setItem( 'stillTracking', 'not-tracking' );
			window.app.router.navigate( '/feed', true );
		}


	} );

	return StartTrackingView;
} );
