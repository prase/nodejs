"use strict";
define( [
	'jquery',
	'../../../../bower_components/underscore/underscore',
	'backbone',
	'i18next',
	'collections/search',
	'models/search',
	'views/search',
	'hbs!templates/search',
	'hbs!templates/instructorSearch',
	'views/header'
], function( $, _, Backbone, i18next, SearchCollection, SearchModel, SearchView, searchTemplate, instructorSearchTemplate, HeaderView ) {
	var InstructorSearchView = Backbone.View.extend( {

		isLoading: false,
		isInit: true,
		events: {
			'keyup #instructorSearch': 'searchInstructors',
			'click .currentLocation': 'getInstructorsByCurrentLocation'
		},

		initialize: function() {
			this.isLoading = false;
			this.isInit = true;
			if( navigator.mixpanel ) {

				var referrer = 'Profile';
				if( !_.isUndefined( window.app.lastActivity ) && !_.isNull( window.app.lastActivity ) && ( window.app.lastActivity.type === 'instructor' ) ) {
					referrer = 'Journey';
				}

				navigator.mixpanel.track(
					'Instructor find',
					{
						'Referrer': referrer
					},
					function() { },
					function( message ) {
						console.log( message );
					}
				);
			}
		},

		searchInstructors: _.throttle( function () {

			var searchTerm = $( '#instructorSearch' ).val();
			var self = this;
			self.searchCollection = new SearchCollection();
			self.searchResultsViews = [];

			if( searchTerm.length > 2 ) {

				self.searchCollection.searchTerm = searchTerm;

				self.searchCollection.fetch( {

					success: function( collection, response ) {

						if( navigator.mixpanel ) {
							navigator.mixpanel.track(
								'Instructor searched',
								{
									'Type': 'Text',
									'Term': searchTerm
								},
								function() { },
								function( message ) {
									console.log( message );
								}
							);
							navigator.mixpanel.peopleSet(
								{
									'Has searched instructors': true
								},
								function() { },
								function( message ) {
									console.log( 'mixpanel error' + message );
								}
							);
						}

						var results = _.first( collection.models, 20 );
						self.searchResultsViews = [];

						_.each( results , function( item ) {
							var searchView = new SearchView( {
								model: item
							} );

							self.searchResultsViews.push( searchView );
						} );

						// clear the old results
						$( '.autocomplete' ).empty();
						$( '.currentLocation' ).hide();

						// list all the results
						_.each( self.searchResultsViews, function ( iss ) {
							self.$el.find( '.autocomplete' ).append( iss.render( self ).el );
						} );

					},

					error: function( collection, response ) {
						console.log( response.responseText );
					}
				} );
			} else {
				// display the current position
				$( '.currentLocation' ).show();

				// clear the old results
				$( '.autocomplete' ).empty();
			}
		}, 500 ),

		getInstructorsByCurrentLocation: function( event ) {
			if ( event ) {
				event.preventDefault();
			}
			var self = this;

			if( navigator.mixpanel ) {
				navigator.mixpanel.track(
					'Instructor searched',
					{
						Type: 'Current location',
						Term: ''
					},
					function() { },
					function( message ) {
						console.log( message );
					}
				);
				navigator.mixpanel.peopleSet(
					{
						'Has searched instructors': true
					},
					function() { },
					function( message ) {
						console.log( 'mixpanel error' + message );
					}
				);
			}

			window.app.router.navigate( '/instructors', true );

		},

		render: function( data, initialLoad ) {

			if( typeof analytics !== 'undefined' ) {
				analytics.trackView( 'Instructor Search' );
			}

			var self = this;
			var instructorViews = data || {};

			if( initialLoad === true ) {
				var compiledTemplate = instructorSearchTemplate();
				this.$el.html( compiledTemplate );
			}


			if( initialLoad === true  ) {
				var header = new HeaderView();

				header.render( {
					back: true,
					title: i18next.t( "instructors.title" )
				} );

				this.$el.find( '#header' ).append( header.el );

				if( self.isInit == true ) {
					self.isInit = false;
					window.app.router.postRender( self );
				} else {
					window.app.router.hideLoader();
				}
			}
		}

	} );

	return InstructorSearchView;
} );
