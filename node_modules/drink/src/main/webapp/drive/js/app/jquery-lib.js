( function( root, factory ) {
  // Set up Backbone appropriately for the environment.
  if ( typeof define === 'function' && define.amd ) {
    // AMD
    define( ['jquery', '../../../bower_components/underscore/underscore', 'backbone', 'config', 'i18next'], function( $, _, Backbone, Config, i18next ) {
      factory( root, $, _, Backbone, Config, i18next );
    } );
  } else {
    // Browser globals
    factory( root, root.$, root._, root.Backbone, root.Config, root.i18next );
  }
}( this, function( root, $, _, Backbone, Config, i18next ) {

	// serialize an object, mainly used on forms
	$.fn.serializeObject = function() {
		var o = Object.create( null ),
			elementMapper = function( element ) {
				element.name = $.camelCase( element.name );
				return element;
			},
			appendToResult = function( i, element ) {
				var node = o[element.name];

				if ( element.value !== null && element.value != '' ) {
					if ( 'undefined' != typeof node && node !== null ) {
						o[element.name] = node.push ? node.push( element.value ) : [node, element.value];
					} else {
						o[element.name] = element.value;
					}
				}
			};

		$.each( $.map( this.serializeArray(), elementMapper ), appendToResult );
		return o;
	};


	// stopped tracking the 404s on Raygun
	/*$( document ).ajaxError( function( event, jqxhr, settings, thrownError ) {
		if ( jqxhr.status == 404 ) {
			event.stopImmediatePropagation();
			//console.log( ' -- 404 -- ' );

		}
	});*/


	// add the headers
	var sync = Backbone.sync;
	Backbone.sync = function( method, model, options ) {
		var originalError = options.error;

		options.beforeSend = function ( xhr ) {

			//putting this here for now as getting issues that window.app was null on the first page load
			var accessToken = window.localStorage.getItem( 'accessToken' );

				// email token
			if ( accessToken != '' && !_.isNull( accessToken ) ) {
				//console.log(accessToken);
				xhr.setRequestHeader( 'x-email-auth-token', accessToken );
			}
			// API version
			if ( Config && Config.apiVersion ) {
				xhr.setRequestHeader( 'x-version', Config.apiVersion );
			}
		};

		options.error = function( xhr, textStatus, errorThrown ) {
			if ( xhr.responseJSON && xhr.responseJSON.errorCode && xhr.responseJSON.errorCode == '0001' ) {
				// stop the APP here
				console.log( ' -- WRONG VERSION of the API -- ' );

				$( '<span/>' ).addClass( 'wrongApiVersion' ).text( i18next.t( 'wrongApiVersion' ) ).appendTo( '#wrapper' );

				if ( window.app && window.app.router ) {
					// remove the spinner
					window.app.router.postRender();
				}
			} else {
				// leave the normal error to go through
				originalError( xhr, textStatus, errorThrown );
			}
		};

		//console.log( method, model, options );


		if ( ( typeof window.isOnline == 'undefined' ) || window.isOnline ) {
			$( '.offlineNotice' ).remove();

			sync( method, model, options );
		} else {
			$( '<div class="page-actions double-btn offlineNotice"><div class="notice">' + i18next.t( "feed.labels.needToBeOnline" ) + '<' + '/div><' + '/div> ' ).appendTo( $( '.page' ) );

		}
	};

} ) );
