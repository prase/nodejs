( function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function( child, parent ) { 
			for ( var key in parent ) { 
				if ( __hasProp.call( parent, key ) ) 
					child[key] = parent[key]; 
			} 
			function ctor() { 
				this.constructor = child; 
			} 
			ctor.prototype = parent.prototype; 
			child.prototype = new ctor(); 
			child.__super__ = parent.prototype; 
			return child; 
		};

  define( function(require, exports, module ) {
    var $, Backbone, MiDriveApp, MiDriveRouter, _, config, lastActivityId;
		var HeaderView;
		var indexedDB = null; //for storing ios locations
		
    require( 'hammerjs' );
    require( 'jquery-hammerjs' );
    require( 'backbone-hammer' );
		require( 'validator' );
		require( 'lib' );
		require( 'jquery-validation' );
		require( 'starRating' );
		require( 'moment' );
    require( 'moment-isoduration' );
    require( 'bootstrap' );
		
		var Fastclick = require( 'fastclick' );
		Fastclick.attach( document.body );

		config = require( 'config' );
		lastActivity = null;
		
		// tests for env, device, size
		
    _ = require( 'underscore' );
    $ = require( 'jquery' );
    Backbone = require( 'backbone' );
    MiDriveRouter = require( 'routers/midrive_router' );
    
    HeaderView = require( 'views/header' );
		
		
		Backbone.Notifications = {};
		_.extend(Backbone.Notifications, Backbone.Events);

		
    /*
      We'll use this file to boot up our application. It's extending Backbone.View, but
      isn't really used as a view at all. You'll want to replace all Backbone code in
      this project with your own, it only exists to show you how requiring various
      components in the application work together and it not intended to be an example
      of a well structured or well built application. A sensible application architecture
       * is up to you, as it's not something Backbone really prescribes.
     */
    return MiDriveApp = ( function( _super ) {
      __extends( MiDriveApp, _super );
			var self = this;
			
      function MiDriveApp() {
        return MiDriveApp.__super__.constructor.apply( this, arguments );
      }
			
      MiDriveApp.prototype.initialize = function() {
        this.router = new MiDriveRouter( {
          app: this
        } );
        
				// load the config file
				this.config = config;
				
				if ( config.apiVersion ) {
					this.apiVersion = config.apiVersion;
				}
				
				//this.stateHistory = [];
				//console.log(window.app);
				// this is really dirty
				//this.headerView = new HeaderView;
				//window.app.config = config;
				
				window.onhashchange = function() {
					//ensure modals are shut on back button
					$( '#menuModal' ).modal( 'hide' );
				}
				
        return Backbone.history.start();
      };
			
      return MiDriveApp;

    } )( Backbone.View );
  } );

} ).call( this );
