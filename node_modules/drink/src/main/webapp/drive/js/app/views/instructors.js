"use strict";
define( [
	'jquery',
	'../../../../bower_components/underscore/underscore',
	'backbone',
	'platform',
	'collections/instructors',
	'hbs!templates/instructors',
	'views/instructor',
	'models/instructor',
	'collections/search',
	'models/search',
	'views/search',
	'hbs!templates/search',
	'views/header',
	'i18next'
], function( $, _, Backbone, Platform, InstructorsCollection, instructorsTemplate, InstructorView, InstructorModel, SearchCollection, SearchModel, SearchView, searchTemplate, HeaderView, i18next ) {
	var InstructorsView = Backbone.View.extend( {

		isLoading: false,
		isInit: true,
		events: {
			'keyup #instructorSearch': 'searchInstructors',
			'click .fa-crosshairs': 'getInstructorsByCurrentLocation'
		},

		initialize: function() {

			this.isLoading = false;
			this.instructorCollection = new InstructorsCollection();
			this.isInit = true;

			if( navigator.mixpanel ) {

				var referrer = 'Profile';
				if( !_.isUndefined( window.app.lastActivity ) && !_.isNull( window.app.lastActivity ) && ( window.app.lastActivity.type === 'instructor' ) ) {
					referrer = 'Journey';
				}

				navigator.mixpanel.track(
					'Instructor find',
					{
						'Referrer': referrer
					},
					function() { },
					function( message ) {
						console.log( message );
					}
				);
			}
		},

		remove: function(){

			this.$el.find('#scrollable').off( 'scroll' );

		},

		townSearch: function( model ) {

			var self = this;
			this.isLoading = true;
			$( 'article', '#instructors' ).remove();
			$( '.autocomplete' ).empty();
			window.localStorage.setItem( 'location', model.latitude + ',' + model.longitude );
			self.instructorCollection.latitude = model.latitude;
			self.instructorCollection.longitude = model.longitude;
			self.instructorCollection.queryString = '';

			// set the search box
			self.$el.find( '#instructorSearch' ).val( model.name );

			//self.instructorCollection.urlFromSearch = model.path.path;
			this.instructorViews = [];
			self.loadResults( false );
		},

		searchInstructors: _.throttle( function () {

			var searchTerm = $( '#instructorSearch' ).val();
			var self = this;
			self.searchCollection = new SearchCollection();
			self.searchResultsViews = [];

			if( searchTerm.length > 2 ) {

				self.searchCollection.searchTerm = searchTerm;

				self.searchCollection.fetch( {

					success: function( collection, response ) {

						if( navigator.mixpanel ) {
							navigator.mixpanel.track(
								'Instructor searched',
								{
									'Type': 'Text',
									'Term': searchTerm
								},
								function() { },
								function( message ) {
									console.log( message );
								}
							);
							navigator.mixpanel.peopleSet(
								{
									'Has searched instructors': true
								},
								function() { },
								function( message ) {
									console.log( 'mixpanel error' + message );
								}
							);
						}

						var results = _.first( collection.models, 5 );
						self.searchResultsViews = [];

						_.each( results , function( item ) {
							var searchView = new SearchView( {
								model: item
							} );

							self.searchResultsViews.push( searchView );
						} );

						// clear the old results
						$( '.autocomplete' ).empty();

						// list all the results
						_.each( self.searchResultsViews, function ( iss ) {
							self.$el.find( '.autocomplete' ).append( iss.render( self ).el );
						} );

					},

					error: function( collection, response ) {
						console.log( response.responseText );
					}
				} );
			}
		}, 500 ),

		getInstructorsByCurrentLocation: function( event ) {
			var loc = '';
			if ( event ) {
				loc = $( event.target ).data( 'location' );
				event.preventDefault();
			}
			var self = this;

			if( navigator.mixpanel ) {
				navigator.mixpanel.track(
					'Instructor searched',
					{
						Type: 'Current location',
						Term: ''
					},
					function() { },
					function( message ) {
						console.log( message );
					}
				);
				navigator.mixpanel.peopleSet(
					{
						'Has searched instructors': true
					},
					function() { },
					function( message ) {
						console.log( 'mixpanel error' + message );
					}
				);
			}

			// for use without cordova
			var lat = '50.5';
			var long = '-0.127';

			var options = {
				timeout: 10000
			};

			if( loc == 'here' ) {
				window.app.router.showLoader();

				if ( navigator.geolocation ) {
					// get location from cordova
					navigator.geolocation.getCurrentPosition( function( position ) {
						lat = '' + position.coords.latitude;
						long = '' + position.coords.longitude;

						//window.localStorage.setItem( 'location', lat + ',' + long );
						self.getInstructorsByLatLong( lat, long, true );
					}, function( error ) {
						self.getInstructorsByLatLong( lat, long, true );
					}, options
					);
				} else {
					this.getInstructorsByLatLong( lat, long, true );
				}

			} else {

				var locat = window.localStorage.getItem( 'location' );

				if ( !_.isNull( locat ) && !_.isUndefined( locat ) ) {
					var ll = locat.split( ',' );
					self.getInstructorsByLatLong( ll[0], ll[1], true );

				} else if ( navigator.geolocation ) {
					// get location from cordova

					navigator.geolocation.getCurrentPosition( function( position ) {

						lat = '' + position.coords.latitude;
						long = '' + position.coords.longitude;
						self.getInstructorsByLatLong( lat, long, true );
					},function( error ) { self.getInstructorsByLatLong( lat, long, true ); }, options );
				} else {

					this.getInstructorsByLatLong( lat, long, true );
				}
			}
		},

		getInstructorsByLatLong: function( latitude, longitude, initialLoad ) {

			if( _.isUndefined( initialLoad ) ) {
				initialLoad = true;
				console.log( "initial" );
			}

			var self = this;

			if( _.isUndefined( self.instructorCollection ) || initialLoad ){
				self.instructorCollection = new InstructorsCollection( latitude, longitude );
			} else {

				self.instructorCollection.latitude = latitude;
				self.instructorCollection.longitude = longitude;
			}


    	this.instructorViews = [];

			this.loadResults( initialLoad );
		},

		loadResults: function( initialLoad ) {

			var self = this;

			// work out first if the user has an instructor setup - from local storage
			// (we will check if has changed in api once they get to the MyInstructor View)
			var instructorString = window.localStorage.getItem( 'instructor' );

			var loadInstructors = true;
			/*

			if(instructorString && instructorString != ''){
				var instructor = JSON.parse( instructorString );
				console.log(instructor);
				if(instructor && instructor.id != null ){
					loadInstructors = false;
					window.app.router.navigate( '/myInstructor', true );
				}
			}*/

			if( loadInstructors ) {

				this.instructorCollection.fetch( {
					success: function( collection, response ) {
						_.each( collection.toJSON(), function (item) {
              item.transmission = item.transmission.charAt(0).toUpperCase() + item.transmission.slice(1);
							self.instructorViews.push( new InstructorView ({
								model : item
							} ) );
						} );

						self.render( self.instructorViews, initialLoad );
						self.isLoading = false;
					},

					error: function( collection, response ) {
						console.error( "Error fetching collection: " + response.responseText );
						self.isLoading = false;
					}

				} );
			}
		},

		render: function( data, initialLoad ) {

			if( typeof analytics !== 'undefined' ) {
				analytics.trackView( 'Instructor Search' );
			}

			var self = this;
			var instructorViews = data || {};

			if( initialLoad === true ) {
				var compiledTemplate = instructorsTemplate();
				this.$el.html( compiledTemplate );
			}

			_.each( instructorViews, function( instructorView ) {
				self.$el.find( '#instructors' ).append( instructorView.el );
			} );



			if( initialLoad === true  ) {
				var header = new HeaderView();

				header.render( {
					back: true,
					title: ( $( '#instructorSearch' ).val() || '' ).length  > 2 ? 'Search Results' : 'Instructors near you'
				} );

				this.$el.find( '#header' ).append( header.el );

				_.bindAll( this, 'checkScroll' );
				this.$el.find('#scrollable').scroll(this.checkScroll);

				if( self.isInit == true ) {
					self.isInit = false;
					window.app.router.postRender( self );
				} else {
					window.app.router.hideLoader();
				}

				if ( Platform.platform == 'iOS' ) {
					$( '.search-container' ).hide();
				}
			}
		},

    checkScroll: function ( ) {

			// scroll event is bound onto #app so we need to make sure it only fires on the instructor page
			var locationArray = Backbone.history.location.href.split( '#' );
			if( locationArray.length > 1 ) {
				var loc = locationArray[1];

				if( /^instructors/.test( locationArray[1] ) ) {

					var triggerPoint = Math.round( $( window ).height() * .66 );
      		if( this.instructorCollection.newUrl && !this.isLoading && this.el.scrollTop + this.el.clientHeight + triggerPoint > this.el.scrollHeight ) {
						//console.log('the scroll top is '+this.el.scrollTo+' and the client height is '+this.el.clientHeight+" and the scroll height is "+this.el.scrollHeight);
      			//this.instructorCollection.URL = this.instructorCollection.nextPage;

      			this.loadResults( false );
						this.instructorCollection.newUrl = false;
      		}
				}
			}

    }


	} );

	return InstructorsView;
} );
