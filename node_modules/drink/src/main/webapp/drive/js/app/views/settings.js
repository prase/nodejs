define( [
	'jquery',
	'../../../../bower_components/underscore/underscore',
	'backbone',
	'i18next',
	'collections/settings',
	'views/setting',
	'hbs!templates/settings',
	'views/header'
], function( $, _, Backbone, i18next, SettingsCollection, SettingView, settingsTemplate, HeaderView ) {

	var SettingsView = Backbone.View.extend( {

		initialize: function() {
			this.settingsCollection = new SettingsCollection;
		},

		render: function( router ) {

			if( typeof analytics !== 'undefined' ) {
				analytics.trackView( 'Settings' );
			}

			var self = this;
			var learnerString = window.localStorage.getItem( 'learner' );
			var learner = JSON.parse( learnerString );

			this.settingsCollection.learnerId = learner.id;

			//window.app.token = learner.accessToken;

			this.settingsCollection.fetch( {

				success: function( collection, response ) {

					// store the settings
					window.localStorage.setItem( 'settings', JSON.stringify( collection ) );

					self.renderCollection( collection );

					// hide the spinner
					router.postRender( self );
				},

				error: function( collection, response ) {

					// use the local storage
					var storedSettingsString = window.localStorage.getItem( 'settings' );
					var storedSettings = {};
					try {
						storedSettings = JSON.parse( storedSettingsString );
					} catch( err ) {
						// no info stored, remove the key
						window.localStorage.removeItem( 'settings' );
					}
					self.settingsCollection = new SettingsCollection( storedSettings );
					self.settingsCollection.learnerId = learner.id;

					self.renderCollection( self.settingsCollection );

					// hide the spinner
					router.postRender( self );


					//console.error( "Error fetching collection: " + response.responseText );
				}

			});

			var compiledTemplate = settingsTemplate();
			self.$el.html( compiledTemplate );

			var header = new HeaderView();
					header.render( {
            title: 'Settings',
						back: true,
						transparent: true
					} );

			self.$el.find( '#header' ).append( header.el );

			if( cordova ){
				cordova.getAppVersion(function ( version ) {
					self.$el.find( '.app-version' ).append( ' (' + version + ')' );
				});
			}

		},

		renderCollection: function( collection ) {
			var self = this;
			_.each( collection.models, function( item ) {

				var settingView = new SettingView( {
					model: item
				} );
				self.$el.find( '#settings' ).append( settingView.el );
			} );
		}

	} );

	return SettingsView;
} );
