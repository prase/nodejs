( function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function( child, parent ) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define( function( require, exports, module ) {
    var Backbone, MiDriveRouter, LearnerModel;

    Backbone = require( 'backbone' );
    Platform = require( 'platform' );
		PageTransitions = require( 'page-transitions' );
		var slider = new PageTransitions(this, $('#wrapper'));
		LearnerModel = require( 'models/learner' );

		EditProfileView = require( 'views/editProfile' );
		FeedView = require( 'views/feed' );
		SignInView = require( 'views/signin' );

		DriveView = require( 'views/drive' );
		StartTrackingView = require( 'views/startTracking' );
		SaveDriveView = require( 'views/saveDrive' );
    InstructorSearchView = require( 'views/instructorSearch' );
		InstructorsView = require( 'views/instructors' );
		InstructorDetailView = require( 'views/instructorDetail' );
		InstructorReviewsView = require( 'views/instructorReviews' );
		InstructorReviewView = require( 'views/instructorReview' );
		InstructorReviewDetailView = require( 'views/instructorReviewDetail' );
		MyInstructorView = require( 'views/myInstructor' );

		WebContentView = require( 'views/webContent' );
		CreateProfileView = require( 'views/createProfile' );
		TutorialView = require( 'views/tutorial' );
		SettingsView = require( 'views/settings' );
		SaveReviewView = require( 'views/saveReview' );

		// get the caching ready
		require( 'activitiesDb' );
		window.activitiesDb = new Activities();
		window.activitiesDb.initialize();

		var doNotCallback = false;

		var animating = false;

    var firstLoad = true;

    var menuOpen = false;

    return MiDriveRouter = ( function( _super ) {
      __extends( MiDriveRouter, _super );

      function MiDriveRouter() {
        return MiDriveRouter.__super__.constructor.apply(this, arguments);
      }

      MiDriveRouter.prototype.routes = {
        '': 'feed',
				'feed': 'feed',
				'signIn': 'signIn',
				'signup': 'signIn',
				'instructorSearch': 'instructorSearchView',
				'instructors': 'instructorsView',
				'instructors(/:lat,:long(/:type/:typeId))': 'instructorsView',
				'drives/:id': 'driveView',
				'startTracking': 'startTrackingView',
				'saveDrive': 'saveDriveView',
				'instructorDetail/:id(/:path)': 'instructorDetailView',
				'instructorReviews/:id': 'instructorReviewsView',
				'instructorReviewDetail/:id/:reviewId': 'instructorReviewDetailView',
				'editProfile': 'editProfileView',
				'webContent/:action/:path': 'webContentView',
				'myInstructor': 'myInstructorView',
				'createProfile': 'createProfileView',
				'chooseGoal': 'chooseGoalView',
				'tutorial/:step': 'tutorialView',
				'tutorial/:step/:returnPath': 'tutorialView',
				'settings': 'settingsView',
				'saveReview': 'saveReviewView',

				// some catch alls
				'undefined': 'feed',
				'*notFound': 'feed'
      };

			MiDriveRouter.prototype.preRender = function() {
        console.log('call');
				//ensure is at the top of the page before navigating - test this out
				$( document ).scrollTop(0);
				animating = true;
				$( '#loading' ).show();
        if( Platform.platform == 'iOS' ){
          $( '#header' ).first().css( 'background', 'red' );
          if(!firstLoad){
            $( '#header' ).remove();
          }
          $( '#header' ).first().remove();
          if( menuOpen ){
            $( '#header' ).removeClass( 'push' );
            $( '.page-inner' ).removeClass( 'push' );
            $( '.ios-menu-close' ).removeClass( 'open' );
            menuOpen != menuOpen;
          }
        }
      };

			MiDriveRouter.prototype.showLoader = function() {
        console.log('shw');
				$( '#loading' ).show();

      };

			MiDriveRouter.prototype.hideLoader = function() {
        console.log('hide');
				$( '#loading' ).hide();

      };


			MiDriveRouter.prototype.postRender = function( view, fromPage ) {


				if( view ) {
					slider.slidePage( view.$el );

					if ( fromPage ) {
						slider.clearStateHistory( fromPage );
					}
				}
				animating = false;

				$( '#loading' ).toggle();

        if( Platform.platform == 'iOS' ){
          $( '.dropdown-menu' ).remove();
          $( '.mini-header' ).remove();
          var header = $( '#header' );
          if(firstLoad || !firstLoad){
            header.detach();
            $( '.page-center' ).prepend(header);
          }
          $( '.ios-menu' ).css( 'height', $( window ).height()+'px' );
          $( '.ios-menu-close' ).css( 'height', $( window ).height()+'px') ;
          header.find( '.header-title' ).click(function(){
            $( '.page-inner' ).animate({
              scrollTop: 0
            }, 100);
          });
          header.find( '#headerMenu' ).click( function(){
            //menuOpen ? $('.ios-menu').removeClass('open') : $('.ios-menu').addClass('open') ;
            menuOpen ? $( '.ios-menu-close' ).removeClass( 'open' ) : $( '.ios-menu-close' ).addClass( 'open' ) ;
            menuOpen ? $( '.page-inner' ).removeClass( 'push' ) : $( '.page-inner' ).addClass( 'push' ) ;
            menuOpen ? $( '#header' ).removeClass( 'push' ) : $( '#header' ).addClass( 'push' ) ;
            menuOpen = !menuOpen;

						if ( menuOpen ) {
							if( navigator.mixpanel ) {
								navigator.mixpanel.track(
									'Menu open',
									{},
									function() { },
									function( message ) {
										console.log( 'mixpanel error' + message );
									}
								);
							}
						}

          });
          header.find( '.ios-menu-close' ).click( function(){
            //menuOpen ? $('.ios-menu').removeClass('open') : $('.ios-menu').addClass('open') ;
            menuOpen ? $( '.ios-menu-close' ).removeClass( 'open' ) : $( '.ios-menu-close' ).addClass( 'open' ) ;
            menuOpen ? $( '.page-inner' ).removeClass( 'push' ) : $( '.page-inner' ).addClass( 'push' ) ;
            menuOpen ? $( '#header' ).removeClass( 'push' ) : $( '#header' ).addClass( 'push' ) ;
            menuOpen = !menuOpen;
          });
          var closeDiv = Hammer( header.find( '.ios-menu-close' ) );
          closeDiv.on( 'swipeleft',function(ev ){
            menuOpen ? $( '.ios-menu-close' ).removeClass( 'open' ) : $( '.ios-menu-close' ).addClass( 'open' ) ;
            menuOpen ? $( '.page-inner' ).removeClass( 'push' ) : $( '.page-inner' ).addClass( 'push' ) ;
            menuOpen ? $( '#header' ).removeClass( 'push' ) : $( '#header' ).addClass( 'push' ) ;
            menuOpen = !menuOpen;
          });
        } else {
          $( '.ios-menu' ).remove();
        }
        firstLoad = false;
      };

			MiDriveRouter.prototype.signOut = function(){

				slider.clearAllStateHistory();
				window.localStorage.clear();
				if(document.location.href.indexOf ( 'cordova.html' ) > -1){
					document.location.href="cordova.html";
				}
				else{
					document.location.href="../../../../index.html";
				}

			}


      MiDriveRouter.prototype.initialize = function( options ) {

				return this.app = options.app;

      };

			MiDriveRouter.prototype.goBack = function() {

				this.preRender();
        slider.back();
				this.postRender();

      };


			MiDriveRouter.prototype.feed = function() {
				this.preRender();
				new FeedView().render( this );
      };

      MiDriveRouter.prototype.signIn = function() {
				if( animating === false ){
					this.preRender();
					var signInView = new SignInView();
					signInView.render( this );
				}
      };

			MiDriveRouter.prototype.driveView = function( driveId ) {
        if( animating === false ){
					this.preRender();
					new DriveView().getDrive( driveId );
				}
      };

			MiDriveRouter.prototype.startTrackingView = function() {
        if( animating === false ){
					this.preRender();
					new StartTrackingView().render( this );
				}
      };

			MiDriveRouter.prototype.saveDriveView = function() {
        if( animating === false ){
					this.preRender();
					new SaveDriveView().render();
				}
      };

			MiDriveRouter.prototype.instructorSearchView = function() {

				if( animating === false ) {
					this.preRender();
				 	new InstructorSearchView().render( {}, true );
				}
      };

			MiDriveRouter.prototype.instructorsView = function( latitude, longitude, type, typeId ) {
				if( animating === false ) {
					this.preRender();
					if ( latitude && longitude ) {
						new InstructorsView().getInstructorsByLatLong( latitude, longitude, true );
					} else {
				 		new InstructorsView().getInstructorsByCurrentLocation();
					}
				}
      };

			MiDriveRouter.prototype.instructorDetailView = function( instructorId ) {
        if( animating === false ){
					this.preRender();
					new InstructorDetailView().getInstructor( instructorId );
				}
      };

			MiDriveRouter.prototype.instructorReviewsView = function( instructorId ) {
        if( animating === false ){
					this.preRender();
					new InstructorReviewsView().getInstructorReviews( instructorId );
				}
      };

			MiDriveRouter.prototype.instructorReviewDetailView = function( instructorId, reviewId ) {
        //console.log(instructorId + " "+reviewId);
				if( animating === false ){
					this.preRender();
					new InstructorReviewDetailView().render( instructorId, reviewId );
				}
      };


			MiDriveRouter.prototype.editProfileView = function() {

				if( animating === false ){
					this.preRender();
					var editProfileView = new EditProfileView();
					editProfileView.render( this );
				}

      };

			MiDriveRouter.prototype.webContentView = function( action, path ) {
        if( animating === false ){
					this.preRender();
					new WebContentView().render( action, path );
				}
      };

			MiDriveRouter.prototype.myInstructorView = function() {
        if( animating === false ){
					this.preRender();
					new MyInstructorView().render();
				}
      };

			MiDriveRouter.prototype.createProfileView = function() {
        if( animating === false ){
					this.preRender();
					new CreateProfileView().render( this );
				}
      };

			MiDriveRouter.prototype.chooseGoalView = function() {
        if( animating === false ){
					this.preRender();
						new ChooseGoalView().render();
					}
      };

			MiDriveRouter.prototype.tutorialView = function( step, returnPath ) {
        if( animating === false ){
					this.preRender();

					new TutorialView().render( this, step, returnPath );
				}
      };

			MiDriveRouter.prototype.settingsView = function() {
        if( animating === false ){
					this.preRender();
					new SettingsView().render( this );
				}
      };

			MiDriveRouter.prototype.saveReviewView = function() {
        if( animating === false ){
					this.preRender();
					new SaveReviewView().render();
				}
      };

			MiDriveRouter.prototype.execute = function( callback, args ) {
				if ( this.app.map ) {
					this.app.map.clear(); // remove all the markers and drawings
					this.app.map.setVisible( false );
				}

				// if we don't have the learner details available
				//if( !this.app.learner ){

					// go and fetch the learner from local storage
					var learnerJSONString = window.localStorage.getItem( 'learner' );
					var learnerJSON = JSON.parse( learnerJSONString );


					var accessToken = window.localStorage.getItem( 'accessToken' );
					if( _.isNull( learnerJSONString ) || !learnerJSONString || _.isEmpty( accessToken ) || _.isNull( accessToken ) ) { //if there is nothing stored locally

						callback = this.signIn;
					} else {

						if( window.location.hash != '#signIn' && ( _.isNull(learnerJSON.journeyDate) || learnerJSON.type === '' || learnerJSON.type === 'pending' ) ){

							//jump to the first screen of signup process as they previously didn't complete it
							//this.navigate( '/createProfile', true );
							callback = this.createProfileView;

						}	else {

							try {

								var stillTracking = window.localStorage.getItem( 'stillTracking' );
								console.log( "is still tracking?" );
								if( stillTracking === 'tracking' ) {
									console.log( "yes - forward to the start tracking view" );
									callback = this.startTrackingView;
								}

								this.app.learner = new LearnerModel;
								this.app.learner.set( learnerJSON );

							} catch( exception ) {
								// couldn't get the learner
								// clean the localStorage, force to log in again

								console.log( 'clearing local storage', exception );
								window.localStorage.clear();
								callback = this.signIn;

							}
						}

					//}


				}

    		if ( callback ) {
					callback.apply( this, args );
				}

  		};

      return MiDriveRouter;

    })( Backbone.Router );
  });

} ).call( this );
