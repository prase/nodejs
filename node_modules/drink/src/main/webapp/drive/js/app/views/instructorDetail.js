define( [
	'jquery',
	'../../../../bower_components/underscore/underscore',
	'backbone',
	'i18next',
	'models/instructor',
	'hbs!templates/instructorDetail',
	'models/learner',
	'views/header',
	'views/instructorGallery',
	'views/instructorPrices',
	'views/instructorBio',
	'views/instructorDetailModal',
	'views/myInstructorModal',
  'views/iosInstructorModal',
  'platform'
], function( $, _, Backbone, i18next, InstructorModel, instructorDetailTemplate, LearnerModel, HeaderView, InstructorGalleryView, InstructorPricesView, InstructorBioView, InstructorDetailModal, MyInstructorModal, IosInstructorModal, Platform ) {

	var InstructorView = Backbone.View.extend( {

		myInstructor: false,
		events: {
			//'click .fa-arrow-left': 'back',
			'click #instructorCall': 'call',
			'click #instructorEmail': 'email',
			'click #instructorChoose': 'choose',
      'click #instructorRemove': 'remove',
			'click .instructorBio': 'bio',
			'click .instructorPrices': 'prices',
			'click .instructorReviews': 'reviews',
			'click #showBottomMenu': 'showBottomMenu',
			'focusout .bottomMenu': 'hideBottomMenu',
			'click #instructorShare': 'toShare',
			'click #instructorMorePhotos': 'toGallery',
			'click .dismiss': 'dismiss'
		},

		dismiss: function(){
			$( '.notice' ).fadeOut();
		},

		initialize: function() {

			Backbone.Notifications.off( 'InstructorAction' );
			Backbone.Notifications.on( 'InstructorAction' , function ( msg ) {
				switch( msg ) {
					case 'gallery':
						this.toGallery();
						break;

					case 'choose':
						this.choose();
						break;

					case 'change':
						this.remove();
						break;

					case 'review':
						this.review();
						break;

					default:
						this.toShare();
						break;
				}
			}, this);


		},

		share: {
			message: i18next.t( "instructorDetail.share.message" ),
			subject: i18next.t( "instructorDetail.share.subject" ),
			image: null,
			link: null
		},

		call: function ( ) {

			var self = this;
			var currentInstructor = this.model.toJSON();

			// if not verified then show the dialog first - otherwise do the action immediately
			if( !this.myInstructor && !currentInstructor.isApproved ) {

				if ( navigator && navigator.notification ) {
					var callButtonIndex = 1;
					var buttons = [
						i18next.t( "instructorDetail.buttons.call" ),
						i18next.t( "instructorDetail.buttons.cancel" )
					];

					if ( Platform.platform == 'iOS' ) {
						buttons.reverse();
						var callButtonIndex = 2;
					}

					navigator.notification.confirm(
						i18next.t( "instructorDetail.alert.call", {
							currentInstructorGivenName: currentInstructor.givenName,
							currentInstructorFamilyName: currentInstructor.familyName
						} ),
						function ( buttonIndex ) {
							if( buttonIndex == callButtonIndex ) { //if want to proceed
								self.makeACall( currentInstructor.id, currentInstructor.telephone );
							}
						},
						i18next.t( "instructorDetail.contact", {
							currentInstructorGivenName: currentInstructor.givenName,
							currentInstructorFamilyName: currentInstructor.familyName
						} ),
						buttons
					);
				}
			} else {
				self.makeACall( currentInstructor.id, currentInstructor.telephone );
			}
		},

		makeACall: function ( id, number ) {

			var tel = 'tel:' + number;
			if( navigator.mixpanel ) {
				var learnerString = window.localStorage.getItem( 'learner' );
				var learner = JSON.parse( learnerString );

				var mixParams = {
					'Instructor': id,
					'Method': 'Call'
				};
				if ( learner && learner.instructor && ( learner.instructor.id == id ) ) {
					mixParams['Screen'] = 'My instructor';
				}

				navigator.mixpanel.track(
					'Instructor contacted',
					mixParams,
					function(){ },
					function( message ) {
						console.log( message );
					}
				);
				navigator.mixpanel.peopleSet(
					{
						'Has contacted instructor': true
					},
					function() { },
					function( message ) {
						console.log( 'mixpanel error' + message );
					}
				);
			}
			window.location.href = tel;
		},

		email: function ( ) {
			var self = this;
			var currentInstructor = this.model.toJSON();

			// if not verified then show the dialog first - otherwise do the action immediately
			if(  !this.myInstructor && !currentInstructor.isApproved ) {

				if ( navigator && navigator.notification ) {
					var emailButtonIndex = 1;
					var buttons = [
						i18next.t( "instructorDetail.buttons.email" ),
						i18next.t( "instructorDetail.buttons.cancel" )
					];

					if ( Platform.platform == 'iOS' ) {
						buttons.reverse();
						emailButtonIndex = 2;
					}

					navigator.notification.confirm(
						i18next.t( "instructorDetail.alert.email", {
							currentInstructorGivenName: currentInstructor.givenName,
							currentInstructorFamilyName: currentInstructor.familyName
						} ),
						function ( buttonIndex ) {
							if( buttonIndex == emailButtonIndex ) { //if want to proceed
								self.sendAnEmail( currentInstructor );
							}
						},
						i18next.t( "instructorDetail.contact", {
							currentInstructorGivenName: currentInstructor.givenName,
							currentInstructorFamilyName: currentInstructor.familyName
						} ),
						buttons
					);
				}
			} else {
				self.sendAnEmail( currentInstructor );
			}
		},
		sendAnEmail: function ( currentInstructor ) {

			var self = this;
			var learnerString = window.localStorage.getItem( 'learner' );
			var learner = JSON.parse( learnerString );

			if( window.plugin.email ) {
				if( navigator.mixpanel ) {
					var mixParams = {
						'Instructor': currentInstructor.id,
						'Method': 'Email'
					};

					if ( learner && learner.instructor && ( learner.instructor.id == currentInstructor.id ) ) {
						mixParams['Screen'] = 'My instructor';
					}
					navigator.mixpanel.track(
						'Instructor contacted',
						mixParams,
						function(){ },
						function( message ) {
							console.log( message );
						}
					);
					navigator.mixpanel.peopleSet(
						{
							'Has contacted instructor': true
						},
						function() { },
						function( message ) {
							console.log( 'mixpanel error' + message );
						}
					);
				}
				window.plugin.email.open( {
						to:      [ currentInstructor.email ],
						subject: i18next.t( "instructorDetail.email.subject" ),
						body:    i18next.t( "instructorDetail.email.body", {
							currentInstructorGivenName: currentInstructor.givenName,
							learnerEmail: learner.email,
							learnerGivenName: learner.givenName,
							learnerFamilyName: learner.familyName
						} )
				} );
			}
		},


		choose: function ( ) {
			var self = this;
			var currentInstructor = this.model.toJSON();
			var message = '';

			if( !currentInstructor.isApproved ) {
				message = i18next.t( "instructorDetail.alert.choose", {
					currentInstructorGivenName: currentInstructor.givenName,
					currentInstructorFamilyName: currentInstructor.familyName
				} );
			} else {
				message = i18next.t( "instructorDetail.alert.approved", {
					currentInstructorGivenName: currentInstructor.givenName,
					currentInstructorFamilyName: currentInstructor.familyName
				} );
			}

			if ( navigator && navigator.notification ) {

				var chooseButtonIndex = 1;
				var buttons = [
					i18next.t( "instructorDetail.buttons.chooseIos" ),
					i18next.t( "instructorDetail.buttons.cancel" )
				];

				if ( Platform.platform == 'iOS' ) {
					buttons.reverse();
					chooseButtonIndex = 2;
				}

				navigator.notification.confirm(
					message,
					function ( buttonIndex ) {
						if( buttonIndex == chooseButtonIndex ) {

							self.chooseInstructor( currentInstructor );
						}
					},
					i18next.t( "instructorDetail.choose", {
						currentInstructorGivenName: currentInstructor.givenName,
						currentInstructorFamilyName: currentInstructor.familyName
					} ),
					buttons
				);
			} else {

				if( confirm( 'Are you sure you want to choose this instructor (test alert for web version)' ) ) {
					self.chooseInstructor( currentInstructor );
				}
			}
		},

		chooseInstructor: function ( currentInstructor ) {
			var learnerJSON = window.localStorage.getItem( 'learner' );
			var learner = JSON.parse( learnerJSON );

			var self = this;

			var learnerModel = new LearnerModel( { 'id': learner.id } );

			learnerModel.fetch( {

				success: function( model, response ) {
					window.app.token = learner.accessToken;
					learnerModel.set( {
     				instructorId: currentInstructor.id
					} );

					if( !_.isNull( window.app.lastActivity ) && !_.isUndefined( window.app.lastActivity ) && ( window.app.lastActivity.type === 'instructor' ) ) {
						learnerModel.set( {
     					activityId: window.app.lastActivity.id
						} );
					}

					learnerModel.save( null, {
						success:function( model, response ) {

							if ( window.activitiesDb && !_.isNull( window.app.lastActivity ) && !_.isUndefined( window.app.lastActivity ) && ( window.app.lastActivity.type === 'instructor' ) ) {
								window.activitiesDb.updateStatus( window.app.lastActivity.id, 'complete', response.id );
							}

							if( navigator.mixpanel ) {

								navigator.mixpanel.track( 'Instructor chosen',
									{
										'Instructor': currentInstructor.id
									},
									function(){ },
									function( message ) {
										console.log( message );
									} );

								navigator.mixpanel.peopleSet(
									{
										'Has chosen instructor': true
									},
									function() { },
									function( message ) {
										console.log( 'mixpanel error' + message );
									}
								);
							}

							//save instructor details separately so that we don't have to update the learner object (and overwrite accessToken)
							window.localStorage.setItem( 'myInstructor', JSON.stringify(learnerModel.toJSON().instructor ) );
							window.app.lastActivity = null;
							this.myInstructor = true;

							//show the image success flash
							if ( Platform.platform == 'iOS' ) {
								if ( navigator && navigator.notification ) {
									navigator.notification.alert(
										i18next.t( "instructorDetail.alert.choosenInstructorMessage" ),
										function () { },
										i18next.t( "instructorDetail.alert.choosenInstructorTitle" ),
										i18next.t( "instructorDetail.alert.buttons.ok" )
									);
								} else {
									alert( i18next.t( "instructorDetail.labels.instructorChosen" ) );
								}
							} else {
								$( '.notice' ).fadeIn();
							}

							$( '#modal-content').unbind();

							var myInstructorModal = new MyInstructorModal();
							myInstructorModal.render();

							$( '#menuModal' ).on( 'show', function() {
								console.log( 'showing modal' );
							} );

							// hide the modal
							$( '#menuModal' ).modal( 'hide' );

						},

						error: function( model, error ) {
							console.log( model.toJSON() );
							console.log( 'error.responseText' );
						}
					} );
				},

				error: function( model, response ) {
					console.log( 'Load learner error' );
					console.log( response );
				}

			});

		},

		getInstructor: function ( instructorId ) {
			var self = this;
			this.model = new InstructorModel( { 'id': instructorId } );

      if( Platform.platform == 'iOS' ) {
				$( '#modal-content').unbind();
        var instructorDetailModal = new IosInstructorModal( this.model );
        instructorDetailModal.render();
      }

			// If this id is the same as my instructor id - then we do some slight diff actions
			var myInstructorString = window.localStorage.getItem( 'myInstructor' );
			var myInstructor = JSON.parse( myInstructorString );

			if ( myInstructor ) {
				if( myInstructor.id == instructorId ){
					this.myInstructor = true;
				}
			}


			if ( window.app && ( typeof window.app.instructorDetailModel != 'undefined' ) ) {
console.log( ' -- use the stored instructor -- ' );
				// use the saved model
				this.model = window.app.instructorDetailModel;

				// clear the info
				delete( window.app.instructorDetailModel );

				self.render( this.model.toJSON() );
			} else {

				this.model.fetch( {

					success: function( model, response ) {
						self.render( model.toJSON() );
					},

					error: function( model, response ) {
						console.log( 'InstructorModel error' );
						console.log( response );
						self.render( {} );
					}

				});
			}

		},

		render: function( data ) {

			$( 'body' ).removeClass();

			if( typeof analytics !== 'undefined' ) {
				if( !this.myInstructor ){
					analytics.trackView( 'Instructor Screen' );
				}
				else{
					analytics.trackView( 'Your Instructor' );
				}

			}


      if(Platform.platform == 'iOS'){
        //do nothing
      } else {

        $( '#modal-content').unbind();

        if( this.myInstructor ){
          var myInstructorModal = new MyInstructorModal();
          myInstructorModal.render();
        } else {
          var instructorDetailModal = new InstructorDetailModal();
          instructorDetailModal.render();
        }
      }



			var self = this;
			var params = data || {};
			params.deviceWidth = $( window ).width();

			// get the profile image
			params.fullSizeImage = self.getImage( params.image, params.deviceWidth );

			// get the gallery ready
			if ( params.images ) {
				params.galleryCount = params.images.length || 0;
			}

			//console.log( params );

			// star rating
			var starsParams = {
				'max': 5,
				'average': params.averageReviews
			};

			params.stars = starsParams;
      params.myInstructor = self.myInstructor;


			if ( params.reviewStats ) {
				_.each( params.reviewStats.stats, function( stat ) {
					stat.percentage = Math.round( stat.totalStars * ( 1 / params.reviewStats.totalNumberStars ) * 100 );
				} );
			}

			var compiledTemplate = instructorDetailTemplate( params );
			this.$el.html( compiledTemplate );

			if( navigator.mixpanel ) {
				navigator.mixpanel.track( 'Instructor viewed',
					{
						'Instructor': params.id,
					},
					function(){ },
					function( message ) {
						console.log( message );
					} );
			}

			var header = new HeaderView();

			var showInstructorMenu = Platform.platform == 'iOS';

			header.render( {
				back: true,
				transparent: true,
				instructorMenu: showInstructorMenu
			} );

			this.$el.find( '#header' ).append( header.el );

			window.app.router.navigate( '/instructorDetail/' + this.model.id, false );
			window.app.router.postRender( self );

		},

		getImage: function( imageSizes, deviceWidth ) {
			var image = null;
			var defaultImageSize = 370;

			if ( deviceWidth && ( deviceWidth > 370 ) ) {
				defaultImageSize = 600;
			}

			// get the profile image
			if( imageSizes && ( imageSizes.length > 0 ) ) {
				_.each( imageSizes, function( img ) {
					if ( img.size && ( img.size == defaultImageSize ) ) {
						image = img.url;
					}
				} );
			}
			return image;
		},

		bio: function( event ) {
			event.preventDefault();
			if ( this.model && this.model.get( 'biographyIntroduction' ) ) {
				var instructorBioView = new InstructorBioView();

				this.storeInstructor();

				window.app.router.navigate( '/instructorDetail/' + this.model.id + '/bio', false );
				window.app.router.preRender();

				instructorBioView.render( this.model.toJSON() );
			}
		},

		reviews: function( event ) {
			event.preventDefault();
      console.log('reviews');
			if ( this.model && this.model.get( 'reviewStats' ) ) {

				this.storeInstructor();

				window.app.router.navigate( '/instructorReviews/' + this.model.id, true );
			}
		},

		prices: function( event ) {
			event.preventDefault();
			if ( this.model && this.model.get( 'hourlyRate' ) ) {
				var instructorPricesView = new InstructorPricesView();

				this.storeInstructor();

				window.app.router.navigate( '/instructorDetail/' + this.model.id + '/prices', false );
				window.app.router.preRender();

				instructorPricesView.render( this.model.toJSON() );
			}
		},

		showBottomMenu: function( event ) {
			event.preventDefault;

			console.log( 'show the bottom menu' );
			$( '.bottomMenu' ).show().focus();

		},

		hideBottomMenu: function( event ) {
			if ( event ) {
				event.preventDefault;
			}

			//console.log( 'hide the bottom menu' );
			$( '.bottomMenu' ).hide();

			//$( '#modal-content' ).modal( 'hide' );

		},

		toShare: function( event ) {
			if ( typeof event != 'undefined' ) {
			event.preventDefault();
			}
			var self = this;

			var currentInstructor = self.model.toJSON();

			var share = {
				message: i18next.t( "instructorDetail.share.message" ),
				subject: i18next.t( "instructorDetail.share.subject" ),
				image: null,
				link: 'http://midrive.com' + ( ( currentInstructor.permalink ) ? currentInstructor.permalink : '/driving-instructors/' + currentInstructor.id )
			};

			if ( window.plugins && window.plugins.socialsharing ) {

				setTimeout( function() {
					// https://github.com/EddyVerbruggen/SocialSharing-PhoneGap-Plugin/

					// image can be an web URL or base64 (not supported on Android 2.x)
					// multiple images needs to be an array

					window.plugins.socialsharing.share(
						share.message,
						share.subject,
						share.image,
						share.link
					);


				}, 0 );

			} else {
				alert( 'sharing message: ' + share.message + "\n"
					+ 'subject: ' + share.subject + "\n"
					+ 'image: ' + share.image + "\n"
					+ 'link: ' + share.link
				);
			}
		},

		toGallery: function() {
			var instructorGalleryView = new InstructorGalleryView();

			this.storeInstructor();

			window.app.router.navigate( '/instructorDetail/' + this.model.id + '/gallery', false );
			window.app.router.preRender();

			instructorGalleryView.render( this.model.toJSON() );
		},

		remove: function ( ) {

			var self = this;
			var currentInstructor = this.model.toJSON();
			var title = i18next.t( 'instructorDetail.alert.changeTitle' );
			var message = '';

			message = i18next.t( 'instructorDetail.alert.change', {
						currentInstructorGivenName: currentInstructor.givenName,
						currentInstructorFamilyName: currentInstructor.familyName
					});

			if ( navigator && navigator.notification ) {

				var buttons = [
					i18next.t( "instructorDetail.buttons.remove" ),
					i18next.t( "instructorDetail.buttons.cancel" )
				];
				var removeButtonIndex = 1;

				if ( Platform.platform == 'iOS' ) {
					buttons.reverse();
					removeButtonIndex = 2;
				}

				navigator.notification.confirm(
					message,
					function ( buttonIndex ) {

						if( buttonIndex == removeButtonIndex ){
							self.removeInstructor();
						}

					},
					title,
					buttons
				);
			}
			else {

				if( confirm( title + ' ' + message ) ){
					self.removeInstructor();
				}

			}


		},

		review: function() {
			window.app.router.navigate( '/saveReview' , true);
		},

		removeInstructor: function ( currentInstructorId ) {

			var learnerJSON = window.localStorage.getItem( 'learner' );
			var learner = JSON.parse( learnerJSON );
			var accessToken = window.localStorage.getItem( 'accessToken' );

			var self = this;

			var learnerModel = new LearnerModel( learner );

			// manually call this
			$.ajax({
				url: window.app.config.apiURL + '/learners/' + learner.id + '/instructor',
				beforeSend: function ( request ) {
					console.log(learner.accessToken);
					request.setRequestHeader( "x-email-auth-token", accessToken );
				},
				type: 'DELETE',
					success: function( result ) {

						window.localStorage.setItem( 'myInstructor', null );
						window.app.router.navigate( '/instructors' , true );
					},
					error: function ( result ) {
						console.log( "Instructor could not be removed", result );
					}
			} );
		},

		storeInstructor: function() {
			// save the model
			window.app.instructorDetailModel = this.model;
		}

	} );

	return InstructorView;
} );
