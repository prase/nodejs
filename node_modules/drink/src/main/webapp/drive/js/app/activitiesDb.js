var Activities = ( function() {
	function Activities() {};
	
	var _dbName = 'journey';
	var _tableNameActivities = 'activities';
	var _tableNameMonthlyStats = 'monthlyStats';
	var _tableNameInfo = 'infos';
	
	var _statusComplete = 'complete';
	var _statusAvailable = 'available';
	var _statusLocked = 'locked';
	
	var _learnerJourneyDate;
	var _currentMonth;
	
	var _db;
	var _query;
	var _results;
	
	var _columns = [
		'id',
		'activityStatus',
		'activityTypeId',
		'dateTime',
		'description',
		'icon',
		'image',
		'month',
		'monthlyStats_completed',
		'monthlyStats_numActivities',
		'paths', // array
		'status',
		'title',
		'type',
		'typeId',
		'url'
	];
	
	function _populateDB( tx ) {
//		tx.executeSql( 'DROP TABLE IF EXISTS ' + _tableNameActivities );
//		tx.executeSql( 'DROP TABLE IF EXISTS ' + _tableNameMonthlyStats );
//		tx.executeSql( 'DROP TABLE IF EXISTS ' + _tableNameInfo );
		var columns = _columns.slice( 0 );
		columns[0] = _columns[0]+ ' UNIQUE';
		tx.executeSql( 'CREATE TABLE IF NOT EXISTS ' + _tableNameActivities + ' ( ' + columns.join( ',' ) + ' )' );
		tx.executeSql( 'CREATE TABLE IF NOT EXISTS ' + _tableNameMonthlyStats + ' ( monthId UNIQUE, completed, numActivities )' );
		tx.executeSql( 'CREATE TABLE IF NOT EXISTS ' + _tableNameInfo + ' ( id INTEGER PRIMARY KEY, key UNIQUE, value )' );
		
//		activityStatus: "complete"
//		activityTypeId: null
//		dateTime: "2014-08-12T10:26:09+00:00"
//		description: "There isn't a set figure to pay when you learn to drive, as the total cost very much depends upon th"
//		icon: null
//		id: 9
//		image: "img/book.png"
//		month: 1
//		monthlyStats: Object
				//completed: 10
				//numActivities: 10
//		paths: Array[1]
//		status: ""
//		title: "How much does learning to drive cost?"
//		type: "read"
//		typeId: 87
//		url: "http://resources.midrive.com/how-much-does-learning-to-drive-cost/"
	}

	function _errorCB( err ) {
		//console.log( "Error processing SQL: " + err.code + ' - ' + err.message );
		console.log( "Error processing SQL: ", err );
	}

	function _successCB() {
		console.log( "success!" );
	}
	
	function _querySuccess( tx, results ) {
		console.log( "Returned rows = " + results.rows.length );
		
		var len = results.rows.length;
    console.log( "DEMO table: " + len + " rows found." );
		var rows = [];
    for( var i = 0; i < len; i++ ) {
			var row = {
				id: results.rows.item( i ).id,
				activityStatus: results.rows.item( i ).activityStatus,
				activityTypeId: results.rows.item( i ).activityTypeId,
				dateTime: results.rows.item( i ).dateTime,
				description: results.rows.item( i ).description,
				icon: results.rows.item( i ).icon,
				image: results.rows.item( i ).image,
				month: results.rows.item( i ).month,
				monthlyStats: {
					completed: results.rows.item( i ).monthlyStats_completed,
					numActivities: results.rows.item( i ).monthlyStats_numActivities
				},
				paths: JSON.parse( results.rows.item( i ).paths ),
				status: results.rows.item( i ).status,
				title: results.rows.item( i ).title,
				type: results.rows.item( i ).type,
				typeId: results.rows.item( i ).typeId,
				url: results.rows.item( i ).url
			};
			
			rows.push( row );
			
    	//console.log( "Row = " + i + " ID = " + results.rows.item( i ).id + " Data =  " + results.rows.item( i ).activityStatus + " Month =  " + results.rows.item( i ).month, row );
    }
		
		//console.log( 'rows', rows );
		_results = rows;
		
		// this will be true since it was a select statement and so rowsAffected was 0
		if ( !results.rowsAffected ) {
			console.log( 'No rows affected!' );
			return false;
		}
		
		// for an insert statement, this property will return the ID of the last inserted row
		console.log( "Last inserted row ID = " + results.insertId );
	}
	
	function _insert( id, activityStatus, activityTypeId, dateTime, description, icon, image, month, monthlyStats_completed, monthlyStats_numActivities, paths, status, title, type, typeId, url ) {
		_db.transaction(
			function( tx ) {
				// new Array( _columns.length - 0 ).join( "?, " )
				
				tx.executeSql(
					'INSERT OR REPLACE INTO ' + _tableNameActivities + ' ( ' + _columns.join( ', ' ) + ' ) VALUES ( ' + Array( _columns.length - 0 ).join( "?, " ) + ' ? )', 
					[ 
						id,
						activityStatus,
						activityTypeId,
						dateTime,
						description,
						icon,
						image,
						month,
						monthlyStats_completed,
						monthlyStats_numActivities,
						paths,
						status,
						title,
						type,
						typeId,
						url
					]
				);
			},
			_errorCB,
			_successCB
		);
		_db.transaction(
			function( tx ) {
				tx.executeSql(
					'INSERT OR REPLACE INTO ' + _tableNameMonthlyStats + ' ( monthId, completed, numActivities ) VALUES ( ?, ?, ? )', 
					[ 
						month,
						monthlyStats_completed,
						monthlyStats_numActivities
					]
				);
			},
			_errorCB,
			_successCB
		);
	}
	
	function _insertInfo( collection ) {
		_db.transaction(
			function( tx ) {
				tx.executeSql(
					'INSERT OR REPLACE INTO ' + _tableNameInfo + ' ( key, value ) VALUES ( ?, ? )', 
					[ 
						'pageNext',
						collection.pages.next
					]
				);
			},
			_errorCB,
			_successCB
		);
		_db.transaction(
			function( tx ) {
				tx.executeSql(
					'INSERT OR REPLACE INTO ' + _tableNameInfo + ' ( key, value ) VALUES ( ?, ? )', 
					[ 
						'pagePrevious',
						collection.pages.previous
					]
				);
			},
			_errorCB,
			_successCB
		);
		_db.transaction(
			function( tx ) {
				tx.executeSql(
					'INSERT OR REPLACE INTO ' + _tableNameInfo + ' ( key, value ) VALUES ( ?, ? )', 
					[ 
						'statsTotalActivities',
						collection.stats.totalActivities
					]
				);
			},
			_errorCB,
			_successCB
		);
		_db.transaction(
			function( tx ) {
				tx.executeSql(
					'INSERT OR REPLACE INTO ' + _tableNameInfo + ' ( key, value ) VALUES ( ?, ? )', 
					[ 
						'statsTotalMonths',
						collection.stats.totalMonths
					]
				);
			},
			_errorCB,
			_successCB
		);
		_db.transaction(
			function( tx ) {
				tx.executeSql(
					'INSERT OR REPLACE INTO ' + _tableNameInfo + ' ( key, value ) VALUES ( ?, ? )', 
					[ 
						'statsTotalcompleted',
						collection.stats.totalcompleted
					]
				);
			},
			_errorCB,
			_successCB
		);
	}
	
	function _updateStatus( id, activityStatus, typeId ) {
		var cols = [ 'activityStatus' ];
		var values = [ activityStatus ];
		var monthId;
		var actStatus;
		var numActivities;
		var numCompleted;
		
		if ( typeId ) {
			cols.push( 'typeId' );
			values.push( typeId );
		}
		
		// update the stats for the month
		_db.transaction(
			function( tx ) {
				// search for the month where we are in
				tx.executeSql(
					'SELECT * FROM ' + _tableNameActivities + ' JOIN ' + _tableNameMonthlyStats + ' ON monthId = month WHERE id = ?',
					[ id ],
					function( tx, results ) {
						if ( results.rows.length > 0 ) {
							monthId = results.rows.item( 0 ).month;
							actStatus = results.rows.item( 0 ).activityStatus;
							numActivities = results.rows.item( 0 ).numActivities;
							numCompleted = results.rows.item( 0 ).completed;

							//console.log( 'item', results.rows.item( 0 ) );

							_update( id, cols, values );
						}

						if ( !results.rowsAffected ) {
							return false;
						}
					}
				);
			},
			_errorCB,
			function() {
				// get the month's stat
				if ( ( activityStatus == _statusComplete ) && ( actStatus != _statusComplete ) ) {
					//console.log( 'ready:', actStatus );

					_db.transaction(
						function( tx ) {
							if ( monthId ) {
								//console.log( 'updating the month completed', monthId, numCompleted + 1 );

								tx.executeSql( 'UPDATE ' + _tableNameMonthlyStats + ' SET completed=? WHERE monthId=?;', [ ( numCompleted + 1 ), monthId ] );
								tx.executeSql( 'UPDATE ' + _tableNameActivities + ' SET monthlyStats_completed=? WHERE month=?;', [ ( numCompleted + 1 ), monthId ] );
							}
						},
						_errorCB,
						function() {
							//console.log( 'month updated', numCompleted, numActivities );

							// unlock the next month
							var percent = Math.round( 100 / numActivities * ( numCompleted + 1 ) );
							if ( percent >= 80  ) {
								// more than 80%

								//console.log( 'unlocking next month', monthId + 1, percent );
								_unlockMonth( monthId + 1 );
							}
						}
					);
				} else {
					console.log( 'already completed' );
				}
			}
		);
	}
	
	function _update( id, columns, values ) {
		// add the id to the end for the where clause
		values.push( id );
		
		_db.transaction(
			function( tx ) {
				tx.executeSql( 'UPDATE ' + _tableNameActivities + ' SET ' + columns.join( '=? ,' ) + '=? WHERE id=?;', values );
			},
			_errorCB,
			_successCB
		);
	}
	
	function _unlockMonth( month ) {
		_db.transaction(
			function( tx ) {
				tx.executeSql( 'UPDATE ' + _tableNameActivities + ' SET activityStatus = ? WHERE month <= ? AND activityStatus = ?;', [ _statusAvailable, month, _statusLocked ] );
			},
			_errorCB,
			_successCB
		);
	}
	
	function _clear() {
		_db.transaction(
			function( tx ) {
				tx.executeSql( 'DELETE FROM ' + _tableNameActivities );
				tx.executeSql( 'DELETE FROM ' + _tableNameMonthlyStats );
				tx.executeSql( 'DELETE FROM ' + _tableNameInfo );
			},
			_errorCB,
			_successCB
		);
	}
	
	function _monthDiff( d1, d2 ) {
		var months;
		months = ( d2.getFullYear() - d1.getFullYear() ) * 12;
		months -= d1.getMonth() - 1;
		months += d2.getMonth();
		return months <= 0 ? 0 : months;
	}
	
	function _setLearner() {
		var learnerString = window.localStorage.getItem( 'learner' );
		if ( learnerString ) {
			var learnerJson = JSON.parse( learnerString );
			//console.log( 'learnerJson', learnerJson );

			if ( learnerJson.journeyDate ) {
				_learnerJourneyDate = learnerJson.journeyDate;

				_currentMonth = _monthDiff(
					new Date( _learnerJourneyDate ),
					new Date()
				);
				console.log( '_currentMonth: ' + _currentMonth );
				//console.log( 'date diff', _learnerJourneyDate, new Date(), _currentMonth );
			}
		}
	}
	

	Activities.prototype.initialize = function() {
		_db = window.openDatabase( _dbName, "1.0", _tableNameActivities, 1000000 );
		_db.transaction( _populateDB, _errorCB, _successCB );
		
		_setLearner();
	};
	
	Activities.prototype.setLearner = function() {
		_setLearner();
	};
	
	Activities.prototype.getAll = function( callback ) {
		if ( _currentMonth ) {
			// make sure the current month is available
			_unlockMonth( _currentMonth )
		}
		
		_db.transaction(
			function( tx ) {
				//tx.executeSql( 'SELECT * FROM ' + _tableNameActivities, [], _querySuccess, _errorCB );
				tx.executeSql(
					'SELECT * FROM ' + _tableNameActivities,
					[],
					function( tx, results ) {
						//console.log( "Returned rows = " + results.rows.length );
		
						var len = results.rows.length;
						//console.log( "DEMO table: " + len + " rows found." );
						var rows = [];
						for( var i = 0; i < len; i++ ) {
							var row = {
								id: results.rows.item( i ).id,
								activityStatus: results.rows.item( i ).activityStatus,
								activityTypeId: results.rows.item( i ).activityTypeId,
								dateTime: results.rows.item( i ).dateTime,
								description: results.rows.item( i ).description,
								icon: results.rows.item( i ).icon,
								image: results.rows.item( i ).image,
								month: results.rows.item( i ).month,
								monthlyStats: {
									completed: results.rows.item( i ).monthlyStats_completed,
									numActivities: results.rows.item( i ).monthlyStats_numActivities
								},
								paths: JSON.parse( results.rows.item( i ).paths ),
								status: results.rows.item( i ).status,
								title: results.rows.item( i ).title,
								type: results.rows.item( i ).type,
								typeId: results.rows.item( i ).typeId,
								url: results.rows.item( i ).url
							};

							rows.push( row );

							//console.log( "Row = " + i + " ID = " + results.rows.item( i ).id + " Data =  " + results.rows.item( i ).activityStatus + " Month =  " + results.rows.item( i ).month, row );
						}

						//console.log( 'rows', rows );
						_results = rows;
						
						
						tx.executeSql(
							'SELECT * FROM ' + _tableNameInfo,
							[],
							function( tx, statsResults ) {

								var collection = {
									activities: _results
								};
								
								//console.log( 'statsResults', statsResults.rows );
								
									//console.log( "Row = " + i + " ID = " + results.rows.item( i ).id + " Data =  " + results.rows.item( i ).activityStatus + " Month =  " + results.rows.item( i ).month, row );
								
								var len2 = statsResults.rows.length;
								for( var j = 0; j < len2; j++ ) {
									switch( statsResults.rows.item( j ).key ) {
										case 'pagePrevious':
											if ( !collection.pages ) {
												collection.pages = {};
											}
											collection.pages.previous = statsResults.rows.item( j ).value;
											break;
										case 'pageNext':
											if ( !collection.pages ) {
												collection.pages = {};
											}
											collection.pages.next = statsResults.rows.item( j ).value;
											break;
											
										case 'statsTotalActivities':
											if ( !collection.stats ) {
												collection.stats = {};
											}
											collection.stats.totalActivities = statsResults.rows.item( j ).value;
											break;
										case 'statsTotalMonths':
											if ( !collection.stats ) {
												collection.stats = {};
											}
											collection.stats.totalMonths = statsResults.rows.item( j ).value;
											break;
										case 'statsTotalcompleted':
											if ( !collection.stats ) {
												collection.stats = {};
											}
											collection.stats.totalcompleted = statsResults.rows.item( j ).value;
											break;
									}
								}

								//console.log( 'full collection', collection );
								
								
								callback( collection );

								return false;
							},
							_errorCB
						);
						
						
						
						//callback( rows );

						// this will be true since it was a select statement and so rowsAffected was 0
						if ( !results.rowsAffected ) {
							//console.log( 'No rows affected!' );
							return false;
						}

						// for an insert statement, this property will return the ID of the last inserted row
						console.log( "Last inserted row ID = " + results.insertId );
					},
					_errorCB
				);
				
				
				
			},
			_errorCB,
			_successCB
		);
	};
	
	Activities.prototype.add = function( model ) {
		_insert(
			model.id,
			model.activityStatus,
			model.activityTypeId,
			model.dateTime,
			model.description,
			model.icon,
			model.image,
			model.month,
			model.monthlyStats.completed,
			model.monthlyStats.numActivities,
			JSON.stringify( model.paths ),
			model.status,
			model.title,
			model.type,
			model.typeId,
			model.url
		);
	}
	
	Activities.prototype.addCollection = function( collection ) {
		
		//console.log( 'addCollection', collection );
		
		if ( collection.activities && collection.activities.length > 0 ) {
			for( var activity in collection.activities ) {
				var model = collection.activities[ activity ];
				_insert(
					model.id,
					model.activityStatus,
					model.activityTypeId,
					model.dateTime,
					model.description,
					model.icon,
					model.image,
					model.month,
					model.monthlyStats.completed,
					model.monthlyStats.numActivities,
					JSON.stringify( model.paths ),
					model.status,
					model.title,
					model.type,
					model.typeId,
					model.url
				);
			}
		}
		
		_insertInfo( collection );
	}
	
	
	Activities.prototype.updateStatus = function( id, status, typeId ) {
		_updateStatus( id, status, typeId );
	}
	
	Activities.prototype.clearJourney = function() {
		_clear();
	}
	

	return Activities;	

} )();
  